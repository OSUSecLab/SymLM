,
,
,
,
,
,
,
,
,
,
,
,
,
push r15 mov r15 , rdi push r14 push r13 mov r13 , rsi push r12 mov r12 , rdx push rbp push rbx sub rsp , num call hexvar cmp byte ptr [ r13 ] , hexvar je hexvar cmp r15 , rax je hexvar sub rax , r15 lea r14 , [ rax + r12 ] mov rbx , rax lea rdi , [ r14 + num ] cmp rax , rdi ja hexvar cmp r12 , rdi ja hexvar call hexvar mov rbp , rax test rax , rax je hexvar mov rdx , rbx mov rsi , r15 mov rdi , rax call hexvar lea rdi , [ rbp + rbx ] mov rdx , r12 mov rsi , r13 call hexvar mov byte ptr [ rbp + r14 ] , num add rsp , num mov rax , rbp pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret nop dword ptr [ rax + rax ] mov rdi , r12 xor ebp , ebp add rdi , num je hexvar call hexvar mov rbp , rax test rax , rax je hexvar mov rdx , r12 mov rsi , r13 mov rdi , rax call hexvar mov byte ptr [ rbp + r12 ] , num jmp hexvar nop mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi xor ebp , ebp call hexvar mov rsi , r12 mov rdi , rax xor eax , eax call hexvar jmp hexvar nop dword ptr [ rax ] xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax xor eax , eax call hexvar jmp hexvar
,
,
,
,
,
,
,
,
,
push r12 push rbp push rbx test rdi , rdi je hexvar cmp qword ptr [ rdi ] , num mov rbp , rdi je hexvar mov eax , num nop dword ptr [ rax + rax ] mov ecx , eax add rax , num cmp qword ptr [ rbp + rax * num - num ] , num jne hexvar lea edi , [ rcx + num ] movsxd rdi , edi shl rdi , num call hexvar mov rdi , qword ptr [ rbp ] mov r12 , rax test rdi , rdi je hexvar xor ebx , ebx nop dword ptr [ rax + rax ] call hexvar mov qword ptr [ r12 + rbx ] , rax add rbx , num mov rdi , qword ptr [ rbp + rbx ] test rdi , rdi jne hexvar add rbx , r12 mov qword ptr [ rbx ] , num mov rax , r12 pop rbx pop rbp pop r12 ret nop dword ptr [ rax ] mov edi , num jmp hexvar nop word ptr [ rax + rax ] mov rbx , rax jmp hexvar xor r12d , r12d jmp hexvar
push rbx test rsi , rsi mov rbx , rsi mov eax , num cmove rbx , rax test rdi , rdi je hexvar mov rsi , rbx call hexvar test rax , rax je hexvar pop rbx ret nop dword ptr [ rax ] mov rdi , rbx call hexvar jmp hexvar mov rdi , rbx call hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov rcx , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - num ] mov rdx , - num mov rsi , rcx mov edi , eax call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - num ] mov r8 , - num mov edi , eax call hexvar leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov eax , esi mov byte ptr [ rbp - hexvar ] , al movsx edx , byte ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , - num mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax lea rax , [ rbp - hexvar ] mov edx , num mov esi , hexvar mov rdi , rax call hexvar lea rdx , [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , - num mov edi , eax call hexvar mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax lea rax , [ rbp - hexvar ] mov edx , num mov esi , hexvar mov rdi , rax call hexvar lea rdx , [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , - num mov edi , eax call hexvar mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar lea rax , [ rip + hexvar ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num sete al movzx eax , al add qword ptr [ rbp - num ] , rax mov ecx , num mov rax , qword ptr [ rbp - num ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar movabs rax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] cmp qword ptr [ rbp - num ] , rax jb hexvar call hexvar mov rax , qword ptr [ rbp - num ] shr rax , num mov rdx , rax mov rax , qword ptr [ rbp - num ] add rax , rdx add rax , num mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov rcx , rax mov rax , qword ptr [ rbp - num ] mov rdx , rax mov esi , num mov rdi , rcx call hexvar leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov ecx , num mov rax , qword ptr [ rbp - hexvar ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx cmp qword ptr [ rbp - hexvar ] , - num jne hexvar lea rdi , [ rip + hexvar ] call hexvar jmp hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov rbx , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov esi , num mov edi , num call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov r8 , rbx mov rcx , rdx mov rdx , rax mov esi , num mov edi , num mov eax , num call hexvar nop add rsp , hexvar pop rbx pop rbp ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov rcx , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - num ] mov rdx , - num mov rsi , rcx mov edi , eax call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rsi , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov r8 , rsi mov rsi , rax mov edi , num call hexvar leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov edx , hexvar mov rsi , rcx mov rdi , rax call hexvar leave ret
,
,
,
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx cmp qword ptr [ rbp - hexvar ] , - num jne hexvar lea rdi , [ rip + hexvar ] call hexvar jmp hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov rbx , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov esi , num mov edi , num call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov r8 , rbx mov rcx , rdx mov rdx , rax mov esi , num mov edi , num mov eax , num call hexvar nop add rsp , hexvar pop rbx pop rbp ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar lea rdx , [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , - num mov edi , eax call hexvar mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov eax , edx mov byte ptr [ rbp - hexvar ] , al mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax movsx ecx , byte ptr [ rbp - hexvar ] lea rax , [ rbp - hexvar ] mov edx , num mov esi , ecx mov rdi , rax call hexvar lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov rsi , qword ptr [ rbp - num ] xor rsi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar lea rdx , [ rax + num ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov ecx , num mov rax , qword ptr [ rbp - hexvar ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov ecx , num mov rax , qword ptr [ rbp - num ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar mov rax , qword ptr [ rbp - num ] imul rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov dword ptr [ rbp - hexvar ] , edx mov rax , qword ptr [ rbp - hexvar ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rax ] , num mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rsi , rcx mov rdi , rax call hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] sub rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] mov rdx , qword ptr [ rbp - hexvar ] add rdx , num mov rdi , rdx call rax mov qword ptr [ rbp - num ] , rax mov rdx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rcx mov rdi , rax call hexvar mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov byte ptr [ rax ] , num mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] mov rsi , rcx mov rdi , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] mov rdx , qword ptr [ rbp - hexvar ] lea rcx , [ rdx + num ] mov rdx , qword ptr [ rbp - num ] mov rsi , rcx mov rdi , rdx call rax cmp dword ptr [ rbp - hexvar ] , num je hexvar mov eax , dword ptr [ rbp - hexvar ] jmp hexvar mov rax , qword ptr [ rbp - hexvar ] lea rsi , [ rax + num ] mov rax , qword ptr [ rbp - hexvar ] lea rcx , [ rax + hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov edx , eax mov rdi , rcx call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - num ] add rax , rdx mov byte ptr [ rax ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] add rax , num cmp rdx , rax je hexvar mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] mov rdx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rdx + hexvar ] lea rdi , [ rdx + num ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rdx + hexvar ] mov rcx , qword ptr [ rbp - num ] mov rdx , rdi mov rdi , rcx call rax mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov eax , num leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , hexvar mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rip + hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] mov rdx , qword ptr [ rbp - hexvar ] shl rdx , num mov rdi , rdx call rax mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + num ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov edx , eax mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax ] , edx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov qword ptr [ rbp - num ] , rax mov qword ptr [ rbp - hexvar ] , num jmp hexvar mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov ecx , dword ptr [ rax + rdx * num ] mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov dword ptr [ rax + rdx * num ] , ecx add qword ptr [ rbp - hexvar ] , num cmp qword ptr [ rbp - hexvar ] , hexvar jle hexvar mov rax , qword ptr [ rbp - num ] mov edx , dword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax + hexvar ] , edx nop leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov rax , qword ptr [ rip + hexvar ] mov edx , dword ptr [ rip + hexvar ] movsxd rdx , edx shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar test eax , eax jne hexvar mov edi , num call hexvar call hexvar movzx eax , al test eax , eax setne al xor eax , num movzx eax , al mov byte ptr [ rbp - hexvar ] , al and byte ptr [ rbp - hexvar ] , num jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov edx , dword ptr [ rip + hexvar ] movsxd rdx , edx shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] movzx eax , byte ptr [ rax ] cmp al , hexvar jne hexvar mov rax , qword ptr [ rip + hexvar ] mov edx , dword ptr [ rip + hexvar ] movsxd rdx , edx shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] add rax , num movzx eax , byte ptr [ rax ] test al , al je hexvar mov rax , qword ptr [ rip + hexvar ] mov edx , dword ptr [ rip + hexvar ] movsxd rdx , edx shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] add rax , num movzx eax , byte ptr [ rax ] test al , al jne hexvar mov rax , qword ptr [ rip + hexvar ] mov edx , dword ptr [ rip + hexvar ] movsxd rdx , edx shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] mov rdi , rax call hexvar test al , al je hexvar call hexvar mov byte ptr [ rbp - hexvar ] , al jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov edx , dword ptr [ rip + hexvar ] movsxd rdx , edx shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rbx , rax lea rdi , [ rip + hexvar ] call hexvar mov rsi , rbx mov rdi , rax mov eax , num call hexvar call hexvar movzx eax , byte ptr [ rbp - hexvar ] add rsp , hexvar pop rbx pop rbp ret
,
,
,
,
,
,
,
push rbp mov rbp , rsp mov edx , dword ptr [ rip + hexvar ] mov eax , dword ptr [ rip + hexvar ] cmp edx , eax jl hexvar call hexvar call hexvar pop rbp ret
,
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov rax , qword ptr [ rip + hexvar ] mov edx , dword ptr [ rip + hexvar ] movsxd rdx , edx shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar test eax , eax jne hexvar mov edi , num call hexvar call hexvar movzx eax , al test eax , eax setne al xor eax , num movzx eax , al mov byte ptr [ rbp - hexvar ] , al and byte ptr [ rbp - hexvar ] , num jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov edx , dword ptr [ rip + hexvar ] movsxd rdx , edx shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] movzx eax , byte ptr [ rax ] cmp al , hexvar jne hexvar mov rax , qword ptr [ rip + hexvar ] mov edx , dword ptr [ rip + hexvar ] movsxd rdx , edx shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] add rax , num movzx eax , byte ptr [ rax ] test al , al je hexvar mov rax , qword ptr [ rip + hexvar ] mov edx , dword ptr [ rip + hexvar ] movsxd rdx , edx shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] add rax , num movzx eax , byte ptr [ rax ] test al , al jne hexvar mov rax , qword ptr [ rip + hexvar ] mov edx , dword ptr [ rip + hexvar ] movsxd rdx , edx shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] mov rdi , rax call hexvar test al , al je hexvar call hexvar mov byte ptr [ rbp - hexvar ] , al jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov edx , dword ptr [ rip + hexvar ] movsxd rdx , edx shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rbx , rax lea rdi , [ rip + hexvar ] call hexvar mov rsi , rbx mov rdi , rax mov eax , num call hexvar call hexvar movzx eax , byte ptr [ rbp - hexvar ] add rsp , hexvar pop rbx pop rbp ret
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar add qword ptr [ rbp - hexvar ] , num call hexvar mov rbx , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] movsx eax , al mov edi , eax call hexvar movzx eax , al add rax , rax add rax , rbx movzx eax , word ptr [ rax ] movzx eax , ax and eax , num test eax , eax jne hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] cmp al , hexvar jne hexvar add qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] cmp al , hexvar sete al movzx eax , al add qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax + num ] mov qword ptr [ rbp - hexvar ] , rdx movzx eax , byte ptr [ rax ] movsx eax , al sub eax , hexvar cmp eax , num ja hexvar jmp hexvar add qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] movsx eax , al sub eax , hexvar cmp eax , num jbe hexvar jmp hexvar add qword ptr [ rbp - hexvar ] , num call hexvar mov rbx , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] movsx eax , al mov edi , eax call hexvar movzx eax , al add rax , rax add rax , rbx movzx eax , word ptr [ rax ] movzx eax , ax and eax , num test eax , eax jne hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al jne hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rbx , rax lea rdi , [ rip + hexvar ] call hexvar mov rsi , rbx mov rdi , rax mov eax , num call hexvar add rsp , hexvar pop rbx pop rbp ret
,
,
,
,
,
,
,
push rbp mov rbp , rsp push rbx sub rsp , num mov rax , qword ptr [ rip + hexvar ] mov edx , dword ptr [ rip + hexvar ] movsxd rdx , edx shl rdx , num sub rdx , num add rax , rdx mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rbx , rax lea rdi , [ rip + hexvar ] call hexvar mov rsi , rbx mov rdi , rax mov eax , num call hexvar
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rax mov edi , num call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - num ] mov r8 , - num mov edi , eax call hexvar leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov eax , esi mov byte ptr [ rbp - hexvar ] , al movsx edx , byte ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , - num mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax lea rax , [ rbp - hexvar ] mov edx , num mov esi , hexvar mov rdi , rax call hexvar lea rdx , [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , - num mov edi , eax call hexvar mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov eax , edx mov byte ptr [ rbp - hexvar ] , al mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax movsx ecx , byte ptr [ rbp - hexvar ] lea rax , [ rbp - hexvar ] mov edx , num mov esi , ecx mov rdi , rax call hexvar lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov rsi , qword ptr [ rbp - num ] xor rsi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar lea rax , [ rip + hexvar ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num sete al movzx eax , al add qword ptr [ rbp - num ] , rax mov ecx , num mov rax , qword ptr [ rbp - num ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar movabs rax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] cmp qword ptr [ rbp - num ] , rax jb hexvar call hexvar mov rax , qword ptr [ rbp - num ] shr rax , num mov rdx , rax mov rax , qword ptr [ rbp - num ] add rax , rdx add rax , num mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov ecx , num mov rax , qword ptr [ rbp - num ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar mov rax , qword ptr [ rbp - num ] imul rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov rdi , rdx call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov rdi , rdx call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rax mov edi , num call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - num ] mov r8 , - num mov edi , eax call hexvar leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov eax , esi mov byte ptr [ rbp - hexvar ] , al movsx edx , byte ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , - num mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax lea rax , [ rbp - hexvar ] mov edx , num mov esi , hexvar mov rdi , rax call hexvar lea rdx , [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , - num mov edi , eax call hexvar mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov eax , edx mov byte ptr [ rbp - hexvar ] , al mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax movsx ecx , byte ptr [ rbp - hexvar ] lea rax , [ rbp - hexvar ] mov edx , num mov esi , ecx mov rdi , rax call hexvar lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov rsi , qword ptr [ rbp - num ] xor rsi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar lea rax , [ rip + hexvar ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num sete al movzx eax , al add qword ptr [ rbp - num ] , rax mov ecx , num mov rax , qword ptr [ rbp - num ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar movabs rax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] cmp qword ptr [ rbp - num ] , rax jb hexvar call hexvar mov rax , qword ptr [ rbp - num ] shr rax , num mov rdx , rax mov rax , qword ptr [ rbp - num ] add rax , rdx add rax , num mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rcx , rax mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rax mov rdi , rcx call hexvar leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num sete al movzx eax , al add qword ptr [ rbp - num ] , rax mov ecx , num mov rax , qword ptr [ rbp - num ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar movabs rax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] cmp qword ptr [ rbp - num ] , rax jb hexvar call hexvar mov rax , qword ptr [ rbp - num ] shr rax , num mov rdx , rax mov rax , qword ptr [ rbp - num ] add rax , rdx add rax , num mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar mov dword ptr [ rbp - hexvar ] , eax mov edx , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax ] , edx nop mov rax , qword ptr [ rbp - num ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov eax , edi mov qword ptr [ rbp - hexvar ] , rsi mov word ptr [ rbp - hexvar ] , ax mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax movzx eax , word ptr [ rbp - hexvar ] mov edi , eax call hexvar mov word ptr [ rbp - hexvar ] , ax movzx edx , word ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov word ptr [ rax ] , dx nop mov rax , qword ptr [ rbp - num ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
push r15 push r14 push r13 mov r13 , rsi lea rsi , [ rip + hexvar ] push r12 mov r12 , rdx mov edx , num push rbp push rbx mov rbx , rdi xor edi , edi sub rsp , num call hexvar mov rbp , qword ptr [ rbx ] mov r14 , rax mov rdi , rbp call hexvar mov rdi , r12 mov r15 , rax call hexvar mov edx , dword ptr [ rbx + hexvar ] add rax , r15 lea r15 , [ rax + num ] test edx , edx je hexvar cmp qword ptr [ rbx + hexvar ] , num jne hexvar mov rdi , r15 call hexvar mov r13 , rax test rax , rax je hexvar mov r8 , r12 mov rcx , rbp lea rdx , [ rip + hexvar ] mov rsi , r15 mov rdi , r13 xor eax , eax call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov rdi , r15 call hexvar mov r13 , rax test rax , rax je hexvar mov r8 , r12 mov rcx , rbp lea rdx , [ rip + hexvar ] mov rsi , r15 mov rdi , r13 xor eax , eax call hexvar add rsp , num mov rax , r13 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret mov r15 , qword ptr [ r13 ] lea rbx , [ rax + num ] test r15 , r15 je hexvar mov rdi , r15 call hexvar add rbx , rax mov rdi , rbx call hexvar mov r9 , r12 mov r8 , r15 mov r13 , rax test rax , rax je hexvar mov rcx , rbp lea rdx , [ rip + hexvar ] mov rsi , rbx mov rdi , r13 xor eax , eax call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rdi , r14 call hexvar add rbx , rax mov rdi , rbx call hexvar mov r9 , r12 mov r8 , r14 mov r13 , rax test rax , rax jne hexvar nop dword ptr [ rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi xor r13d , r13d call hexvar mov rdi , rax xor eax , eax call hexvar jmp hexvar
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rdi push rbx sub rsp , num call hexvar lea rbx , [ rax + num ] mov rdi , rbx call hexvar add rsp , num mov rdx , rbx mov rsi , rbp pop rbx mov rdi , rax pop rbp jmp hexvar
push rbx test rsi , rsi mov rbx , rsi mov eax , num cmove rbx , rax test rdi , rdi je hexvar mov rsi , rbx call hexvar test rax , rax je hexvar pop rbx ret nop dword ptr [ rax ] mov rdi , rbx call hexvar jmp hexvar mov rdi , rbx call hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push r12 push rbp movsxd rbp , esi push rbx lea r12d , [ rbp + num ] mov rbx , rdi movsxd r12 , r12d mov rdi , r12 call hexvar test rax , rax je hexvar lea edi , [ rbp - num ] xor edx , edx test ebp , ebp jg hexvar jmp hexvar nop dword ptr [ rax ] mov rdx , rcx movzx ecx , byte ptr [ rbx + rdx ] mov byte ptr [ rax + rdx ] , cl lea rcx , [ rdx + num ] cmp rdi , rdx jne hexvar mov byte ptr [ rax + rbp + num ] , num mov rsi , r12 mov rdi , rax mov byte ptr [ rax + rbp ] , num call hexvar test rax , rax je hexvar mov dword ptr [ rax + hexvar ] , num pop rbx pop rbp pop r12 ret lea rdi , [ rip + hexvar ] call hexvar lea rdi , [ rip + hexvar ] call hexvar
,
,
,
,
,
mov rax , qword ptr [ rip + hexvar ] push r12 mov r12 , rdi push rbp push rbx test rax , rax je hexvar mov rdx , qword ptr [ rip + hexvar ] lea rbp , [ rax + rdx * num ] mov rbx , qword ptr [ rbp ] test rbx , rbx je hexvar mov rsi , r12 mov rdi , rbx call hexvar mov rdx , qword ptr [ rbp ] pop rbx pop rbp pop r12 mov eax , dword ptr [ rdx + hexvar ] mov dword ptr [ rip + hexvar ] , eax mov rax , qword ptr [ rdx + hexvar ] mov rdx , qword ptr [ rdx ] mov qword ptr [ rip + hexvar ] , rax mov qword ptr [ rip + hexvar ] , rax mov qword ptr [ rip + hexvar ] , rdx movzx eax , byte ptr [ rax ] mov byte ptr [ rip + hexvar ] , al ret nop dword ptr [ rax ] call hexvar mov rbx , qword ptr [ rip + hexvar ] mov esi , hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , qword ptr [ rip + hexvar ] lea rbp , [ rbx + rax * num ] call hexvar test rbx , rbx mov qword ptr [ rbp ] , rax cmovne rbx , rax jmp hexvar
push r12 push rbp mov rbp , qword ptr [ rip + hexvar ] push rbx test rbp , rbp je hexvar mov rbx , qword ptr [ rip + hexvar ] lea r12 , [ rbp + rbx * num ] mov rdi , qword ptr [ r12 ] test rdi , rdi je hexvar call hexvar mov qword ptr [ r12 ] , num test rbx , rbx je hexvar sub rbx , num mov rax , qword ptr [ rbp + rbx * num ] mov qword ptr [ rip + hexvar ] , rbx test rax , rax je hexvar mov edx , dword ptr [ rax + hexvar ] mov dword ptr [ rip + hexvar ] , edx mov rdx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rip + hexvar ] , rdx mov qword ptr [ rip + hexvar ] , rax movzx eax , byte ptr [ rdx ] mov qword ptr [ rip + hexvar ] , rdx mov byte ptr [ rip + hexvar ] , al pop rbx pop rbp pop r12 ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push r14 push r13 push r12 push rbp mov rbp , rdi push rbx mov r14 , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rdi ] call hexvar lea rdi , [ rax + num ] call hexvar mov rsi , qword ptr [ rbp ] mov r13 , rax mov rdi , rax call hexvar mov rdi , r13 call hexvar test rax , rax je hexvar mov r12 , rax mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rbp + num ] mov rdi , r12 mov rsi , qword ptr [ rax ] call hexvar mov rbx , rax test rax , rax je hexvar mov esi , num mov rdi , rax mov qword ptr [ rip + hexvar ] , rax call hexvar mov eax , dword ptr [ rip + hexvar ] movzx edx , byte ptr [ rbx + hexvar ] not eax and edx , hexvar shr eax , hexvar shl eax , num or eax , edx mov byte ptr [ rbx + hexvar ] , al mov ecx , dword ptr [ rip + hexvar ] test ecx , ecx je hexvar or dword ptr [ rbx + hexvar ] , hexvar mov edx , dword ptr [ rip + hexvar ] test edx , edx je hexvar or dword ptr [ rbx + hexvar ] , hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar or byte ptr [ rbx + hexvar ] , num mov rsi , r14 mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov qword ptr [ rip + hexvar ] , num mov rdi , rbp mov qword ptr [ rip + hexvar ] , num call hexvar xor edx , edx mov rsi , r13 mov rdi , r12 call hexvar test eax , eax jne hexvar mov rdi , r13 call hexvar pop rbx mov rdi , r12 pop rbp pop r12 pop r13 pop r14 jmp hexvar nop dword ptr [ rax + rax ] test byte ptr [ rbp + hexvar ] , num je hexvar jmp hexvar mov rdi , r13 call hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax call hexvar mov edi , num call hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbx call hexvar mov rdi , rax mov rbx , rax call hexvar cmp eax , - num je hexvar mov edi , eax call hexvar mov rax , rbx pop rbx ret nop word ptr [ rax + rax ] mov rdi , rbx xor ebx , ebx call hexvar jmp hexvar
mov rax , qword ptr [ rip + hexvar ] push rbx test rax , rax je hexvar mov rdx , qword ptr [ rip + hexvar ] mov rbx , qword ptr [ rax ] lea rsi , [ rip + hexvar ] xor edi , edi mov dword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , rdx mov edx , num call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar mov rax , qword ptr [ rip + hexvar ] mov rbx , qword ptr [ rax + hexvar ] test rbx , rbx je hexvar nop dword ptr [ rax + rax ] mov edx , dword ptr [ rip + hexvar ] mov rdi , qword ptr [ rip + hexvar ] mov rsi , rbx xor ecx , ecx call hexvar mov rbx , qword ptr [ rbx + hexvar ] test rbx , rbx jne hexvar pop rbx ret nop dword ptr [ rax ] mov rbx , qword ptr [ rip + hexvar ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , qword ptr [ rip + hexvar ] mov rsi , rax mov rdx , rbx xor eax , eax call hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar mov edi , num call hexvar
,
,
,
,
push r15 push r14 mov r14d , edx push r13 push r12 mov r12 , rdi mov edi , num push rbp push rbx mov rbx , rsi sub rsp , hexvar mov r13 , rsp mov rdx , r13 call hexvar test eax , eax jne hexvar mov eax , dword ptr [ rsp + hexvar ] and eax , hexvar cmp eax , hexvar jne hexvar cmp qword ptr [ rsp + hexvar ] , num je hexvar mov rsi , rbx mov rdi , r12 call hexvar mov ebp , eax test eax , eax jne hexvar test r14d , r14d jne hexvar mov rdi , r12 call hexvar add rsp , hexvar mov eax , ebp pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret nop dword ptr [ rax ] mov rsi , rbx mov rdi , r12 call hexvar mov ebp , eax test eax , eax jne hexvar xor ebp , ebp jmp hexvar nop dword ptr [ rax ] mov rsi , r13 mov rdi , rbx call hexvar jmp hexvar nop dword ptr [ rax ] call hexvar mov edi , dword ptr [ rax ] call hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] mov r15 , rax call hexvar mov rdx , r15 mov rsi , rbx mov rdi , rax xor eax , eax call hexvar test r14d , r14d je hexvar jmp hexvar nop dword ptr [ rax ] call hexvar mov edi , dword ptr [ rax ] call hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] mov r13 , rax call hexvar mov rdx , r13 mov rsi , rbx mov rdi , rax xor eax , eax call hexvar mov rdi , r12 call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rsi , rbx mov rdi , r12 call hexvar mov ebp , eax test eax , eax jne hexvar mov esi , dword ptr [ rsp + hexvar ] mov rdi , rbx and esi , hexvar call hexvar mov edx , dword ptr [ rsp + hexvar ] mov esi , dword ptr [ rsp + hexvar ] mov rdi , rbx call hexvar test eax , eax js hexvar mov esi , dword ptr [ rsp + hexvar ] mov rdi , rbx and esi , hexvar call hexvar jmp hexvar
push r15 push r14 mov r14 , rdi mov edi , hexvar push r13 push r12 push rbp push rbx sub rsp , hexvar call hexvar mov rsi , rsp mov rdi , r14 mov r12 , rax mov rax , qword ptr [ r14 + num ] call qword ptr [ rax + hexvar ] test eax , eax jne hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar xor edx , edx xor esi , esi mov rdi , r14 call hexvar mov r13 , qword ptr [ rsp + hexvar ] test r13 , r13 je hexvar xor ebp , ebp nop mov rbx , r13 mov eax , hexvar mov rdx , r14 mov rdi , r12 sub rbx , rbp cmp rbx , hexvar cmova rbx , rax mov rsi , rbx call hexvar mov r15 , rax cmp rax , rbx jne hexvar mov rcx , qword ptr [ rip + hexvar ] mov rdx , rax mov esi , num mov rdi , r12 call hexvar cmp rax , r15 jne hexvar add rbp , rax cmp r13 , rbp ja hexvar add rsp , hexvar mov rdi , r12 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp hexvar nop dword ptr [ rax ] mov rsi , qword ptr [ r14 ] lea rdi , [ rip + hexvar ] xor eax , eax call hexvar jmp hexvar call hexvar mov edi , dword ptr [ rax ] call hexvar lea rdi , [ rip + hexvar ] mov rsi , rax xor eax , eax call hexvar mov rax , qword ptr [ r14 + hexvar ] mov edx , num lea rsi , [ rip + hexvar ] mov rbx , qword ptr [ rax ] xor edi , edi call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar mov rbx , qword ptr [ r14 ] mov edx , num lea rsi , [ rip + hexvar ] jmp hexvar
sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 test al , al je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 lea rax , [ rsp + hexvar ] lea rsi , [ rsp + num ] mov dword ptr [ rsp + num ] , num mov qword ptr [ rsp + hexvar ] , rax lea rax , [ rsp + hexvar ] mov dword ptr [ rsp + hexvar ] , hexvar mov qword ptr [ rsp + hexvar ] , rax call hexvar mov edi , num call hexvar
push r14 push r13 push r12 push rbp mov rbp , rdi push rbx mov r14 , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rdi ] call hexvar lea rdi , [ rax + num ] call hexvar mov rsi , qword ptr [ rbp ] mov r13 , rax mov rdi , rax call hexvar mov rdi , r13 call hexvar test rax , rax je hexvar mov r12 , rax mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rbp + num ] mov rdi , r12 mov rsi , qword ptr [ rax ] call hexvar mov rbx , rax test rax , rax je hexvar mov esi , num mov rdi , rax mov qword ptr [ rip + hexvar ] , rax call hexvar mov eax , dword ptr [ rip + hexvar ] movzx edx , byte ptr [ rbx + hexvar ] not eax and edx , hexvar shr eax , hexvar shl eax , num or eax , edx mov byte ptr [ rbx + hexvar ] , al mov ecx , dword ptr [ rip + hexvar ] test ecx , ecx je hexvar or dword ptr [ rbx + hexvar ] , hexvar mov edx , dword ptr [ rip + hexvar ] test edx , edx je hexvar or dword ptr [ rbx + hexvar ] , hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar or byte ptr [ rbx + hexvar ] , num mov rsi , r14 mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov qword ptr [ rip + hexvar ] , num mov rdi , rbp mov qword ptr [ rip + hexvar ] , num call hexvar xor edx , edx mov rsi , r13 mov rdi , r12 call hexvar test eax , eax jne hexvar mov rdi , r13 call hexvar pop rbx mov rdi , r12 pop rbp pop r12 pop r13 pop r14 jmp hexvar nop dword ptr [ rax + rax ] test byte ptr [ rbp + hexvar ] , num je hexvar jmp hexvar mov rdi , r13 call hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax call hexvar mov edi , num call hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rcx , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov esi , num mov rdi , rax call hexvar mov dword ptr [ rbp - num ] , eax cmp dword ptr [ rbp - num ] , num jne hexvar mov dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] and eax , hexvar test eax , eax je hexvar mov eax , dword ptr [ rbp - num ] jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov ecx , num mov esi , num mov rdi , rax call hexvar mov dword ptr [ rbp - num ] , eax cmp dword ptr [ rbp - num ] , num jne hexvar mov eax , num jmp hexvar mov eax , dword ptr [ rbp - num ] leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx cmp qword ptr [ rbp - hexvar ] , - num jne hexvar lea rdi , [ rip + hexvar ] call hexvar jmp hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov rbx , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov esi , num mov edi , num call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov r8 , rbx mov rcx , rdx mov rdx , rax mov esi , num mov edi , num mov eax , num call hexvar nop add rsp , hexvar pop rbx pop rbp ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rax mov edi , num call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rsi , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov r8 , rsi mov rsi , rax mov edi , num call hexvar leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov edx , hexvar mov rsi , rcx mov rdi , rax call hexvar leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - num ] mov esi , eax mov edi , num call hexvar leave ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar mov rdi , qword ptr [ rbp - num ] xor rdi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax lea rax , [ rbp - hexvar ] mov edx , num mov esi , hexvar mov rdi , rax call hexvar lea rdx , [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , - num mov edi , eax call hexvar mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar lea rax , [ rip + hexvar ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num sete al movzx eax , al add qword ptr [ rbp - num ] , rax mov ecx , num mov rax , qword ptr [ rbp - num ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar movabs rax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] cmp qword ptr [ rbp - num ] , rax jb hexvar call hexvar mov rax , qword ptr [ rbp - num ] shr rax , num mov rdx , rax mov rax , qword ptr [ rbp - num ] add rax , rdx add rax , num mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov edi , hexvar call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + num ] , rdx mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rip + hexvar ] , rax jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov qword ptr [ rip + hexvar ] , rax nop leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov edx , num mov rsi , rcx mov rdi , rax call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov ecx , num mov rax , qword ptr [ rbp - hexvar ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar cmp rax , num setne al movzx eax , al test rax , rax je hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] movzx edx , al mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar mov eax , num leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rax mov edi , num call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rsi , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov r8 , rsi mov rsi , rax mov edi , num call hexvar leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov eax , esi mov byte ptr [ rbp - hexvar ] , al movsx edx , byte ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , - num mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar lea rdx , [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , - num mov edi , eax call hexvar mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax lea rax , [ rbp - hexvar ] mov edx , num mov esi , hexvar mov rdi , rax call hexvar lea rdx , [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , - num mov edi , eax call hexvar mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar lea rdx , [ rax + num ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num sete al movzx eax , al add qword ptr [ rbp - num ] , rax mov ecx , num mov rax , qword ptr [ rbp - num ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar movabs rax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] cmp qword ptr [ rbp - num ] , rax jb hexvar call hexvar mov rax , qword ptr [ rbp - num ] shr rax , num mov rdx , rax mov rax , qword ptr [ rbp - num ] add rax , rdx add rax , num mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov ecx , num mov rax , qword ptr [ rbp - hexvar ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov ebp , edi push rbx sub rsp , hexvar lea rdi , [ rsp + hexvar ] call hexvar test rax , rax je hexvar mov edx , num mov esi , hexvar mov rdi , rax mov rbx , rax call hexvar test eax , eax jne hexvar test ebp , ebp jne hexvar call hexvar mov rdi , rbx call hexvar mov esi , ebp mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp ret nop word ptr [ rax + rax ] call hexvar add rsp , hexvar pop rbx pop rbp ret
,
,
,
,
,
,
,
push rbx mov rbx , rdi mov rdi , qword ptr [ rdi + hexvar ] call hexvar mov edi , dword ptr [ rbx + hexvar ] mov rsi , rax mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar call hexvar mov dword ptr [ rbx + hexvar ] , eax pop rbx ret nop word ptr [ rax + rax ] call hexvar mov dword ptr [ rbx + hexvar ] , eax pop rbx ret
,
,
,
,
,
,
,
,
mov ecx , dword ptr [ rsi ] test ecx , ecx je hexvar mov edx , dword ptr [ rsi + num ] test edx , edx je hexvar cmp dword ptr [ rip + hexvar ] , num je hexvar push r12 push rbp mov rbp , rdi push rbx mov rbx , rsi add rsp , - hexvar mov eax , dword ptr [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , edx mov dword ptr [ rip + hexvar ] , ecx test eax , eax je hexvar mov r12 , rsp lea rsi , [ rip + hexvar ] xor eax , eax mov rdi , r12 call hexvar mov rcx , qword ptr [ rip + hexvar ] mov rdi , r12 mov rdx , rbp mov rsi , qword ptr [ rip + hexvar ] call hexvar mov rdi , rax mov rsi , rbx call hexvar sub rsp , - hexvar pop rbx pop rbp pop r12 ret nop cmp edx , dword ptr [ rip + hexvar ] jne hexvar cmp ecx , dword ptr [ rip + hexvar ] jne hexvar ret nop dword ptr [ rax ] mov rsi , rdi mov rdx , qword ptr [ rip + hexvar ] mov rdi , qword ptr [ rip + hexvar ] call hexvar mov rdi , rax jmp hexvar
push r12 mov r12 , rsi push rbp mov rbp , rdi mov edi , hexvar push rbx call hexvar movdqu xmm0 , xmmword ptr [ r12 ] movdqu xmm1 , xmmword ptr [ r12 + hexvar ] mov edx , num mov qword ptr [ rax + num ] , rbp mov esi , dword ptr [ rip + hexvar ] mov rbx , rax mov qword ptr [ rax ] , num mov rdi , qword ptr [ rip + hexvar ] movups xmmword ptr [ rax + hexvar ] , xmm0 movups xmmword ptr [ rax + hexvar ] , xmm1 call hexvar cmp qword ptr [ r12 + hexvar ] , num mov rbp , rax je hexvar mov rcx , qword ptr [ rax + hexvar ] xor edx , edx test rcx , rcx je hexvar mov rdx , qword ptr [ rax + hexvar ] lea rsi , [ rbx + hexvar ] lea rdi , [ rbx + num ] call hexvar mov rax , qword ptr [ rbp + hexvar ] mov qword ptr [ rax ] , rbx mov qword ptr [ rbp + hexvar ] , rbx pop rbx pop rbp pop r12 ret
,
,
,
,
,
,
,
,
,
,
,
push rbp push rbx sub rsp , num call hexvar test rax , rax je hexvar mov rbx , rax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rax + num ] call hexvar cmp rax , qword ptr [ rip + hexvar ] je hexvar call hexvar mov rbp , rax call hexvar mov rdx , qword ptr [ rip + hexvar ] mov dword ptr [ rax + num ] , hexvar mov rdx , qword ptr [ rdx + hexvar ] mov rcx , qword ptr [ rdx + num ] mov qword ptr [ rax + hexvar ] , rbp mov qword ptr [ rax + hexvar ] , rcx mov qword ptr [ rdx + num ] , rbp mov rdi , rbx call hexvar mov rdi , rbx call hexvar add rsp , num pop rbx pop rbp jmp hexvar nop dword ptr [ rax ] mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rax + num ] call hexvar mov rbp , rax call hexvar cmp rbp , rax jne hexvar jmp hexvar nop add rsp , num pop rbx pop rbp ret
,
,
,
,
,
,
,
push r12 lea rax , [ rip + hexvar ] lea rdx , [ rip + hexvar ] push rbp push rbx lea rbx , [ rip + hexvar ] sub rsp , hexvar test edi , edi cmove rbx , rax lea rax , [ rip + hexvar ] cmovne rax , rdx mov rdx , qword ptr [ rip + hexvar ] mov r12 , rax movzx eax , byte ptr [ rdx ] cmp al , hexvar jne hexvar lea rax , [ rdx + num ] mov qword ptr [ rip + hexvar ] , rax movzx eax , byte ptr [ rdx + num ] lea rdx , [ rip + hexvar ] cmp byte ptr [ rdx + rax ] , num jne hexvar lea rdi , [ rsp + num ] call hexvar mov rdx , qword ptr [ rsp + num ] mov ecx , num lea rdi , [ rip + hexvar ] movsx ebp , al mov rsi , rdx repe cmpsb byte ptr [ rsi ] , byte ptr [ rdi ] seta al sbb al , num test al , al jne hexvar mov dword ptr [ r12 ] , num mov edi , ebp call hexvar call hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret nop dword ptr [ rax + rax ] mov ecx , num lea rdi , [ rip + hexvar ] mov rsi , rdx repe cmpsb byte ptr [ rsi ] , byte ptr [ rdi ] seta al sbb al , num test al , al je hexvar mov ecx , num lea rdi , [ rip + hexvar ] mov rsi , rdx repe cmpsb byte ptr [ rsi ] , byte ptr [ rdi ] seta al sbb al , num test al , al jne hexvar mov dword ptr [ r12 ] , num jmp hexvar nop mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar call hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret nop mov dword ptr [ r12 ] , num jmp hexvar nop dword ptr [ rax ] xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar jmp hexvar
,
,
,
,
,
,
,
sub rsp , hexvar movzx eax , word ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rdi mov rdi , rsp and ax , hexvar or ax , hexvar mov word ptr [ rsp + hexvar ] , ax call hexvar add rsp , hexvar ret
,
,
push r13 push r12 mov r12d , edx push rbp mov rbp , rdi movzx edi , sil push rbx mov ebx , esi sub rsp , hexvar call hexvar cmp ebx , hexvar je hexvar mov r13d , eax test r12d , r12d jne hexvar and ebx , hexvar cmp ebx , hexvar je hexvar mov esi , r13d mov rdi , rbp call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax ] movdqu xmm0 , xmmword ptr [ rbp ] movdqu xmm1 , xmmword ptr [ rbp + hexvar ] movaps xmmword ptr [ rsp ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 mov byte ptr [ rsp + hexvar ] , hexvar call hexvar mov rdi , rsp mov esi , r13d mov qword ptr [ rsp + num ] , rax call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax + rax ] mov edi , ebx call hexvar jmp hexvar
mov rax , qword ptr [ rip + hexvar ] push rbx mov rbx , rdi mov qword ptr [ rdi + hexvar ] , rax call hexvar mov rdi , rbx mov rsi , rax call hexvar mov rsi , qword ptr [ rip + hexvar ] mov rdi , rbx pop rbx jmp hexvar
,
,
mov rax , qword ptr [ rdi + hexvar ] test rax , rax je hexvar push r12 mov r12 , rdi push rbp push rbx mov rbp , qword ptr [ rax ] test rbp , rbp jne hexvar jmp hexvar nop dword ptr [ rax ] xor esi , esi mov edi , ebx call hexvar mov rdi , qword ptr [ rip + hexvar ] call hexvar mov rax , qword ptr [ rip + hexvar ] cmp qword ptr [ rax + hexvar ] , num mov qword ptr [ rax + hexvar ] , num jne hexvar mov rbp , qword ptr [ rbp + hexvar ] test rbp , rbp je hexvar mov esi , dword ptr [ rbp + hexvar ] mov rdi , r12 call hexvar call hexvar test eax , eax je hexvar mov dword ptr [ rip + hexvar ] , num mov rdi , qword ptr [ rip + hexvar ] xor ebx , ebx test byte ptr [ rdi + hexvar ] , hexvar je hexvar mov eax , dword ptr [ rdi + hexvar ] test eax , eax jne hexvar call hexvar test eax , eax jne hexvar xor edx , edx xor esi , esi mov edi , ebx call hexvar jmp hexvar nop dword ptr [ rax ] add ebx , num shr eax , num test al , num je hexvar jmp hexvar nop dword ptr [ rax + rax ] pop rbx pop rbp pop r12 ret nop dword ptr [ rax ] ret lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar
,
,
mov edx , esi sub rsp , num movsxd r9 , edi mov esi , num test edi , edi je hexvar mov eax , num mov ecx , edi shl eax , cl sub eax , num movsxd rsi , eax sub rsp , num mov ecx , edx xor r8d , r8d mov edx , num push num mov edi , num call hexvar mov byte ptr [ rax ] , hexvar add rsp , hexvar ret
push r15 mov r15 , r8 push r14 mov r14d , ecx push r13 mov r13 , rdx push r12 mov r12d , edi mov rdi , rsi push rbp push rbx mov rbx , rsi sub rsp , hexvar mov qword ptr [ rsp + num ] , r9 call hexvar sub rsp , num mov r8 , r15 mov ecx , r14d mov rax , qword ptr [ rip + hexvar ] mov rsi , rbx mov edi , r12d mov rbp , qword ptr [ rax + hexvar ] lea rdx , [ rbp + rbx ] mov qword ptr [ rax + hexvar ] , rdx mov rdx , r13 push qword ptr [ rsp + hexvar ] mov r9 , qword ptr [ rsp + hexvar ] call hexvar add rsp , hexvar mov rax , rbp pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
push r15 push r14 push r13 mov r13 , rdi push r12 push rbp mov rbp , rsi push rbx sub rsp , hexvar call hexvar xor esi , esi mov rdi , rbp mov r15d , dword ptr [ rip + hexvar ] mov r14 , rax mov r12d , eax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rsp ] , rax call hexvar mov rbx , rax mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov edx , eax test eax , eax je hexvar test r14d , r14d jne hexvar mov rdi , qword ptr [ rsp ] mov esi , r15d call hexvar add rsp , hexvar mov eax , r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret nop word ptr [ rax + rax ] mov edi , num call hexvar mov edx , hexvar mov rsi , rbx mov byte ptr [ rax ] , num mov rax , qword ptr [ rbx + hexvar ] mov rdi , qword ptr [ rip + hexvar ] mov qword ptr [ rax + hexvar ] , num call hexvar mov edx , num cmp qword ptr [ rbx ] , rbp jne hexvar mov rdi , rbp mov dword ptr [ rsp + hexvar ] , edx call hexvar mov edx , dword ptr [ rsp + hexvar ] mov qword ptr [ rbx ] , rax jmp hexvar nop word ptr [ rax + rax ] lea ebp , [ r14 + num ] mov dword ptr [ rsp + hexvar ] , edx mov rdi , rbp call hexvar mov rsi , r13 mov rdi , rax call hexvar mov rax , qword ptr [ rbx + hexvar ] mov edx , dword ptr [ rsp + hexvar ] add qword ptr [ rax + hexvar ] , rbp mov r12d , edx jmp hexvar
mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar cmp rax , qword ptr [ rip + hexvar ] je hexvar sub rsp , num mov rdi , qword ptr [ rip + hexvar ] call hexvar xor edi , edi call hexvar mov rdx , qword ptr [ rip + hexvar ] mov rcx , qword ptr [ rip + hexvar ] jmp hexvar nop dword ptr [ rax ] mov rdx , rax mov rax , qword ptr [ rdx + hexvar ] cmp rax , rcx jne hexvar mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] test rax , rax jne hexvar jmp hexvar nop dword ptr [ rax ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar cmp rcx , qword ptr [ rax + hexvar ] jne hexvar mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rax + hexvar ] test rax , rax jne hexvar mov rdi , qword ptr [ rip + hexvar ] mov qword ptr [ rcx ] , rdi call hexvar xor edi , edi add rsp , num jmp hexvar nop ret
,
,
,
,
mov rdi , qword ptr [ rip + hexvar ] lea rsi , [ rip + hexvar ] jmp hexvar
,
,
push r13 push r12 push rbp push rbx sub rsp , num mov rax , qword ptr [ rsi + hexvar ] mov r12 , qword ptr [ rax + hexvar ] test r12 , r12 je hexvar mov rdi , qword ptr [ rdx + hexvar ] mov rbp , rsi mov rsi , r12 mov rbx , rdx call hexvar test rax , rax je hexvar mov edx , dword ptr [ rax ] mov rax , qword ptr [ rbx ] lea rax , [ rax + rdx * num ] mov rdx , qword ptr [ rbp + hexvar ] mov rcx , qword ptr [ rax ] mov qword ptr [ rdx + hexvar ] , rcx mov qword ptr [ rax ] , rbp add rsp , num pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax ] mov r13d , dword ptr [ rbx + num ] mov rax , qword ptr [ rbx ] mov edx , r13d test r13b , hexvar je hexvar mov ecx , r13d add edx , num mov edi , num mov qword ptr [ rax + rcx * num ] , rbp mov dword ptr [ rbx + num ] , edx call hexvar mov rdi , qword ptr [ rbx + hexvar ] mov rsi , r12 mov dword ptr [ rax ] , r13d add rsp , num mov rdx , rax pop rbx pop rbp pop r12 pop r13 jmp hexvar nop dword ptr [ rax + rax ] lea esi , [ r13 + hexvar ] mov rdi , rax shl rsi , num call hexvar mov edx , dword ptr [ rbx + num ] mov qword ptr [ rbx ] , rax jmp hexvar
,
push r12 mov r12 , rdi push rbp push rbx call hexvar lea rdi , [ rax + num ] mov rbx , rax call hexvar mov rbp , rax test rbx , rbx je hexvar xor eax , eax lea rcx , [ rip + hexvar ] nop dword ptr [ rax ] movzx edx , byte ptr [ r12 + rax ] movzx edx , byte ptr [ rcx + rdx ] mov byte ptr [ rbp + rax ] , dl add rax , num cmp rbx , rax jne hexvar add rbx , rbp mov byte ptr [ rbx ] , num mov rdi , qword ptr [ rip + hexvar ] mov rsi , rbp call hexvar mov rbx , rax test rax , rax je hexvar mov rdi , qword ptr [ rip + hexvar ] mov rsi , rbp xor edx , edx call hexvar mov rdi , rbx call hexvar pop rbx mov rdi , rbp pop rbp pop r12 jmp hexvar nop dword ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rsi , rbp mov rdi , rax xor eax , eax call hexvar pop rbx mov rdi , rbp pop rbp pop r12 jmp hexvar nop dword ptr [ rax ] mov rbx , rax jmp hexvar
mov rsi , qword ptr [ rdi ] test rsi , rsi je hexvar push r12 lea r12 , [ rip + hexvar ] push rbp push rbx mov rbx , rdi nop word ptr cs : [ rax + rax ] mov rdi , qword ptr [ rip + hexvar ] mov rdx , rbx call hexvar mov rbp , rax test rax , rax je hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar mov ecx , num mov rsi , rbp mov rdi , r12 repe cmpsb byte ptr [ rsi ] , byte ptr [ rdi ] seta al sbb al , num test al , al jne hexvar add rbx , hexvar mov rsi , qword ptr [ rbx ] test rsi , rsi jne hexvar pop rbx pop rbp pop r12 ret ret mov rbx , qword ptr [ rip + hexvar ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdx , rbp mov rdi , rax mov rsi , rbx xor eax , eax call hexvar
push rbp mov rbp , rdi push rbx sub rsp , num mov rdi , qword ptr [ rdi + hexvar ] test rdi , rdi je hexvar nop word ptr [ rax + rax ] mov rbx , qword ptr [ rdi ] call hexvar mov rdi , rbx test rbx , rbx jne hexvar mov rdi , qword ptr [ rbp + hexvar ] call hexvar mov rdi , rbp call hexvar add rsp , num mov rdi , rbp pop rbx pop rbp jmp hexvar
push r13 mov r13d , edi push r12 mov r12d , esi push rbp mov ebp , edx push rbx mov rbx , rcx sub rsp , num call hexvar mov dword ptr [ rip + hexvar ] , r13d mov dword ptr [ rip + hexvar ] , r12d mov dword ptr [ rip + hexvar ] , ebp mov qword ptr [ rip + hexvar ] , rbx mov qword ptr [ rip + hexvar ] , rax mov dword ptr [ rip + hexvar ] , num add rsp , num pop rbx pop rbp pop r12 pop r13 ret
,
,
,
,
,
,
,
push rbp push rbx sub rsp , hexvar lea rdi , [ rsp + hexvar ] call hexvar mov rsi , qword ptr [ rip + hexvar ] mov rbx , rax test rsi , rsi je hexvar mov eax , dword ptr [ rsp + hexvar ] cmp eax , dword ptr [ rip + hexvar ] je hexvar mov rdi , rbx mov dword ptr [ rip + hexvar ] , eax call hexvar test eax , eax jne hexvar mov rsi , rbx mov edi , hexvar lea rbp , [ rsp + hexvar ] mov dword ptr [ rip + hexvar ] , num call hexvar mov ecx , dword ptr [ rip + hexvar ] mov rdi , rbp xor eax , eax lea rdx , [ rip + hexvar ] lea rsi , [ rip + hexvar ] call hexvar mov eax , dword ptr [ rip + hexvar ] add dword ptr [ rip + hexvar ] , num test eax , eax jne hexvar mov edi , hexvar call hexvar mov ecx , dword ptr [ rsp + hexvar ] mov r8 , rbp mov edx , hexvar mov rbx , rax mov rdi , rax lea rsi , [ rip + hexvar ] xor eax , eax call hexvar mov rdi , rbx call hexvar lea rdx , [ rip + hexvar ] mov edi , hexvar lea rsi , [ rip + hexvar ] call hexvar call hexvar mov rdi , rbp call hexvar mov rdi , rbx mov dword ptr [ rip + hexvar ] , num add rsp , hexvar pop rbx pop rbp jmp hexvar nop dword ptr [ rax + rax ] mov rdi , qword ptr [ rip + hexvar ] call hexvar lea rdi , [ rax + hexvar ] call hexvar mov r9 , qword ptr [ rip + hexvar ] mov ecx , dword ptr [ rsp + hexvar ] mov r8 , rbp mov rbx , rax mov rdi , rax xor eax , eax mov edx , hexvar lea rsi , [ rip + hexvar ] call hexvar jmp hexvar nop dword ptr [ rax ] mov rdi , qword ptr [ rip + hexvar ] call hexvar mov rdi , rbx call hexvar mov qword ptr [ rip + hexvar ] , rax jmp hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov eax , dword ptr [ rsp + hexvar ] mov rsi , qword ptr [ rip + hexvar ] jmp hexvar nop dword ptr [ rax ] add rsp , hexvar pop rbx pop rbp ret nop word ptr [ rax + rax ] mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov eax , dword ptr [ rsp + hexvar ] mov dword ptr [ rip + hexvar ] , eax jmp hexvar
,
push rbp mov ebp , edi push rbx sub rsp , hexvar lea rdi , [ rsp + hexvar ] call hexvar test rax , rax je hexvar mov edx , num mov esi , hexvar mov rdi , rax mov rbx , rax call hexvar test eax , eax jne hexvar test ebp , ebp jne hexvar call hexvar mov rdi , rbx call hexvar mov esi , ebp mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp ret nop word ptr [ rax + rax ] call hexvar add rsp , hexvar pop rbx pop rbp ret
,
,
,
push r12 push rbp mov rbp , rdi push rbx sub rsp , hexvar call hexvar mov rbx , rsp mov r12 , rax mov rsi , rax mov rdi , rbx call hexvar mov rdx , r12 mov rsi , rbp mov rdi , rbx call hexvar mov rsi , qword ptr [ rip + hexvar ] xor edx , edx mov rdi , rbx call hexvar mov rdi , rbx call hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar pop rbx pop rbp pop r12 ret
,
,
,
,
,
push rbx mov rbx , rdi mov rdi , rsi call hexvar mov rdi , rbx pop rbx mov qword ptr [ rip + hexvar ] , rax jmp hexvar
push rbp mov rbp , rdi mov edi , hexvar push rbx sub rsp , num call hexvar movdqa xmm0 , xmmword ptr [ rip + hexvar ] mov rbx , rax mov qword ptr [ rax + hexvar ] , rbp mov rax , qword ptr [ rip + hexvar ] movups xmmword ptr [ rbx + hexvar ] , xmm0 mov qword ptr [ rbx ] , rax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + num ] , rax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + hexvar ] , rax mov eax , dword ptr [ rip + hexvar ] mov dword ptr [ rbx + hexvar ] , eax mov eax , dword ptr [ rip + hexvar ] mov dword ptr [ rbx + hexvar ] , eax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + hexvar ] , rax mov eax , dword ptr [ rip + hexvar ] mov dword ptr [ rbx + hexvar ] , eax movzx eax , byte ptr [ rip + hexvar ] mov byte ptr [ rbx + hexvar ] , al mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + hexvar ] , rax call hexvar mov qword ptr [ rip + hexvar ] , - num mov qword ptr [ rbx + hexvar ] , rax call hexvar add rsp , num mov rax , rbx pop rbx pop rbp ret
,
,
,
,
,
sub rsp , num mov rsi , qword ptr [ rip + hexvar ] test rsi , rsi je hexvar mov rax , qword ptr [ rsi + hexvar ] test byte ptr [ rip + hexvar ] , hexvar je hexvar mov ecx , dword ptr [ rsi + hexvar ] test ecx , ecx je hexvar test rax , rax je hexvar mov edx , dword ptr [ rax + hexvar ] test edx , edx jne hexvar mov edi , num call hexvar mov rsi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rsi + hexvar ] nop dword ptr [ rax ] cmp qword ptr [ rip + hexvar ] , rsi mov qword ptr [ rip + hexvar ] , rax jae hexvar cmp qword ptr [ rip + hexvar ] , rsi ja hexvar lea rdi , [ rip + hexvar ] call hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar mov rax , qword ptr [ rip + hexvar ] lea rcx , [ rip + hexvar ] movzx edx , byte ptr [ rax ] cmp byte ptr [ rcx + rdx ] , num jne hexvar add rax , num nop word ptr [ rax + rax ] mov rdx , rax mov qword ptr [ rip + hexvar ] , rax add rax , num movzx edx , byte ptr [ rdx ] cmp byte ptr [ rcx + rdx ] , num je hexvar add rsp , num jmp hexvar mov qword ptr [ rip + hexvar ] , rsi mov qword ptr [ rip + hexvar ] , rsi jmp hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax xor eax , eax call hexvar jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp push rbx sub rsp , num test byte ptr [ rdi ] , num je hexvar mov rsi , qword ptr [ rdi + num ] cmp rsi , qword ptr [ rip + hexvar ] mov rbx , rdi mov rbp , qword ptr [ rdi + hexvar ] je hexvar mov rdx , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rdi + hexvar ] mov rcx , rbp add qword ptr [ rip + hexvar ] , num call hexvar mov rbp , rax test byte ptr [ rbx ] , num jne hexvar or byte ptr [ rbp ] , hexvar mov rdi , rbp call hexvar mov qword ptr [ rbx + hexvar ] , rbp mov rsi , qword ptr [ rbx + hexvar ] xor edx , edx mov rax , qword ptr [ rip + hexvar ] mov rdi , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + num ] , rax call hexvar add rsp , num mov rax , rbp pop rbx pop rbp ret nop word ptr cs : [ rax + rax ] or byte ptr [ rax ] , num jmp hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar
sub rsp , num mov rdi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rdi + num ] call qword ptr [ rax + hexvar ] mov qword ptr [ rip + hexvar ] , rax test rax , rax je hexvar lea rdx , [ rip + hexvar ] or byte ptr [ rip + hexvar ] , hexvar mov qword ptr [ rax + num ] , rdx mov byte ptr [ rip + hexvar ] , num add rsp , num ret call hexvar mov edi , eax call hexvar lea rdi , [ rip + hexvar ] mov rsi , rax xor eax , eax call hexvar
push r14 mov r14 , rdi push r13 mov r13d , r8d push r12 mov r12 , rcx push rbp mov rbp , rdx push rbx mov rbx , rsi sub rsp , hexvar mov rax , qword ptr [ rsi ] test rax , rax je hexvar mov rax , qword ptr [ rax ] test rax , rax je hexvar mov edx , dword ptr [ rax + hexvar ] test dl , hexvar jne hexvar and dh , num je hexvar lea rdx , [ rip + hexvar ] cmp qword ptr [ rax + hexvar ] , rdx je hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov esi , r13d mov rdi , r12 mov rdx , rax xor eax , eax call hexvar nop dword ptr [ rax + rax ] mov rcx , qword ptr [ rbp ] mov rsi , rbx lea r9 , [ rsp + num ] mov r8 , r14 mov rdi , qword ptr [ rip + hexvar ] lea rdx , [ rbp + hexvar ] call hexvar mov ebx , eax cmp eax , num je hexvar cmp eax , num je hexvar cmp eax , num je hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov ecx , ebx mov edx , r13d mov rsi , r12 mov rdi , rax xor eax , eax call hexvar nop dword ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov esi , r13d mov rdi , r12 mov rdx , rax xor eax , eax call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret mov edx , num lea rsi , [ rip + hexvar ] jmp hexvar
push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov rbp , qword ptr [ rip + hexvar ] movsx esi , byte ptr [ rbp ] cmp sil , hexvar jne hexvar lea rax , [ rbp + num ] mov qword ptr [ rip + hexvar ] , rax movsx esi , byte ptr [ rbp + num ] mov rbp , rax mov r14 , rbp lea rbx , [ rip + hexvar ] cmp sil , hexvar jne hexvar jmp hexvar nop dword ptr [ rax ] add r14 , num movsx esi , byte ptr [ r14 ] mov rdi , rbx call hexvar test rax , rax je hexvar cmp r14 , rbp je hexvar mov rbx , r14 sub rbx , rbp lea rdi , [ rbx + num ] call hexvar mov rdx , rbx mov rsi , rbp mov byte ptr [ rax + rbx ] , num mov rdi , rax call hexvar mov edx , dword ptr [ rip + hexvar ] mov r12 , rax test edx , edx jne hexvar jmp hexvar nop dword ptr [ rax ] cmp byte ptr [ rax + num ] , hexvar jne hexvar mov rdi , r12 call hexvar mov rbp , rax mov rax , qword ptr [ rip + hexvar ] mov rdi , qword ptr [ rax ] call hexvar lea edi , [ rbp + rax - num ] mov rbp , rbx movsxd rdi , edi sub rbp , r12 call hexvar movsxd rbp , ebp mov rsi , r12 mov rdx , rbp mov rdi , rax mov r13 , rax call hexvar mov rax , qword ptr [ rip + hexvar ] lea rdi , [ r13 + rbp ] mov rsi , qword ptr [ rax ] call hexvar lea rsi , [ rbx + num ] mov rdi , rax call hexvar mov rdi , r12 mov r12 , r13 call hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar mov esi , hexvar mov rdi , r12 call hexvar mov rbx , rax test rax , rax jne hexvar mov qword ptr [ rip + hexvar ] , r14 cmp byte ptr [ r14 ] , hexvar jne hexvar add r14 , num mov qword ptr [ rip + hexvar ] , r14 add rsp , hexvar mov rax , r12 pop rbx pop rbp pop r12 pop r13 pop r14 ret lea rdi , [ rsp + hexvar ] call hexvar mov r14 , qword ptr [ rip + hexvar ] mov r12 , rax test rax , rax jne hexvar call hexvar jmp hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi xor r12d , r12d call hexvar mov rdi , rax xor eax , eax call hexvar call hexvar jmp hexvar
push rbx sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 test al , al je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 lea rbx , [ rsp + hexvar ] lea rcx , [ rsp + num ] mov rdx , rdi mov esi , hexvar lea rax , [ rsp + hexvar ] mov rdi , rbx mov dword ptr [ rsp + num ] , num mov qword ptr [ rsp + hexvar ] , rax lea rax , [ rsp + hexvar ] mov dword ptr [ rsp + hexvar ] , hexvar mov qword ptr [ rsp + hexvar ] , rax call hexvar mov rdx , rbx xor esi , esi xor edi , edi call hexvar add rsp , hexvar pop rbx ret
,
push r12 mov r12 , rdi push rbp push rbx call hexvar lea rdi , [ rax + num ] mov rbx , rax call hexvar mov rbp , rax test rbx , rbx je hexvar xor eax , eax lea rcx , [ rip + hexvar ] nop dword ptr [ rax ] movzx edx , byte ptr [ r12 + rax ] movzx edx , byte ptr [ rcx + rdx ] mov byte ptr [ rbp + rax ] , dl add rax , num cmp rbx , rax jne hexvar add rbx , rbp mov byte ptr [ rbx ] , num mov rdi , qword ptr [ rip + hexvar ] mov rsi , rbp call hexvar mov rbx , rax test rax , rax je hexvar mov rdi , qword ptr [ rip + hexvar ] mov rsi , rbp xor edx , edx call hexvar mov rdi , rbx call hexvar pop rbx mov rdi , rbp pop rbp pop r12 jmp hexvar nop dword ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rsi , rbp mov rdi , rax xor eax , eax call hexvar pop rbx mov rdi , rbp pop rbp pop r12 jmp hexvar nop dword ptr [ rax ] mov rbx , rax jmp hexvar
push r12 push rbp push rbx sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 test al , al je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret nop dword ptr [ rax ] lea r12 , [ rsp + hexvar ] mov ebp , esi mov rbx , rdi mov esi , hexvar lea rax , [ rsp + hexvar ] lea rcx , [ rsp + num ] mov rdi , r12 mov dword ptr [ rsp + num ] , hexvar mov qword ptr [ rsp + hexvar ] , rax lea rax , [ rsp + hexvar ] mov dword ptr [ rsp + hexvar ] , hexvar mov qword ptr [ rsp + hexvar ] , rax call hexvar mov rdx , r12 mov esi , ebp mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret
,
push rbx mov rbx , rdi sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 test al , al je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 call hexvar lea rax , [ rsp + hexvar ] mov edx , num xor edi , edi mov qword ptr [ rsp + hexvar ] , rax lea rsi , [ rip + hexvar ] lea rax , [ rsp + hexvar ] mov dword ptr [ rsp + num ] , num mov dword ptr [ rsp + hexvar ] , hexvar mov qword ptr [ rsp + hexvar ] , rax call hexvar mov rdi , qword ptr [ rip + hexvar ] mov rsi , rax xor eax , eax call hexvar mov rdi , qword ptr [ rip + hexvar ] lea rdx , [ rsp + num ] mov rsi , rbx call hexvar mov rsi , qword ptr [ rip + hexvar ] mov edi , hexvar call hexvar mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar call hexvar mov edi , num call hexvar
mov rax , qword ptr [ rdi + hexvar ] test rax , rax je hexvar push r12 mov r12 , rdi push rbp push rbx mov rbp , qword ptr [ rax ] test rbp , rbp jne hexvar jmp hexvar nop dword ptr [ rax ] xor esi , esi mov edi , ebx call hexvar mov rdi , qword ptr [ rip + hexvar ] call hexvar mov rax , qword ptr [ rip + hexvar ] cmp qword ptr [ rax + hexvar ] , num mov qword ptr [ rax + hexvar ] , num jne hexvar mov rbp , qword ptr [ rbp + hexvar ] test rbp , rbp je hexvar mov esi , dword ptr [ rbp + hexvar ] mov rdi , r12 call hexvar call hexvar test eax , eax je hexvar mov dword ptr [ rip + hexvar ] , num mov rdi , qword ptr [ rip + hexvar ] xor ebx , ebx test byte ptr [ rdi + hexvar ] , hexvar je hexvar mov eax , dword ptr [ rdi + hexvar ] test eax , eax jne hexvar call hexvar test eax , eax jne hexvar xor edx , edx xor esi , esi mov edi , ebx call hexvar jmp hexvar nop dword ptr [ rax ] add ebx , num shr eax , num test al , num je hexvar jmp hexvar nop dword ptr [ rax + rax ] pop rbx pop rbp pop r12 ret nop dword ptr [ rax ] ret lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar
,
,
,
push rbp mov rbp , rdi push rbx mov rbx , rsi sub rsp , hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar lea rdi , [ rsp + num ] call hexvar mov eax , dword ptr [ rsp + num ] mov r9 , rbx mov rdx , rbp lea rdi , [ rsp + num ] mov ecx , hexvar lea rsi , [ rip + hexvar ] lea r8d , [ rax + num ] xor eax , eax call hexvar cmp eax , - num je hexvar mov rdi , qword ptr [ rsp + num ] call hexvar lea rdx , [ rip + hexvar ] mov edi , hexvar lea rsi , [ rip + hexvar ] call hexvar call hexvar mov rdi , qword ptr [ rsp + num ] call hexvar mov rdi , rbx call hexvar mov dword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar pop rbx pop rbp ret nop dword ptr [ rax ] lea rdi , [ rip + hexvar ] call hexvar lea rdx , [ rip + hexvar ] mov edi , hexvar lea rsi , [ rip + hexvar ] call hexvar call hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar call hexvar mov edi , dword ptr [ rax ] call hexvar lea rdi , [ rip + hexvar ] mov rsi , rax xor eax , eax call hexvar
push rbp mov rbp , rdi push rbx mov rbx , rsi sub rsp , hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar lea rdi , [ rsp + num ] call hexvar mov eax , dword ptr [ rsp + num ] mov r9 , rbx mov rdx , rbp lea rdi , [ rsp + num ] mov ecx , hexvar lea rsi , [ rip + hexvar ] lea r8d , [ rax + num ] xor eax , eax call hexvar cmp eax , - num je hexvar mov rdi , qword ptr [ rsp + num ] call hexvar lea rdx , [ rip + hexvar ] mov edi , hexvar lea rsi , [ rip + hexvar ] call hexvar call hexvar mov rdi , qword ptr [ rsp + num ] call hexvar mov rdi , rbx call hexvar mov dword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar pop rbx pop rbp ret nop dword ptr [ rax ] lea rdi , [ rip + hexvar ] call hexvar lea rdx , [ rip + hexvar ] mov edi , hexvar lea rsi , [ rip + hexvar ] call hexvar call hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar call hexvar mov edi , dword ptr [ rax ] call hexvar lea rdi , [ rip + hexvar ] mov rsi , rax xor eax , eax call hexvar
,
,
,
,
,
,
,
,
push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov rbp , qword ptr [ rip + hexvar ] movsx esi , byte ptr [ rbp ] cmp sil , hexvar jne hexvar lea rax , [ rbp + num ] mov qword ptr [ rip + hexvar ] , rax movsx esi , byte ptr [ rbp + num ] mov rbp , rax mov r14 , rbp lea rbx , [ rip + hexvar ] cmp sil , hexvar jne hexvar jmp hexvar nop dword ptr [ rax ] add r14 , num movsx esi , byte ptr [ r14 ] mov rdi , rbx call hexvar test rax , rax je hexvar cmp r14 , rbp je hexvar mov rbx , r14 sub rbx , rbp lea rdi , [ rbx + num ] call hexvar mov rdx , rbx mov rsi , rbp mov byte ptr [ rax + rbx ] , num mov rdi , rax call hexvar mov edx , dword ptr [ rip + hexvar ] mov r12 , rax test edx , edx jne hexvar jmp hexvar nop dword ptr [ rax ] cmp byte ptr [ rax + num ] , hexvar jne hexvar mov rdi , r12 call hexvar mov rbp , rax mov rax , qword ptr [ rip + hexvar ] mov rdi , qword ptr [ rax ] call hexvar lea edi , [ rbp + rax - num ] mov rbp , rbx movsxd rdi , edi sub rbp , r12 call hexvar movsxd rbp , ebp mov rsi , r12 mov rdx , rbp mov rdi , rax mov r13 , rax call hexvar mov rax , qword ptr [ rip + hexvar ] lea rdi , [ r13 + rbp ] mov rsi , qword ptr [ rax ] call hexvar lea rsi , [ rbx + num ] mov rdi , rax call hexvar mov rdi , r12 mov r12 , r13 call hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar mov esi , hexvar mov rdi , r12 call hexvar mov rbx , rax test rax , rax jne hexvar mov qword ptr [ rip + hexvar ] , r14 cmp byte ptr [ r14 ] , hexvar jne hexvar add r14 , num mov qword ptr [ rip + hexvar ] , r14 add rsp , hexvar mov rax , r12 pop rbx pop rbp pop r12 pop r13 pop r14 ret lea rdi , [ rsp + hexvar ] call hexvar mov r14 , qword ptr [ rip + hexvar ] mov r12 , rax test rax , rax jne hexvar call hexvar jmp hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi xor r12d , r12d call hexvar mov rdi , rax xor eax , eax call hexvar call hexvar jmp hexvar
,
push r12 mov r12d , esi push rbp mov rbp , rdi push rbx sub rsp , hexvar cmp byte ptr [ rdi ] , hexvar jne hexvar cmp byte ptr [ rdi + num ] , num je hexvar mov rdi , rbp call hexvar mov rbx , rax test rax , rax je hexvar mov rdi , rbx call hexvar test eax , eax je hexvar test r12d , r12d je hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar test r12d , r12d je hexvar js hexvar mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar mov rdi , rbx call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test eax , eax jne hexvar jmp hexvar nop word ptr cs : [ rax + rax ] mov rdi , rbx mov esi , num call hexvar mov rbx , rax jmp hexvar nop word ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rsi , rbp mov rdi , rax xor eax , eax call hexvar call hexvar sub qword ptr [ rip + hexvar ] , num add rsp , hexvar pop rbx pop rbp pop r12 ret nop mov rbx , rsp mov rdi , rbx call hexvar lea rdx , [ rip + hexvar ] cmp rax , rdx je hexvar mov edx , dword ptr [ rip + hexvar ] test edx , edx jne hexvar xor edx , edx mov rsi , rbx mov rdi , rax call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov rdi , rbp call hexvar mov rbx , rax test rax , rax jne hexvar mov rdi , rbp call hexvar mov rbx , rax test byte ptr [ rip + hexvar ] , num je hexvar mov esi , hexvar mov edi , num call hexvar mov rdx , qword ptr [ rip + hexvar ] mov rdi , rbx mov qword ptr [ rax + hexvar ] , rbx mov rsi , rax mov qword ptr [ rax + hexvar ] , rdx call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rdi , rbx call hexvar jmp hexvar nop dword ptr [ rax ] mov rdi , rbx call hexvar jmp hexvar
,
,
,
,
xor esi , esi jmp hexvar
,
push rbp mov ebp , edi push rbx sub rsp , num call hexvar test rax , rax je hexvar mov rbx , rax mov rax , qword ptr [ rip + hexvar ] cmp byte ptr [ rax ] , hexvar jne hexvar mov rdi , rbx add rax , num mov esi , ebp mov qword ptr [ rip + hexvar ] , rax call hexvar call hexvar add rsp , num mov rdi , rbx pop rbx pop rbp jmp hexvar nop dword ptr [ rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar call hexvar add rsp , num mov rdi , rbx pop rbx pop rbp jmp hexvar nop dword ptr [ rax + rax ] add rsp , num pop rbx pop rbp ret
,
,
,
,
push rbp push rbx sub rsp , num mov rdx , qword ptr [ rip + hexvar ] lea rbx , [ rdx + num ] mov qword ptr [ rip + hexvar ] , rbx movzx eax , byte ptr [ rdx + num ] cmp al , hexvar je hexvar cmp al , hexvar je hexvar cmp al , num jne hexvar lea rax , [ rbx + num ] mov qword ptr [ rip + hexvar ] , rax movzx edx , byte ptr [ rax ] mov rbx , rax add rax , num cmp dl , hexvar je hexvar cmp dl , num je hexvar mov edx , dword ptr [ rip + hexvar ] test edx , edx je hexvar movzx eax , byte ptr [ rbx ] lea rdx , [ rip + hexvar ] cmp byte ptr [ rdx + rax ] , num mov rbp , rax jne hexvar nop dword ptr [ rax + rax ] add rbx , num movzx eax , byte ptr [ rbx ] cmp byte ptr [ rdx + rax ] , num mov rbp , rax je hexvar mov byte ptr [ rbx ] , num jmp hexvar nop dword ptr [ rax ] xor ebp , ebp xor ebx , ebx test esi , esi mov eax , esi sete dl movzx edx , dl cmovns eax , edx mov esi , eax call hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar add rsp , num pop rbx pop rbp ret nop dword ptr [ rax ] lea rbx , [ rdx + num ] mov qword ptr [ rip + hexvar ] , rbx movzx eax , byte ptr [ rdx + num ] test esi , esi jns hexvar cmp al , hexvar jne hexvar lea rbx , [ rdx + num ] mov qword ptr [ rip + hexvar ] , rbx movzx eax , byte ptr [ rdx + num ] jmp hexvar nop dword ptr [ rax + rax ] call hexvar add rsp , num movsx esi , bpl mov rdi , rbx pop rbx pop rbp jmp hexvar
,
,
,
,
,
,
,
push r12 mov r12d , esi push rbp mov rbp , rdi push rbx sub rsp , hexvar cmp byte ptr [ rdi ] , hexvar jne hexvar cmp byte ptr [ rdi + num ] , num je hexvar mov rdi , rbp call hexvar mov rbx , rax test rax , rax je hexvar mov rdi , rbx call hexvar test eax , eax je hexvar test r12d , r12d je hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar test r12d , r12d je hexvar js hexvar mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar mov rdi , rbx call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test eax , eax jne hexvar jmp hexvar nop word ptr cs : [ rax + rax ] mov rdi , rbx mov esi , num call hexvar mov rbx , rax jmp hexvar nop word ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rsi , rbp mov rdi , rax xor eax , eax call hexvar call hexvar sub qword ptr [ rip + hexvar ] , num add rsp , hexvar pop rbx pop rbp pop r12 ret nop mov rbx , rsp mov rdi , rbx call hexvar lea rdx , [ rip + hexvar ] cmp rax , rdx je hexvar mov edx , dword ptr [ rip + hexvar ] test edx , edx jne hexvar xor edx , edx mov rsi , rbx mov rdi , rax call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov rdi , rbp call hexvar mov rbx , rax test rax , rax jne hexvar mov rdi , rbp call hexvar mov rbx , rax test byte ptr [ rip + hexvar ] , num je hexvar mov esi , hexvar mov edi , num call hexvar mov rdx , qword ptr [ rip + hexvar ] mov rdi , rbx mov qword ptr [ rax + hexvar ] , rbx mov rsi , rax mov qword ptr [ rax + hexvar ] , rdx call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rdi , rbx call hexvar jmp hexvar nop dword ptr [ rax ] mov rdi , rbx call hexvar jmp hexvar
,
,
push r13 push r12 mov r12 , rdx push rbp push rbx mov rbx , rsi sub rsp , hexvar test rdi , rdi js hexvar mov rbp , rsp mov r13 , rdi mov rdi , rbp call hexvar mov rdx , rbp mov rsi , r12 mov rdi , rbx lea rcx , [ rip - hexvar ] call hexvar test eax , eax je hexvar mov rsi , qword ptr [ rsp + num ] lea r12 , [ rsp + hexvar ] lea rbx , [ r13 - num ] mov rdi , r12 imul rsi , r13 call hexvar test r13 , r13 je hexvar nop dword ptr [ rax + rax ] mov rsi , rbp mov rdi , r12 sub rbx , num call hexvar cmp rbx , - num jne hexvar mov rdi , rbp call hexvar mov rsi , qword ptr [ rip + hexvar ] mov edx , num mov rdi , r12 call hexvar mov rdi , r12 call hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret nop mov edx , num xor edi , edi lea rsi , [ rip + hexvar ] mov rbp , rsp call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar mov rdi , rbp call hexvar mov rdx , rbp mov rsi , r12 mov rdi , rbx lea rcx , [ rip - hexvar ] call hexvar test eax , eax jne hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdx , r12 mov rsi , rbx mov rdi , rax xor eax , eax call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret nop word ptr [ rax + rax ] lea r12 , [ rsp + hexvar ] xor esi , esi mov rdi , r12 call hexvar jmp hexvar
sub rsp , num xor esi , esi call hexvar add rsp , num cdqe ret
,
,
,
add edi , edi lea rsi , [ rip - hexvar ] jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
lea rdi , [ rip + hexvar ] jmp hexvar
push rbx mov ebx , edi sub rsp , hexvar mov rax , qword ptr [ rip + hexvar ] movzx edx , byte ptr [ rax ] cmp dl , hexvar jne hexvar lea rcx , [ rax + num ] mov qword ptr [ rip + hexvar ] , rcx movzx edx , byte ptr [ rax + num ] mov rax , rcx cmp dl , hexvar jne hexvar lea rdx , [ rax + num ] mov qword ptr [ rip + hexvar ] , rdx cmp byte ptr [ rax + num ] , hexvar jne hexvar add rax , num mov qword ptr [ rip + hexvar ] , rax mov rdi , rsp call hexvar cmp byte ptr [ rsp + hexvar ] , num je hexvar test byte ptr [ rsp + hexvar ] , num je hexvar mov rdx , rax test ebx , ebx je hexvar test rax , rax je hexvar test al , num jne hexvar xor eax , eax nop dword ptr [ rax ] shr rdx , num add eax , num test dl , num je hexvar cmp rdx , num jne hexvar add rsp , hexvar pop rbx ret nop word ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar add rsp , hexvar xor eax , eax pop rbx ret nop dword ptr [ rax ] xor eax , eax jmp hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar call hexvar mov rax , - num jmp hexvar mov edx , num lea rsi , [ rip + hexvar ] jmp hexvar
,
,
,
,
,
push rbp push rbx sub rsp , num mov eax , dword ptr [ rip + hexvar ] cmp eax , dword ptr [ rip + hexvar ] jg hexvar mov rbx , rdi add eax , num mov rdi , rsi mov ebp , edx mov dword ptr [ rip + hexvar ] , eax call hexvar mov rsi , qword ptr [ rbx + num ] mov qword ptr [ rip + hexvar ] , rax test rsi , rsi je hexvar mov rax , qword ptr [ rbx ] cmp byte ptr [ rax ] , hexvar je hexvar add rsi , num lea rdi , [ rip + hexvar ] call hexvar mov esi , hexvar lea rdi , [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , ebp call hexvar jmp hexvar nop lea rdi , [ rip + hexvar ] call hexvar mov dword ptr [ rip + hexvar ] , ebp mov rsi , rbx lea rdi , [ rip + hexvar ] call hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rip + hexvar ] , num mov edx , dword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov dword ptr [ rip + hexvar ] , edx mov qword ptr [ rip + hexvar ] , rax add rsp , num pop rbx pop rbp ret xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax xor eax , eax call hexvar
push r13 mov r13d , edi push r12 push rbp push rbx sub rsp , hexvar lea rdi , [ rsp + hexvar ] lea rbp , [ rsp + hexvar ] call hexvar mov rdi , qword ptr [ rip + hexvar ] xor edx , edx xor esi , esi mov r12 , rax call hexvar mov rdi , rbp mov rsi , rax sub rsi , qword ptr [ rip + hexvar ] mov rbx , rax call hexvar mov rsi , qword ptr [ rip + hexvar ] mov rdx , rbx mov rdi , rbp sub rdx , rsi call hexvar mov qword ptr [ rip + hexvar ] , rbx lea rbx , [ rsp + hexvar ] mov rdi , rbx call hexvar xor esi , esi mov rcx , rbx mov rdx , rbp lea r8 , [ rip - hexvar ] mov edi , r13d call hexvar test rax , rax je hexvar mov esi , dword ptr [ rsp + hexvar ] mov rcx , rax lea rdx , [ rip + hexvar ] mov rdi , r12 xor eax , eax call hexvar mov rdi , rbp call hexvar mov rsi , qword ptr [ rip + hexvar ] mov edx , num mov rdi , rbx call hexvar mov rdi , rbx call hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
,
push rbp push rbx sub rsp , num mov eax , dword ptr [ rip + hexvar ] cmp eax , dword ptr [ rip + hexvar ] jg hexvar mov rbx , rdi add eax , num mov rdi , rsi mov ebp , edx mov dword ptr [ rip + hexvar ] , eax call hexvar mov rsi , qword ptr [ rbx + num ] mov qword ptr [ rip + hexvar ] , rax test rsi , rsi je hexvar mov rax , qword ptr [ rbx ] cmp byte ptr [ rax ] , hexvar je hexvar add rsi , num lea rdi , [ rip + hexvar ] call hexvar mov esi , hexvar lea rdi , [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , ebp call hexvar jmp hexvar nop lea rdi , [ rip + hexvar ] call hexvar mov dword ptr [ rip + hexvar ] , ebp mov rsi , rbx lea rdi , [ rip + hexvar ] call hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rip + hexvar ] , num mov edx , dword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov dword ptr [ rip + hexvar ] , edx mov qword ptr [ rip + hexvar ] , rax add rsp , num pop rbx pop rbp ret xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax xor eax , eax call hexvar
,
push r12 mov r12 , rsi push rbp push rbx mov rbx , rdi mov rdi , rsi call hexvar mov rdi , rbx mov rbp , rax mov rsi , rax call hexvar mov rdi , qword ptr [ rbx + num ] mov rdx , rbp add rdi , qword ptr [ rbx ] mov rsi , r12 call hexvar add qword ptr [ rbx + num ] , rbp pop rbx pop rbp pop r12 ret
,
,
push r13 push r12 mov r12 , rdx push rbp push rbx mov rbx , rsi sub rsp , hexvar test rdi , rdi js hexvar mov rbp , rsp mov r13 , rdi mov rdi , rbp call hexvar mov rdx , rbp mov rsi , r12 mov rdi , rbx lea rcx , [ rip - hexvar ] call hexvar test eax , eax je hexvar mov rsi , qword ptr [ rsp + num ] lea r12 , [ rsp + hexvar ] lea rbx , [ r13 - num ] mov rdi , r12 imul rsi , r13 call hexvar test r13 , r13 je hexvar nop dword ptr [ rax + rax ] mov rsi , rbp mov rdi , r12 sub rbx , num call hexvar cmp rbx , - num jne hexvar mov rdi , rbp call hexvar mov rsi , qword ptr [ rip + hexvar ] mov edx , num mov rdi , r12 call hexvar mov rdi , r12 call hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret nop mov edx , num xor edi , edi lea rsi , [ rip + hexvar ] mov rbp , rsp call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar mov rdi , rbp call hexvar mov rdx , rbp mov rsi , r12 mov rdi , rbx lea rcx , [ rip - hexvar ] call hexvar test eax , eax jne hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdx , r12 mov rsi , rbx mov rdi , rax xor eax , eax call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret nop word ptr [ rax + rax ] lea r12 , [ rsp + hexvar ] xor esi , esi mov rdi , r12 call hexvar jmp hexvar
push r12 push rbp mov rbp , rdi push rbx sub rsp , hexvar call hexvar mov rbx , rsp mov r12 , rax mov rsi , rax mov rdi , rbx call hexvar mov rdx , r12 mov rsi , rbp mov rdi , rbx call hexvar mov rsi , qword ptr [ rip + hexvar ] xor edx , edx mov rdi , rbx call hexvar mov rdi , rbx call hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar pop rbx pop rbp pop r12 ret
push rbx mov edi , hexvar call hexvar mov rbx , rax lea rdi , [ rax + num ] call hexvar lea rdi , [ rbx + hexvar ] call hexvar lea rdi , [ rbx + hexvar ] call hexvar mov rax , rbx mov qword ptr [ rbx ] , num mov dword ptr [ rbx + hexvar ] , num pop rbx ret
,
,
,
,
,
,
,
,
,
,
push rbp xor esi , esi push rbx sub rsp , num mov rdi , qword ptr [ rip + hexvar ] mov ebp , dword ptr [ rip + hexvar ] mov rbx , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar call hexvar mov edi , num call hexvar add rsp , num mov esi , ebp mov rdi , rbx pop rbx pop rbp jmp hexvar lea rdi , [ rip + hexvar ] call hexvar mov rdi , qword ptr [ rip + hexvar ] mov edx , hexvar mov rsi , rax mov qword ptr [ rip + hexvar ] , rax call hexvar mov rax , qword ptr [ rip + hexvar ] mov edi , num mov dword ptr [ rax + hexvar ] , num call hexvar mov byte ptr [ rax ] , num jmp hexvar
,
push rbp xor esi , esi push rbx sub rsp , num mov rdi , qword ptr [ rip + hexvar ] mov ebp , dword ptr [ rip + hexvar ] mov rbx , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar call hexvar mov edi , num call hexvar add rsp , num mov esi , ebp mov rdi , rbx pop rbx pop rbp jmp hexvar lea rdi , [ rip + hexvar ] call hexvar mov rdi , qword ptr [ rip + hexvar ] mov edx , hexvar mov rsi , rax mov qword ptr [ rip + hexvar ] , rax call hexvar mov rax , qword ptr [ rip + hexvar ] mov edi , num mov dword ptr [ rax + hexvar ] , num call hexvar mov byte ptr [ rax ] , num jmp hexvar
push rbp mov ebp , esi xor esi , esi push rbx sub rsp , num call hexvar mov esi , ebp mov rdi , rax mov rbx , rax call hexvar add rsp , num mov rax , rbx pop rbx pop rbp ret
,
,
,
,
,
,
,
push r13 push r12 push rbp push rbx sub rsp , num mov rbx , qword ptr [ rip + hexvar ] test rbx , rbx je hexvar lea r12 , [ rip + hexvar ] jmp hexvar nop dword ptr [ rax + rax ] mov rdi , rbx call hexvar mov rbx , rax test rax , rax je hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar mov rdi , rbx call hexvar mov rdi , rbx cmp qword ptr [ rax + hexvar ] , num je hexvar call hexvar mov esi , hexvar mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rbp , rax test rax , rax je hexvar cmp byte ptr [ rax + num ] , hexvar je hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar mov rdi , rbx mov rdx , r12 lea rsi , [ rip + hexvar ] call hexvar mov rdi , rbx call hexvar mov rbx , rax test rax , rax jne hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax ] call hexvar test eax , eax je hexvar jmp hexvar nop cmp byte ptr [ rax + num ] , hexvar jne hexvar lea r13 , [ rax + num ] mov rdi , r13 call hexvar lea rdi , [ rbp + num ] mov rsi , r13 lea rdx , [ rax + num ] call hexvar jmp hexvar
,
sub rsp , num call hexvar mov rax , qword ptr [ rax + hexvar ] add rsp , num ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push r15 push r14 push r13 mov r13d , edx push r12 mov r12 , rsi mov esi , num push rbp push rbx mov rbx , rdi sub rsp , num mov rbp , qword ptr [ rip + hexvar ] mov r14 , qword ptr [ rip + hexvar ] mov r15d , dword ptr [ rip + hexvar ] mov rdi , rbp call hexvar test r13d , r13d jne hexvar mov rdi , rbx call hexvar cmp rax , rbp je hexvar mov rsi , qword ptr [ rip + hexvar ] mov rdi , rbx call hexvar sub rsp , num mov r9 , r12 mov r8 , rbx push num xor ecx , ecx mov edx , num mov esi , num mov edi , num call hexvar mov rdi , rbx mov byte ptr [ rax ] , num call hexvar mov rsi , rbp mov rdi , rbx mov qword ptr [ rax + hexvar ] , r12 call hexvar add rsp , hexvar mov esi , r15d mov rdi , r14 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp hexvar nop dword ptr [ rax + rax ] mov esi , r13d mov rdi , rbp call hexvar xor edx , edx xor esi , esi mov edi , r13d call hexvar mov rdi , rbx call hexvar cmp rax , rbp jne hexvar mov rdi , rbx call hexvar mov qword ptr [ rax + hexvar ] , num jmp hexvar
push r15 push r14 push r13 mov r13d , edx push r12 mov r12 , rsi mov esi , num push rbp push rbx mov rbx , rdi sub rsp , num mov rbp , qword ptr [ rip + hexvar ] mov r14 , qword ptr [ rip + hexvar ] mov r15d , dword ptr [ rip + hexvar ] mov rdi , rbp call hexvar test r13d , r13d jne hexvar mov rdi , rbx call hexvar cmp rax , rbp je hexvar mov rsi , qword ptr [ rip + hexvar ] mov rdi , rbx call hexvar sub rsp , num mov r9 , r12 mov r8 , rbx push num xor ecx , ecx mov edx , num mov esi , num mov edi , num call hexvar mov rdi , rbx mov byte ptr [ rax ] , num call hexvar mov rsi , rbp mov rdi , rbx mov qword ptr [ rax + hexvar ] , r12 call hexvar add rsp , hexvar mov esi , r15d mov rdi , r14 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp hexvar nop dword ptr [ rax + rax ] mov esi , r13d mov rdi , rbp call hexvar xor edx , edx xor esi , esi mov edi , r13d call hexvar mov rdi , rbx call hexvar cmp rax , rbp jne hexvar mov rdi , rbx call hexvar mov qword ptr [ rax + hexvar ] , num jmp hexvar
,
,
,
,
push r13 mov rax , rdi push r12 push rbp push rbx mov rbx , rsi sub rsp , hexvar mov qword ptr [ rsp + num ] , rdi cmp byte ptr [ rdi ] , hexvar je hexvar mov edx , dword ptr [ rip + hexvar ] test edx , edx je hexvar mov rsi , rbx mov rdi , rax call hexvar test rax , rax je hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret nop mov rax , qword ptr [ rsp + num ] lea rdi , [ rsp + num ] mov r12 , qword ptr [ rip + hexvar ] mov qword ptr [ rip + hexvar ] , rax call hexvar mov rdi , qword ptr [ rsp + num ] mov r13d , eax call hexvar mov rbp , rax test rax , rax je hexvar mov rdi , rax call hexvar cmp rax , qword ptr [ rip + hexvar ] je hexvar xor eax , eax mov rdx , qword ptr [ rip + hexvar ] mov byte ptr [ rdx ] , r13b mov qword ptr [ rip + hexvar ] , r12 add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax ] mov rdi , rbp call hexvar cmp byte ptr [ rax + hexvar ] , num jne hexvar mov rax , qword ptr [ rax + hexvar ] test rax , rax js hexvar mov edx , dword ptr [ rip + hexvar ] cmp rax , rdx jae hexvar lea rdx , [ rax + rax * num ] lea rax , [ rip + hexvar ] lea rax , [ rax + rdx * num ] test byte ptr [ rax + hexvar ] , num je hexvar mov dword ptr [ rip + hexvar ] , num mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbx ] , rdx jmp hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar
,
,
,
,
,
,
,
test byte ptr [ rdi ] , num jne hexvar or byte ptr [ rdi + num ] , num jmp hexvar nop mov rax , qword ptr [ rip + hexvar ] cmp qword ptr [ rdi + num ] , rax je hexvar sub rsp , num call hexvar or byte ptr [ rax + num ] , num mov rdi , rax add rsp , num jmp hexvar nop word ptr cs : [ rax + rax ] mov rdi , qword ptr [ rdi + hexvar ] or byte ptr [ rdi + num ] , num jmp hexvar
push r12 push rbp push rbx mov r12 , qword ptr [ rdi + hexvar ] test r12 , r12 je hexvar mov rbx , qword ptr [ r12 + hexvar ] test rbx , rbx je hexvar mov rax , rbx pop rbx pop rbp pop r12 ret nop word ptr cs : [ rax + rax ] mov rax , qword ptr [ rdi + hexvar ] mov rbp , rdi mov rdi , qword ptr [ rax + num ] mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar lea rcx , [ rip + hexvar ] xor edx , edx mov rsi , rbp call hexvar mov rbx , rax mov rdi , rbx call hexvar cmp qword ptr [ rbp + hexvar ] , num je hexvar mov rsi , qword ptr [ rbp + hexvar ] mov rdi , rbx call hexvar mov qword ptr [ r12 + hexvar ] , rbx mov rax , rbx pop rbx pop rbp pop r12 ret nop word ptr [ rax + rax ] call hexvar mov rbx , rax test rax , rax je hexvar mov rdi , rax call hexvar lea rdx , [ rip + hexvar ] cmp rbp , rax je hexvar cmp rax , rdx je hexvar mov rax , qword ptr [ rbp + hexvar ] lea rcx , [ rip + hexvar ] xor edx , edx mov rsi , rbp mov rdi , qword ptr [ rax + num ] call hexvar mov rbx , rax jmp hexvar nop word ptr [ rax + rax ] mov rdi , rbx call hexvar or dword ptr [ rax + hexvar ] , hexvar jmp hexvar nop dword ptr [ rax ] cmp rax , rdx jne hexvar mov rsi , rbp mov rdi , rbx call hexvar lea rsi , [ rip + hexvar ] mov rdi , rbx call hexvar jmp hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar
,
,
,
,
,
,
,
,
,
push rbp push rbx sub rsp , hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov rax , qword ptr [ rip + hexvar ] cmp byte ptr [ rax ] , hexvar je hexvar lea rsi , [ rip + hexvar ] xor edi , edi mov edx , num call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar call hexvar mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp ret nop dword ptr [ rax + rax ] add rax , num mov rsi , rsp xor edx , edx xor edi , edi mov qword ptr [ rip + hexvar ] , rax call hexvar movzx eax , byte ptr [ rsp + hexvar ] cmp al , num je hexvar cmp al , num je hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax xor eax , eax call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov rdi , rbx call hexvar mov rdi , rax mov rbp , rax call hexvar lea rdx , [ rip + hexvar ] cmp rax , rdx je hexvar lea rsi , [ rip + hexvar ] xor edi , edi mov edx , num call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar call hexvar mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp ret nop dword ptr [ rax + rax ] cmp byte ptr [ rsp + hexvar ] , num lea rsi , [ rdx + hexvar ] je hexvar mov rsi , qword ptr [ rip + hexvar ] mov rdi , rbp call hexvar mov rsi , qword ptr [ rsp + hexvar ] mov rdi , rbp call hexvar jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
push rbp push rbx sub rsp , num call hexvar test rax , rax je hexvar mov rbx , rax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rax + num ] call hexvar cmp rax , qword ptr [ rip + hexvar ] je hexvar call hexvar mov rbp , rax call hexvar mov rdx , qword ptr [ rip + hexvar ] mov dword ptr [ rax + num ] , hexvar mov rdx , qword ptr [ rdx + hexvar ] mov rcx , qword ptr [ rdx + num ] mov qword ptr [ rax + hexvar ] , rbp mov qword ptr [ rax + hexvar ] , rcx mov qword ptr [ rdx + num ] , rbp mov rdi , rbx call hexvar mov rdi , rbx call hexvar add rsp , num pop rbx pop rbp jmp hexvar nop dword ptr [ rax ] mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rax + num ] call hexvar mov rbp , rax call hexvar cmp rbp , rax jne hexvar jmp hexvar nop add rsp , num pop rbx pop rbp ret
push r12 mov r12d , esi push rbp mov rbp , rdi push rbx sub rsp , hexvar cmp byte ptr [ rdi ] , hexvar jne hexvar cmp byte ptr [ rdi + num ] , num je hexvar mov rdi , rbp call hexvar mov rbx , rax test rax , rax je hexvar mov rdi , rbx call hexvar test eax , eax je hexvar test r12d , r12d je hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar test r12d , r12d je hexvar js hexvar mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar mov rdi , rbx call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test eax , eax jne hexvar jmp hexvar nop word ptr cs : [ rax + rax ] mov rdi , rbx mov esi , num call hexvar mov rbx , rax jmp hexvar nop word ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rsi , rbp mov rdi , rax xor eax , eax call hexvar call hexvar sub qword ptr [ rip + hexvar ] , num add rsp , hexvar pop rbx pop rbp pop r12 ret nop mov rbx , rsp mov rdi , rbx call hexvar lea rdx , [ rip + hexvar ] cmp rax , rdx je hexvar mov edx , dword ptr [ rip + hexvar ] test edx , edx jne hexvar xor edx , edx mov rsi , rbx mov rdi , rax call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov rdi , rbp call hexvar mov rbx , rax test rax , rax jne hexvar mov rdi , rbp call hexvar mov rbx , rax test byte ptr [ rip + hexvar ] , num je hexvar mov esi , hexvar mov edi , num call hexvar mov rdx , qword ptr [ rip + hexvar ] mov rdi , rbx mov qword ptr [ rax + hexvar ] , rbx mov rsi , rax mov qword ptr [ rax + hexvar ] , rdx call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rdi , rbx call hexvar jmp hexvar nop dword ptr [ rax ] mov rdi , rbx call hexvar jmp hexvar
push rbx xor esi , esi mov rbx , rdi sub rsp , hexvar call hexvar test rax , rax je hexvar add rsp , hexvar pop rbx ret nop word ptr [ rax + rax ] mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar mov rdi , qword ptr [ rip + hexvar ] mov rsi , rbx mov rax , qword ptr [ rdi + num ] call qword ptr [ rax + hexvar ] test eax , eax jne hexvar mov rdi , rbx call hexvar mov rdi , rax mov qword ptr [ rsp + num ] , rax call hexvar mov rax , qword ptr [ rsp + num ] add rsp , hexvar pop rbx ret nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test rax , rax jne hexvar add rsp , hexvar mov rdi , rbx lea rcx , [ rip + hexvar ] xor edx , edx lea rsi , [ rip + hexvar ] pop rbx jmp hexvar
,
test byte ptr [ rdi ] , num jne hexvar lea rax , [ rdi + hexvar ] ret nop word ptr [ rax + rax ] mov rax , qword ptr [ rip + hexvar ] cmp qword ptr [ rdi + num ] , rax je hexvar sub rsp , num call hexvar add rsp , num lea rax , [ rax + hexvar ] ret nop mov rdi , qword ptr [ rdi + hexvar ] lea rax , [ rdi + hexvar ] ret
,
,
,
push r12 push rbp push rbx mov rbx , rdi mov r12 , qword ptr [ rdi + hexvar ] mov rbp , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rdi + hexvar ] call hexvar mov ecx , dword ptr [ rbx + hexvar ] mov edi , ecx shr edi , num je hexvar movsxd rdi , edi cqo and ecx , num idiv rdi cmp ecx , num je hexvar test ecx , ecx je hexvar cmp ecx , num jne hexvar cmp rax , hexvar jg hexvar movsxd rbp , ebp mov byte ptr [ r12 + rbp + hexvar ] , num mov rdx , qword ptr [ rbx + hexvar ] lea rdi , [ rbx + rdx + hexvar ] mov edx , num mov rsi , rax call hexvar mov ecx , dword ptr [ rbx + hexvar ] mov rdx , qword ptr [ rbx + hexvar ] and ecx , num add rcx , rdx mov qword ptr [ rbx + hexvar ] , num mov qword ptr [ rbx + hexvar ] , rcx mov qword ptr [ rbx + hexvar ] , num pop rbx pop rbp pop r12 ret nop word ptr [ rax + rax ] mov rdx , qword ptr [ rbx + hexvar ] lea rdi , [ rbx + rdx + hexvar ] mov edx , num jmp hexvar nop dword ptr [ rax + rax ] cmp rax , hexvar jg hexvar movsxd rbp , ebp or eax , hexvar mov byte ptr [ r12 + rbp + hexvar ] , al mov rdx , qword ptr [ rbx + hexvar ] jmp hexvar nop word ptr [ rax + rax ] cmp rax , hexvar jg hexvar movsxd rbp , ebp mov byte ptr [ r12 + rbp + hexvar ] , num mov rdx , qword ptr [ rbx + hexvar ] mov byte ptr [ rbx + rdx + hexvar ] , al jmp hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar
,
,
,
,
,
,
,
push r13 push r12 push rbp push rbx sub rsp , num mov rsi , qword ptr [ rip + hexvar ] mov rbp , qword ptr [ rip + hexvar ] mov r12d , dword ptr [ rip + hexvar ] movzx eax , byte ptr [ rsi ] cmp al , hexvar jne hexvar lea rdx , [ rsi + num ] mov qword ptr [ rip + hexvar ] , rdx movzx eax , byte ptr [ rsi + num ] mov rsi , rdx cmp al , hexvar jne hexvar lea rbx , [ rsi + num ] mov qword ptr [ rip + hexvar ] , rbx nop dword ptr [ rax + rax ] call hexvar cmp eax , hexvar jbe hexvar mov rax , qword ptr [ rip + hexvar ] xor esi , esi lea rdi , [ rip + hexvar ] movzx edx , byte ptr [ rax ] mov byte ptr [ rax ] , num mov rax , qword ptr [ rip + hexvar ] mov byte ptr [ rax - num ] , num mov rax , qword ptr [ rip + hexvar ] mov byte ptr [ rax ] , dl call hexvar mov rdi , qword ptr [ rip + hexvar ] mov edx , hexvar mov r13 , rax mov rsi , rax call hexvar mov esi , num mov rdi , r13 call hexvar mov rdi , rbx call hexvar mov edi , num lea r13d , [ rax + num ] call hexvar mov rsi , r13 mov edx , num mov rdi , rax call hexvar mov edi , num call hexvar mov edx , num xor esi , esi mov rdi , rax call hexvar mov edi , num call hexvar mov edx , num mov esi , num mov rdi , rax call hexvar mov rdi , r13 call hexvar mov rdx , r13 mov rsi , rbx mov rdi , rax call hexvar xor edx , edx xor esi , esi mov edi , num call hexvar mov esi , r12d mov rdi , rbp call hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 jmp hexvar nop dword ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbx xor esi , esi mov rbx , rdi sub rsp , hexvar call hexvar test rax , rax je hexvar add rsp , hexvar pop rbx ret nop word ptr [ rax + rax ] mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar mov rdi , qword ptr [ rip + hexvar ] mov rsi , rbx mov rax , qword ptr [ rdi + num ] call qword ptr [ rax + hexvar ] test eax , eax jne hexvar mov rdi , rbx call hexvar mov rdi , rax mov qword ptr [ rsp + num ] , rax call hexvar mov rax , qword ptr [ rsp + num ] add rsp , hexvar pop rbx ret nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test rax , rax jne hexvar add rsp , hexvar mov rdi , rbx lea rcx , [ rip + hexvar ] xor edx , edx lea rsi , [ rip + hexvar ] pop rbx jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
sub rsp , num call hexvar call hexvar mov rdi , qword ptr [ rip + hexvar ] mov esi , eax call hexvar add rsp , num jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push r14 xor eax , eax push r13 push r12 push rbp push rbx mov r12 , qword ptr [ rdi + hexvar ] mov rbx , rdi sub r12 , qword ptr [ rdi + hexvar ] mov r13 , qword ptr [ rdi + num ] add rsi , r12 setb al add rsi , qword ptr [ rdi + hexvar ] setb dl test rax , rax jne hexvar movzx edx , dl test rdx , rdx je hexvar lea rax , [ rip + hexvar ] call qword ptr [ rax ] mov qword ptr [ rbx + num ] , num mov qword ptr [ num ] , r13 ud2 nop mov rax , r12 shr rax , num cmp qword ptr [ rdi ] , rsi lea rbp , [ rsi + rax + hexvar ] cmovae rsi , qword ptr [ rdi ] cmp rsi , rbp cmovae rbp , rsi mov rsi , rbp call hexvar mov r14 , rax test rax , rax je hexvar lea rsi , [ rax + rbp ] mov qword ptr [ rbx + num ] , rax mov rdx , r12 mov qword ptr [ rax + num ] , r13 mov qword ptr [ rbx + hexvar ] , rsi mov qword ptr [ rax ] , rsi mov rax , qword ptr [ rbx + hexvar ] mov rsi , qword ptr [ rbx + hexvar ] lea rbp , [ r14 + rax + hexvar ] not rax and rbp , rax mov rdi , rbp call hexvar test byte ptr [ rbx + hexvar ] , num jne hexvar mov rax , qword ptr [ rbx + hexvar ] lea rdx , [ r13 + rax + hexvar ] not rax and rax , rdx cmp qword ptr [ rbx + hexvar ] , rax je hexvar add r12 , rbp mov qword ptr [ rbx + hexvar ] , rbp mov qword ptr [ rbx + hexvar ] , r12 and byte ptr [ rbx + hexvar ] , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret nop mov rax , qword ptr [ r13 + num ] mov rsi , r13 mov rdi , rbx mov qword ptr [ r14 + num ] , rax call hexvar jmp hexvar
,
,
push r13 push r12 push rbp mov rbp , rdi mov edi , hexvar push rbx lea r12 , [ rbp * num ] sub rsp , num call hexvar mov rcx , qword ptr [ rip + hexvar ] movsxd rsi , dword ptr [ rip + hexvar ] xor edx , edx lea r13 , [ rax + hexvar ] mov r8 , qword ptr [ rip + hexvar ] mov rbx , rax mov rdi , r13 call hexvar mov rdx , qword ptr [ rbx + hexvar ] mov rcx , qword ptr [ rbx + hexvar ] mov rax , rdx sub rax , rcx cmp r12 , rax ja hexvar mov rdi , qword ptr [ rbx + hexvar ] add rcx , r12 mov qword ptr [ rbx + hexvar ] , rcx cmp rcx , rdi je hexvar mov rsi , qword ptr [ rbx + hexvar ] mov r9 , rdx lea rax , [ rcx + rsi ] not rsi mov rcx , qword ptr [ rbx + hexvar ] and rax , rsi mov rsi , rax sub r9 , rcx mov qword ptr [ rbx + hexvar ] , rax sub rsi , rcx cmp rsi , r9 jbe hexvar mov qword ptr [ rbx + hexvar ] , rdx mov rax , rdx mov rdx , r12 xor esi , esi mov qword ptr [ rbx + hexvar ] , rax mov qword ptr [ rbx ] , rdi call hexvar mov dword ptr [ rbx + num ] , ebp add rsp , num mov rax , rbx pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax + rax ] mov rdi , r13 mov rsi , r12 call hexvar mov rcx , qword ptr [ rbx + hexvar ] mov rdi , qword ptr [ rbx + hexvar ] mov rdx , qword ptr [ rbx + hexvar ] add rcx , r12 mov qword ptr [ rbx + hexvar ] , rcx cmp rcx , rdi jne hexvar or byte ptr [ rbx + hexvar ] , num jmp hexvar
,
sub rsp , num movsxd rsi , dword ptr [ rip + hexvar ] mov r8 , qword ptr [ rip + hexvar ] xor edx , edx mov rcx , qword ptr [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar lea rax , [ rip + hexvar ] mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , rax add rsp , num ret
or byte ptr [ rdi + hexvar ] , num mov qword ptr [ rdi + hexvar ] , rcx mov qword ptr [ rdi + hexvar ] , r8 mov qword ptr [ rdi + hexvar ] , r9 jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbx call hexvar mov rdi , rax mov rbx , rax call hexvar cmp eax , - num je hexvar mov edi , eax call hexvar mov rax , rbx pop rbx ret nop word ptr [ rax + rax ] mov rdi , rbx xor ebx , ebx call hexvar jmp hexvar
,
,
,
,
,
,
push rbp xor edx , edx mov rbp , rsi push rbx mov rbx , rdi sub rsp , hexvar lea rsi , [ rsp + num ] call hexvar mov rdx , qword ptr [ rsp + num ] cmp byte ptr [ rdx ] , num jne hexvar add rsp , hexvar pop rbx pop rbp ret mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdx , rbx mov rsi , rbp mov rdi , rax xor eax , eax call hexvar
sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 test al , al je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 lea rax , [ rsp + hexvar ] lea rsi , [ rsp + num ] mov dword ptr [ rsp + num ] , num mov qword ptr [ rsp + hexvar ] , rax lea rax , [ rsp + hexvar ] mov dword ptr [ rsp + hexvar ] , hexvar mov qword ptr [ rsp + hexvar ] , rax call hexvar mov edi , num call hexvar
,
,
push rbp mov esi , num push rbx mov rbx , rdi sub rsp , hexvar call hexvar test eax , eax je hexvar add rsp , hexvar pop rbx pop rbp ret nop lea rbp , [ rsp + num ] mov esi , num mov rdi , rbx mov rdx , rbp call hexvar test eax , eax jne hexvar call hexvar cmp eax , hexvar je hexvar mov rdx , rbp mov esi , num mov rdi , rbx call hexvar test eax , eax jne hexvar mov rdi , qword ptr [ rbx ] call hexvar call hexvar cmp eax , hexvar je hexvar mov dword ptr [ rip + hexvar ] , num add rsp , hexvar pop rbx pop rbp ret nop word ptr cs : [ rax + rax ] mov rdi , rbx call hexvar mov edx , hexvar mov esi , num mov rcx , qword ptr [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rdi , rbx call hexvar test rax , rax je hexvar mov rsi , rax lea rdi , [ rip + hexvar ] xor eax , eax call hexvar lea rdi , [ rip + hexvar ] call hexvar jmp hexvar nop dword ptr [ rax ] mov rdi , rbx call hexvar mov edi , hexvar call hexvar add rsp , hexvar pop rbx pop rbp ret nop dword ptr [ rax ] mov rdi , qword ptr [ rbx ] call hexvar mov rdi , qword ptr [ rsp + num ] call hexvar mov rdi , qword ptr [ rsp + num ] call hexvar jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov rcx , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - num ] mov rdx , - num mov rsi , rcx mov edi , eax call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - num ] mov r8 , - num mov edi , eax call hexvar leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov eax , esi mov byte ptr [ rbp - hexvar ] , al movsx edx , byte ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , - num mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar mov rdi , qword ptr [ rbp - num ] xor rdi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax lea rax , [ rbp - hexvar ] mov edx , num mov esi , hexvar mov rdi , rax call hexvar lea rdx , [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , - num mov edi , eax call hexvar mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar lea rax , [ rip + hexvar ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num sete al movzx eax , al add qword ptr [ rbp - num ] , rax mov ecx , num mov rax , qword ptr [ rbp - num ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar movabs rax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] cmp qword ptr [ rbp - num ] , rax jb hexvar call hexvar mov rax , qword ptr [ rbp - num ] shr rax , num mov rdx , rax mov rax , qword ptr [ rbp - num ] add rax , rdx add rax , num mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov ecx , num mov rax , qword ptr [ rbp - num ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar mov rax , qword ptr [ rbp - num ] imul rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov ecx , num mov rax , qword ptr [ rbp - hexvar ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al jne hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar call hexvar mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rdx , qword ptr [ rbp - num ] xor rdx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar mov rdx , qword ptr [ rbp - num ] xor rdx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rdx , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rcx , rdx lea rdx , [ rip + hexvar ] mov esi , num mov rdi , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num je hexvar mov eax , dword ptr [ rbp - hexvar ] jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al jne hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax ] mov edx , eax lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] mov eax , num call hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov ecx , num mov edx , num lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num lea rdx , [ rip + hexvar ] mov esi , num mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num lea rdx , [ rip + hexvar ] mov esi , num mov rdi , rax call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar jmp hexvar mov edi , hexvar call hexvar mov eax , num mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rdx , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rcx , rdx lea rdx , [ rip + hexvar ] mov esi , num mov rdi , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num je hexvar mov eax , dword ptr [ rbp - hexvar ] jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al jne hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax ] mov edx , eax lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] mov eax , num call hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov ecx , num mov edx , num lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num lea rdx , [ rip + hexvar ] mov esi , num mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num lea rdx , [ rip + hexvar ] mov esi , num mov rdi , rax call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar jmp hexvar mov edi , hexvar call hexvar mov eax , num mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - hexvar ] , rax xor eax , eax lea rdx , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rcx , rdx lea rdx , [ rip + hexvar ] mov esi , num mov rdi , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num je hexvar mov eax , dword ptr [ rbp - hexvar ] jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al jne hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov ebx , dword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov edx , ebx mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov ecx , num mov edx , num lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar jmp hexvar mov edi , hexvar call hexvar mov eax , num mov rcx , qword ptr [ rbp - hexvar ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar add rsp , hexvar pop rbx pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov edi , num call hexvar mov edx , dword ptr [ rbp - hexvar ] mov eax , dword ptr [ rip + hexvar ] lea ecx , [ rax + num ] mov dword ptr [ rip + hexvar ] , ecx cdqe lea rcx , [ rax * num ] lea rax , [ rip + hexvar ] mov rax , qword ptr [ rcx + rax ] mov ecx , eax mov rax , qword ptr [ rbp - num ] mov esi , ecx mov rdi , rax call hexvar jmp hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov edx , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov esi , edx mov rdi , rax call hexvar mov esi , eax lea rdi , [ rip + hexvar ] mov eax , num call hexvar jmp hexvar mov edx , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov esi , edx mov rdi , rax call hexvar mov edx , eax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar nop leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov edi , num call hexvar mov edx , dword ptr [ rbp - hexvar ] mov eax , dword ptr [ rip + hexvar ] lea ecx , [ rax + num ] mov dword ptr [ rip + hexvar ] , ecx cdqe lea rcx , [ rax * num ] lea rax , [ rip + hexvar ] mov rax , qword ptr [ rcx + rax ] mov ecx , eax mov rax , qword ptr [ rbp - num ] mov esi , ecx mov rdi , rax call hexvar jmp hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov edx , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov esi , edx mov rdi , rax call hexvar mov esi , eax lea rdi , [ rip + hexvar ] mov eax , num call hexvar jmp hexvar mov edx , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov esi , edx mov rdi , rax call hexvar mov edx , eax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar nop leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov edi , num call hexvar mov edx , dword ptr [ rbp - hexvar ] mov eax , dword ptr [ rip + hexvar ] lea ecx , [ rax + num ] mov dword ptr [ rip + hexvar ] , ecx cdqe lea rcx , [ rax * num ] lea rax , [ rip + hexvar ] mov rax , qword ptr [ rcx + rax ] mov ecx , eax mov rax , qword ptr [ rbp - num ] mov esi , ecx mov rdi , rax call hexvar jmp hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov edx , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov esi , edx mov rdi , rax call hexvar mov esi , eax lea rdi , [ rip + hexvar ] mov eax , num call hexvar jmp hexvar mov edx , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov esi , edx mov rdi , rax call hexvar mov edx , eax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar nop leave ret
,
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - hexvar ] , rax xor eax , eax lea rdx , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rcx , rdx lea rdx , [ rip + hexvar ] mov esi , num mov rdi , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num je hexvar mov eax , dword ptr [ rbp - hexvar ] jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al jne hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov ebx , dword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov edx , ebx mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov ecx , num mov edx , num lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov ecx , num mov edx , num lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar jmp hexvar mov edi , hexvar call hexvar mov eax , num mov rbx , qword ptr [ rbp - hexvar ] xor rbx , qword ptr fs : [ hexvar ] je hexvar call hexvar add rsp , hexvar pop rbx pop rbp ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov byte ptr [ rbp - num ] , num movzx eax , byte ptr [ rip + hexvar ] xor eax , num test al , al je hexvar movzx eax , byte ptr [ rip + hexvar ] xor eax , num test al , al je hexvar lea rsi , [ rip + hexvar ] mov edi , num call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al jne hexvar mov eax , dword ptr [ rbp - hexvar ] mov esi , num mov edi , eax call hexvar cmp eax , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax + hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov edx , num mov rsi , rcx mov edi , eax call hexvar xor eax , num test al , al je hexvar mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rsi , rdx mov edi , eax call hexvar xor eax , num test al , al je hexvar mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar mov eax , hexvar jmp hexvar movzx eax , byte ptr [ rip + hexvar ] xor eax , num test al , al je hexvar movzx eax , byte ptr [ rip + hexvar ] xor eax , num test al , al je hexvar lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov byte ptr [ rbp - num ] , num jmp hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov byte ptr [ rbp - num ] , num jmp hexvar mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar mov eax , hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx edx , byte ptr [ rbp - num ] mov byte ptr [ rax ] , dl mov eax , num leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov dword ptr [ rbp - hexvar ] , edx movsd qword ptr [ rbp - hexvar ] , xmm0 mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar mov qword ptr [ rbp - num ] , num jmp hexvar mov eax , dword ptr [ rip + hexvar ] cmp dword ptr [ rbp - hexvar ] , eax jne hexvar mov edx , dword ptr [ rip + hexvar ] mov eax , dword ptr [ rip + hexvar ] cmp edx , eax jne hexvar mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - num ] , rax jmp hexvar mov eax , dword ptr [ rbp - hexvar ] cdqe mov rdx , rax mov rax , qword ptr [ rip + hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rip + hexvar ] , eax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rip + hexvar ] , rax mov eax , dword ptr [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , eax movsd xmm0 , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] mov eax , dword ptr [ rbp - hexvar ] mov edx , num mov rsi , rcx mov edi , eax call hexvar xor eax , num test al , al je hexvar mov eax , hexvar jmp hexvar cmp qword ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] mov rax , qword ptr [ rax ] test rax , rax je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] mov rax , qword ptr [ rax ] mov rdx , qword ptr [ rbp - num ] mov rcx , qword ptr [ rdx + num ] mov edx , dword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov edi , dword ptr [ rbp - hexvar ] call rax jmp hexvar mov edx , dword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rsi , rcx mov edi , eax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test eax , eax setne al leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp jmp hexvar mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] jmp hexvar mov eax , num mov rdi , rax call hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] shl rdx , num add rax , rdx mov qword ptr [ rax ] , num call hexvar mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] test rax , rax jne hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , num call hexvar mov eax , num pop rbp ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] shl rax , num mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax * num ] mov rax , qword ptr [ rip + hexvar ] mov esi , num mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rip + hexvar ] , rax mov qword ptr [ rip + hexvar ] , num jmp hexvar mov rax , qword ptr [ rip + hexvar ] lea rdx , [ rax - num ] mov rax , qword ptr [ rip + hexvar ] cmp rdx , rax ja hexvar mov qword ptr [ rbp - num ] , num mov rdx , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rbp - num ] add rax , rdx mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax * num ] mov rax , qword ptr [ rip + hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] lea rdx , [ rax * num ] mov rax , qword ptr [ rip + hexvar ] mov rcx , qword ptr [ rip + hexvar ] shl rcx , num add rax , rcx mov esi , num mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rip + hexvar ] , rax leave ret
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] shl rax , num mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax * num ] mov rax , qword ptr [ rip + hexvar ] mov esi , num mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rip + hexvar ] , rax mov qword ptr [ rip + hexvar ] , num jmp hexvar mov rax , qword ptr [ rip + hexvar ] lea rdx , [ rax - num ] mov rax , qword ptr [ rip + hexvar ] cmp rdx , rax ja hexvar mov qword ptr [ rbp - num ] , num mov rdx , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rbp - num ] add rax , rdx mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax * num ] mov rax , qword ptr [ rip + hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] lea rdx , [ rax * num ] mov rax , qword ptr [ rip + hexvar ] mov rcx , qword ptr [ rip + hexvar ] shl rcx , num add rax , rcx mov esi , num mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rip + hexvar ] , rax leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi cmp qword ptr [ rbp - num ] , num je hexvar call hexvar mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] movzx edx , byte ptr [ rip + hexvar ] mov byte ptr [ rax ] , dl mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] mov edx , dword ptr [ rip + hexvar ] mov dword ptr [ rax + hexvar ] , edx mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] add rax , num mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] shl rdx , num add rdx , rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rdx ] , rax call hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar nop leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov edi , hexvar call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov edx , dword ptr [ rbp - hexvar ] mov dword ptr [ rax + hexvar ] , edx mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] add eax , num cdqe mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + num ] , rdx mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] test rax , rax jne hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , num mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] leave ret
push rbp mov rbp , rsp jmp hexvar mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] jmp hexvar mov eax , num mov rdi , rax call hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] shl rdx , num add rax , rdx mov qword ptr [ rax ] , num call hexvar mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] test rax , rax jne hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , num call hexvar mov eax , num pop rbp ret
,
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] test rax , rax jne hexvar call hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov rcx , qword ptr [ rip + hexvar ] shl rcx , num lea rbx , [ rdx + rcx ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbx ] , rax mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] jmp hexvar mov eax , num mov rdx , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar call hexvar nop add rsp , hexvar pop rbx pop rbp ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov dword ptr [ rbp - hexvar ] , num mov dword ptr [ rbp - hexvar ] , num mov qword ptr [ rbp - hexvar ] , num mov qword ptr [ rbp - hexvar ] , num cmp dword ptr [ rbp - hexvar ] , num jne hexvar lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov edx , eax movsd xmm0 , qword ptr [ rip + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rsi , rcx mov edi , eax call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num jns hexvar mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar lea rdx , [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rsi , rdx mov edi , eax call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] cmp al , hexvar je hexvar mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar nop mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num mov eax , dword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar mov edi , num call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov rcx , rax mov rax , qword ptr [ rip + hexvar ] mov edx , num mov rsi , rcx mov rdi , rax call hexvar movzx eax , byte ptr [ rip + hexvar ] movzx eax , al test rax , rax je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar nop leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar mov edi , num call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar nop leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar lea rdi , [ rip + hexvar ] call hexvar mov rsi , rax mov edi , num mov eax , num call hexvar jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] cdqe mov rdx , rax lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rcx , rax mov eax , dword ptr [ rbp - hexvar ] mov edx , eax mov rsi , rcx mov edi , num mov eax , num call hexvar mov rax , qword ptr [ rip + hexvar ] lea rdx , [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax lea rdi , [ rip + hexvar ] call hexvar mov rcx , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rsi , rcx mov edi , num mov eax , num call hexvar lea rax , [ rbp - hexvar ] mov rdi , rax call hexvar test eax , eax jne hexvar lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov rax , qword ptr [ rbp - num ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] lea rdx , [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar lea rax , [ rbp - hexvar ] mov rdi , rax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , num nop mov rax , qword ptr [ rbp - num ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] lea rdx , [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar lea rax , [ rbp - hexvar ] mov rdi , rax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , num nop mov rax , qword ptr [ rbp - num ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar mov edi , num call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + hexvar ] lea edx , [ rax + num ] mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax + hexvar ] , edx mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rcx , rax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , rcx mov rdi , rax call hexvar movzx eax , byte ptr [ rip + hexvar ] movzx eax , al test rax , rax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar mov dword ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax + num ] mov eax , dword ptr [ rbp - num ] movsxd rdx , eax mov rax , rdx add rax , rax add rax , rdx shl rax , num add rax , rcx mov rdi , rax call hexvar mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar add dword ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax ] cmp dword ptr [ rbp - num ] , eax jl hexvar lea rdi , [ rip + hexvar ] mov eax , num call hexvar nop leave ret
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar mov edi , num call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar mov edi , num call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rbx , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rcx , rax mov rax , qword ptr [ rip + hexvar ] mov rdx , rbx mov rsi , rcx mov rdi , rax call hexvar nop add rsp , hexvar pop rbx pop rbp ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rip + hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdx , qword ptr [ rbp - num ] mov ecx , dword ptr [ rdx ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov edi , ecx call rax mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + num ] test eax , eax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] cmp rdx , rax ja hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] sub rdx , rax mov rax , rdx mov esi , eax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] sub rdx , rax mov rax , rdx mov ecx , eax mov rax , qword ptr [ rbp - hexvar ] mov edx , esi mov esi , ecx mov rdi , rax call hexvar nop leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] cmp rax , - num je hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax + num ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov eax , num jmp hexvar mov eax , num leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rdx , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num lea rax , [ rbp - hexvar ] mov rdi , rax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar nop mov rax , qword ptr [ rbp - num ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov edi , hexvar call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + num ] , rdx mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar mov edx , num mov esi , num mov edi , num call hexvar mov qword ptr [ rip + hexvar ] , rax mov eax , dword ptr [ rbp - hexvar ] cdqe mov rcx , rax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - num ] mov rsi , rcx mov rdi , rax call hexvar mov eax , dword ptr [ rip + hexvar ] add eax , num mov dword ptr [ rip + hexvar ] , eax nop leave ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax ] cmp eax , num jne hexvar mov eax , num jmp hexvar mov eax , num mov dword ptr [ rbp - num ] , eax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rdi , rax mov ecx , dword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - num ] mov rsi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov r9d , ecx mov r8 , rdi mov ecx , edx lea rdx , [ rip + hexvar ] mov rdi , rax mov eax , num call hexvar mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax - num ] mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov byte ptr [ rax ] , num nop leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar jmp hexvar nop leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] lea rdx , [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar lea rax , [ rbp - hexvar ] mov rdi , rax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , num nop mov rax , qword ptr [ rbp - num ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rdx , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax + hexvar ] mov eax , dword ptr [ rbp - hexvar ] movsxd rdx , eax mov rax , rdx shl rax , num add rax , rdx shl rax , num add rax , rcx mov esi , dword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax + hexvar ] mov eax , dword ptr [ rbp - hexvar ] movsxd rdx , eax mov rax , rdx shl rax , num add rax , rdx shl rax , num add rax , rcx mov rdx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] sub rdx , rax mov rax , rdx mov edi , eax mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rcx , rdx mov edx , esi mov esi , edi mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] movzx edx , byte ptr [ rax + hexvar ] or edx , num mov byte ptr [ rax + hexvar ] , dl nop mov rax , qword ptr [ rbp - num ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov byte ptr [ rbp - num ] , num movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar movzx eax , byte ptr [ rip + hexvar ] movzx eax , al test rax , rax je hexvar lea rdi , [ rip + hexvar ] mov eax , num call hexvar mov byte ptr [ rbp - num ] , num jmp hexvar mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test eax , eax je hexvar movzx eax , byte ptr [ rip + hexvar ] movzx eax , al test rax , rax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar mov byte ptr [ rbp - num ] , num jmp hexvar movzx eax , byte ptr [ rip + hexvar ] movzx eax , al test rax , rax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar cmp byte ptr [ rbp - num ] , num je hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov ecx , num lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar movzx eax , byte ptr [ rbp - num ] leave ret
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov dword ptr [ rbp - hexvar ] , edx mov eax , ecx mov byte ptr [ rbp - hexvar ] , al movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov eax , dword ptr [ rip + hexvar ] cmp dword ptr [ rbp - hexvar ] , eax je hexvar call hexvar mov byte ptr [ rip + hexvar ] , num mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rip + hexvar ] , eax mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rip + hexvar ] , eax movzx eax , byte ptr [ rbp - hexvar ] mov byte ptr [ rip + hexvar ] , al mov byte ptr [ rip + hexvar ] , num movzx eax , byte ptr [ rip + hexvar ] movzx eax , al test rax , rax je hexvar mov eax , dword ptr [ rbp - hexvar ] mov esi , eax lea rdi , [ rip + hexvar ] mov eax , num call hexvar jmp hexvar nop leave ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov dword ptr [ rbp - hexvar ] , ecx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rcx , [ rbp - hexvar ] lea rdx , [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar xor eax , num test al , al je hexvar mov eax , num jmp hexvar cmp dword ptr [ rbp - hexvar ] , num je hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] sub rdx , rax mov eax , dword ptr [ rbp - hexvar ] sub eax , num cdqe cmp rdx , rax cmovle rax , rdx mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] movsxd rdx , eax mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rcx mov rdi , rax call hexvar mov eax , dword ptr [ rbp - hexvar ] movsxd rdx , eax mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov byte ptr [ rax ] , num mov eax , num mov rdi , qword ptr [ rbp - num ] xor rdi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov dword ptr [ rbp - hexvar ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax + hexvar ] mov eax , dword ptr [ rbp - hexvar ] movsxd rdx , eax mov rax , rdx add rax , rax add rax , rdx shl rax , num add rax , rcx mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + hexvar ] sub eax , num cmp dword ptr [ rbp - hexvar ] , eax jge hexvar mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + hexvar ] sub eax , dword ptr [ rbp - hexvar ] sub eax , num movsxd rdx , eax mov rax , rdx add rax , rax add rax , rdx shl rax , num mov rdx , rax mov rax , qword ptr [ rbp - num ] lea rcx , [ rax + hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rcx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + hexvar ] lea edx , [ rax - num ] mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax + hexvar ] , edx mov eax , num jmp hexvar add dword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + hexvar ] cmp dword ptr [ rbp - hexvar ] , eax jl hexvar mov eax , num leave ret
,
,
,
push rbp mov rbp , rsp push r12 push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rcx , rdx mov edx , num lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar movzx eax , al mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov r12 , rax mov rbx , qword ptr [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rsi , rax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov r8 , r12 mov rcx , rdx mov rdx , rbx mov rdi , rax mov eax , num call hexvar cmp dword ptr [ rbp - hexvar ] , num setne al add rsp , hexvar pop rbx pop r12 pop rbp ret
push rbp mov rbp , rsp push r12 push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al jne hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , num mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar xor eax , num test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov r12 , rax mov rbx , qword ptr [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rsi , rax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov r8 , r12 mov rcx , rdx mov rdx , rbx mov rdi , rax mov eax , num call hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov eax , num add rsp , hexvar pop rbx pop r12 pop rbp ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rcx mov rdi , rax call hexvar xor eax , num test al , al je hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - num ] add rax , rdx mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov byte ptr [ rax ] , num mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - num ] jbe hexvar sub qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] cmp al , hexvar je hexvar mov eax , num leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rip + hexvar ] mov rsi , rcx mov rdi , rax call hexvar movzx eax , al mov dword ptr [ rbp - num ] , eax cmp dword ptr [ rbp - num ] , num je hexvar movzx eax , byte ptr [ rip + hexvar ] xor eax , num test al , al je hexvar mov byte ptr [ rip + hexvar ] , num cmp dword ptr [ rbp - num ] , num setne al leave ret
,
,
push rbp mov rbp , rsp push r12 push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - hexvar ] , rax xor eax , eax lea rcx , [ rbp - hexvar ] lea rdx , [ rbp - hexvar ] lea rsi , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar test eax , eax jne hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rsi , rcx mov edi , eax call hexvar xor eax , num test al , al je hexvar mov edi , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num nop nop mov rax , qword ptr [ rbp - hexvar ] xor rax , qword ptr fs : [ hexvar ] je hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov r12 , rax mov rbx , qword ptr [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rsi , rax mov rax , qword ptr [ rip + hexvar ] mov rcx , r12 mov rdx , rbx mov rdi , rax mov eax , num call hexvar mov edi , num call hexvar call hexvar add rsp , hexvar pop rbx pop r12 pop rbp ret
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax call hexvar cmp dword ptr [ rbp - hexvar ] , num jne hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax jmp hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax cmp qword ptr [ rbp - hexvar ] , num je hexvar call hexvar mov qword ptr [ rbp - num ] , rax call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax cmp dword ptr [ rbp - hexvar ] , num ja hexvar mov eax , dword ptr [ rbp - hexvar ] lea rdx , [ rax * num ] lea rax , [ rip + hexvar ] mov eax , dword ptr [ rdx + rax ] cdqe lea rdx , [ rip + hexvar ] add rax , rdx jmp rax mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar jmp hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar jmp hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar jmp hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar jmp hexvar nop mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar cmp qword ptr [ rbp - num ] , num je hexvar mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar call hexvar jmp hexvar mov byte ptr [ rip + hexvar ] , num call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax jmp hexvar nop jmp hexvar nop jmp hexvar nop leave ret
,
,
,
,
,
,
push rbp mov rbp , rsp push r12 push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - hexvar ] , rax xor eax , eax mov dword ptr [ rbp - hexvar ] , num lea rdx , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test eax , eax jne hexvar mov eax , dword ptr [ rbp - hexvar ] and eax , hexvar cmp eax , hexvar jne hexvar movzx eax , byte ptr [ rip + hexvar ] movzx eax , al test rax , rax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num je hexvar call hexvar mov eax , dword ptr [ rax ] mov edi , eax call hexvar mov r12 , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rbx , rax lea rdi , [ rip + hexvar ] call hexvar mov rcx , r12 mov rdx , rbx mov rsi , rax mov edi , num mov eax , num call hexvar mov eax , dword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar add rsp , hexvar pop rbx pop r12 pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov edi , num call hexvar mov byte ptr [ rbp - num ] , al lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar movzx eax , byte ptr [ rbp - num ] mov edi , eax call hexvar nop leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax call hexvar cmp dword ptr [ rbp - hexvar ] , num jne hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax jmp hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax cmp qword ptr [ rbp - hexvar ] , num je hexvar call hexvar mov qword ptr [ rbp - num ] , rax call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax cmp dword ptr [ rbp - hexvar ] , num ja hexvar mov eax , dword ptr [ rbp - hexvar ] lea rdx , [ rax * num ] lea rax , [ rip + hexvar ] mov eax , dword ptr [ rdx + rax ] cdqe lea rdx , [ rip + hexvar ] add rax , rdx jmp rax mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar jmp hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar jmp hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar jmp hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar jmp hexvar nop mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar cmp qword ptr [ rbp - num ] , num je hexvar mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar call hexvar jmp hexvar mov byte ptr [ rip + hexvar ] , num call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax jmp hexvar nop jmp hexvar nop jmp hexvar nop leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov esi , hexvar mov edi , num call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - hexvar ] jle hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + num ] , rdx mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar call hexvar mov dword ptr [ rip + hexvar ] , eax mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar mov dword ptr [ rip + hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ rip + hexvar ] cmp eax , hexvar jg hexvar mov dword ptr [ rip + hexvar ] , hexvar mov dword ptr [ rip + hexvar ] , num mov eax , dword ptr [ rip + hexvar ] lea edx , [ rax - num ] mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , edx mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] add eax , hexvar cdqe mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , rdx lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov rax , qword ptr [ rbp - num ] mov esi , num pxor xmm0 , xmm0 mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] leave ret
push rbp mov rbp , rsp push rbx sub rsp , num mov byte ptr [ rip + hexvar ] , num mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar call hexvar xor eax , num test al , al je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar mov rbx , rax lea rdi , [ rip + hexvar ] call hexvar mov rdx , rbx mov rsi , rax mov edi , num mov eax , num call hexvar mov edi , num call hexvar call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar lea rdi , [ rip + hexvar ] call hexvar mov rsi , rax mov edi , num mov eax , num call hexvar mov edi , num call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar lea rdi , [ rip + hexvar ] call hexvar mov rsi , rax mov edi , num mov eax , num call hexvar mov edi , num call hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar mov dword ptr [ rip + hexvar ] , hexvar mov edi , num call hexvar xor eax , num test al , al je hexvar lea rdi , [ rip + hexvar ] call hexvar mov rsi , rax mov edi , num mov eax , num call hexvar mov edi , num call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar call hexvar xor eax , num test al , al je hexvar lea rdi , [ rip + hexvar ] call hexvar mov rsi , rax mov edi , num mov eax , num call hexvar mov edi , num call hexvar nop add rsp , num pop rbx pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax call hexvar cmp dword ptr [ rbp - hexvar ] , num jne hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax jmp hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax cmp qword ptr [ rbp - hexvar ] , num je hexvar call hexvar mov qword ptr [ rbp - num ] , rax call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax cmp dword ptr [ rbp - hexvar ] , num ja hexvar mov eax , dword ptr [ rbp - hexvar ] lea rdx , [ rax * num ] lea rax , [ rip + hexvar ] mov eax , dword ptr [ rdx + rax ] cdqe lea rdx , [ rip + hexvar ] add rax , rdx jmp rax mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar jmp hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar jmp hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar jmp hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar jmp hexvar nop mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar cmp qword ptr [ rbp - num ] , num je hexvar mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar call hexvar jmp hexvar mov byte ptr [ rip + hexvar ] , num call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax jmp hexvar nop jmp hexvar nop jmp hexvar nop leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar cmp qword ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov byte ptr [ rip + hexvar ] , num nop leave ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num je hexvar movzx eax , byte ptr [ rip + hexvar ] movzx eax , al test rax , rax je hexvar mov rax , qword ptr [ rbp - num ] mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar mov rax , qword ptr [ rbp - num ] mov rdx , rax lea rsi , [ rip + hexvar ] mov edi , num mov eax , num call hexvar jmp hexvar lea rsi , [ rip + hexvar ] mov edi , num mov eax , num call hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , num nop leave ret
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov esi , hexvar mov edi , num call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - hexvar ] jle hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + num ] , rdx mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar call hexvar mov dword ptr [ rip + hexvar ] , eax mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar mov dword ptr [ rip + hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ rip + hexvar ] cmp eax , hexvar jg hexvar mov dword ptr [ rip + hexvar ] , hexvar mov dword ptr [ rip + hexvar ] , num mov eax , dword ptr [ rip + hexvar ] lea edx , [ rax - num ] mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , edx mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] add eax , hexvar cdqe mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , rdx lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov rax , qword ptr [ rbp - num ] mov esi , num pxor xmm0 , xmm0 mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar lea rdi , [ rip + hexvar ] call hexvar mov dword ptr [ rip + hexvar ] , num mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] mov rdi , rcx call rax leave ret
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] movsd xmm1 , qword ptr [ rax + hexvar ] movsd qword ptr [ rbp - hexvar ] , xmm1 mov rdx , qword ptr [ rbp - hexvar ] lea rax , [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar addsd xmm0 , qword ptr [ rbp - hexvar ] movsd qword ptr [ rbp - hexvar ] , xmm0 mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax + hexvar ] comisd xmm0 , xmmword ptr [ rbp - hexvar ] jbe hexvar mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rcx ] , rax mov qword ptr [ rcx + num ] , rdx mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax + hexvar ] , xmm0 mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rax + hexvar ] movsd qword ptr [ rbp - hexvar ] , xmm0 mov rax , qword ptr [ rbp - hexvar ] movsd xmm0 , qword ptr [ rbp - hexvar ] movsd qword ptr [ rax + hexvar ] , xmm0 movsd xmm0 , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rax + hexvar ] mov eax , dword ptr [ rbp - hexvar ] add eax , edx cdqe mov qword ptr [ rbp - num ] , rax mov qword ptr [ rbp - hexvar ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + num ] add eax , eax cdqe mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , hexvar jg hexvar mov qword ptr [ rbp - hexvar ] , hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , eax mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax + num ] , edx mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + num ] cdqe cmp qword ptr [ rbp - num ] , rax jg hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rsi , rdx mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov eax , dword ptr [ rbp - hexvar ] movsxd rdx , eax mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + hexvar ] cdqe add rcx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov rdi , rcx call hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rax + hexvar ] mov eax , dword ptr [ rbp - hexvar ] add edx , eax mov rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rax + hexvar ] , edx mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar nop leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov dword ptr [ rbp - num ] , eax cmp dword ptr [ rbp - num ] , num setne al leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar lea rdi , [ rip + hexvar ] call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx jmp hexvar mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] add rax , num mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rdi , rax call hexvar nop leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rip + hexvar ] test rax , rax jle hexvar mov edi , num call hexvar lea rax , [ rbp - hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar mov rdx , qword ptr [ rip + hexvar ] lea rax , [ rbp - hexvar ] push - num push rdx lea r9 , [ rip + hexvar ] mov r8d , num mov ecx , num mov edx , num lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar add rsp , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar lea rdi , [ rip + hexvar ] call hexvar mov rsi , rax mov edi , num mov eax , num call hexvar mov edi , num call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rdx , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rbp - hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax mov eax , num call hexvar lea rax , [ rbp - hexvar ] push - num push qword ptr [ rbp - hexvar ] lea r9 , [ rip + hexvar ] mov r8d , num mov rcx , rax mov edx , num lea rsi , [ rip + hexvar ] mov edi , num call hexvar add rsp , hexvar mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rdx , qword ptr [ rip + hexvar ] lea rax , [ rbp - hexvar ] push - num push rdx lea r9 , [ rip + hexvar ] mov r8d , num mov rcx , rax mov edx , num lea rsi , [ rip + hexvar ] mov edi , num call hexvar add rsp , hexvar mov qword ptr [ rip + hexvar ] , num mov edi , num call hexvar nop mov rax , qword ptr [ rbp - num ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , r8 mov qword ptr [ rbp - hexvar ] , r9 call hexvar lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - num ] mov rsi , rax lea rdi , [ rip + hexvar ] call hexvar lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar movzx eax , byte ptr [ rip + hexvar ] leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rbp - hexvar ] mov edx , num mov esi , num mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rdx , rax lea rax , [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar lea rax , [ rbp - hexvar ] mov rsi , rax lea rdi , [ rip + hexvar ] call hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , num mov esi , num mov rdi , rax call hexvar test eax , eax je hexvar mov byte ptr [ rip + hexvar ] , num jmp hexvar mov rdx , qword ptr [ rbp - hexvar ] lea rax , [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar cmp qword ptr [ rbp - hexvar ] , rax jbe hexvar mov byte ptr [ rip + hexvar ] , num movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov rdx , qword ptr [ rbp - hexvar ] lea rax , [ rbp - hexvar ] mov rcx , rdx mov edx , hexvar mov esi , num mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar movzx eax , byte ptr [ rip + hexvar ] mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rbp - hexvar ] mov edx , num mov esi , num mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rdx , rax lea rax , [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar lea rax , [ rbp - hexvar ] mov rsi , rax lea rdi , [ rip + hexvar ] call hexvar lea rdi , [ rip + hexvar ] call hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , num mov esi , num mov rdi , rax call hexvar test eax , eax je hexvar mov byte ptr [ rip + hexvar ] , num jmp hexvar mov rdx , qword ptr [ rbp - hexvar ] lea rax , [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar cmp qword ptr [ rbp - hexvar ] , rax jbe hexvar mov byte ptr [ rip + hexvar ] , num movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov rdx , qword ptr [ rbp - hexvar ] lea rax , [ rbp - hexvar ] mov rcx , rdx mov edx , hexvar mov esi , num mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar movzx eax , byte ptr [ rip + hexvar ] mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx movsd qword ptr [ rbp - hexvar ] , xmm0 mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax lea rax , [ rbp - hexvar ] movsd xmm0 , qword ptr [ rbp - hexvar ] mov rsi , rax lea rdi , [ rip - hexvar ] call hexvar test al , al je hexvar call hexvar mov dword ptr [ rax ] , hexvar mov eax , hexvar jmp hexvar mov eax , dword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] xor rdx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov esi , hexvar mov edi , num call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - hexvar ] jle hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + num ] , rdx mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar call hexvar mov dword ptr [ rip + hexvar ] , eax mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar mov dword ptr [ rip + hexvar ] , hexvar jmp hexvar mov eax , dword ptr [ rip + hexvar ] cmp eax , hexvar jg hexvar mov dword ptr [ rip + hexvar ] , hexvar mov dword ptr [ rip + hexvar ] , num mov eax , dword ptr [ rip + hexvar ] lea edx , [ rax - num ] mov rax , qword ptr [ rbp - num ] mov dword ptr [ rax + hexvar ] , edx mov rax , qword ptr [ rbp - num ] mov eax , dword ptr [ rax + hexvar ] add eax , hexvar cdqe mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , rdx lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov rax , qword ptr [ rbp - num ] mov esi , num pxor xmm0 , xmm0 mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rsi , rax lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov edx , eax movsd xmm0 , qword ptr [ rip + hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rsi , rcx mov edi , eax call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num jns hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num mov eax , hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num lea rdx , [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rsi , rdx mov edi , eax call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num je hexvar mov eax , dword ptr [ rbp - hexvar ] jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] cmp al , hexvar je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num mov eax , hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num mov eax , num mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov dword ptr [ rbp - hexvar ] , r8d mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - hexvar ] , rax xor eax , eax mov eax , dword ptr [ rbp - hexvar ] cdqe mov rdi , rax call hexvar add eax , num movsxd rbx , eax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar add rax , rbx add rax , num lea rdx , [ rax + num ] mov eax , hexvar sub rax , num add rax , rdx mov ebx , hexvar mov edx , num div rbx imul rax , rax , hexvar sub rsp , rax mov rax , rsp add rax , hexvar shr rax , num shl rax , num mov qword ptr [ rbp - hexvar ] , rax mov rcx , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax mov eax , num call hexvar mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov esi , dword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rbx , qword ptr [ rbp - hexvar ] xor rbx , qword ptr fs : [ hexvar ] je hexvar call hexvar mov rbx , qword ptr [ rbp - num ] leave ret
,
,
,
push rbp mov rbp , rsp mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar nop pop rbp ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , num nop leave ret
push rbp mov rbp , rsp push r12 push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al jne hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , num mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar xor eax , num test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov r12 , rax mov rbx , qword ptr [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar mov rsi , rax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov r8 , r12 mov rcx , rdx mov rdx , rbx mov rdi , rax mov eax , num call hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov eax , num add rsp , hexvar pop rbx pop r12 pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num jle hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov edx , dword ptr [ rbp - hexvar ] movsxd rdx , edx sub rdx , num add rax , rdx movzx eax , byte ptr [ rax ] cmp al , hexvar jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov edx , dword ptr [ rbp - hexvar ] movsxd rdx , edx sub rdx , num add rax , rdx mov byte ptr [ rax ] , num add qword ptr [ rbp - hexvar ] , num cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] test rax , rax jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rdx , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , num mov eax , num leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] mov rsi , rdx mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx jmp hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax ] , num mov eax , num leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar call hexvar mov eax , dword ptr [ rax ] mov edi , eax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , rax lea rsi , [ rip + hexvar ] mov edi , num mov eax , num call hexvar mov eax , num jmp hexvar movzx eax , byte ptr [ rip + hexvar ] movzx eax , al test rax , rax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar mov rdi , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov r8 , rdi mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar lea rax , [ rip - hexvar ] jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] movzx eax , byte ptr [ rax ] cmp al , hexvar sete al movzx eax , al add rax , rdx mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar test al , al je hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov edx , num mov rdi , rcx call rax test eax , eax jne hexvar jmp hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar test al , al jne hexvar add qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] test rax , rax jne hexvar jmp hexvar nop mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] test rax , rax setne al leave ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar lea rax , [ rip - hexvar ] jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] movzx eax , byte ptr [ rax ] cmp al , hexvar sete al movzx eax , al add rax , rdx mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar test al , al je hexvar mov rsi , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov edx , num mov rdi , rcx call rax test eax , eax jne hexvar jmp hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar test al , al jne hexvar add qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] test rax , rax jne hexvar jmp hexvar nop mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] test rax , rax setne al leave ret
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov dword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] add eax , hexvar cdqe lea rdx , [ rax + num ] mov eax , hexvar sub rax , num add rax , rdx mov ecx , hexvar mov edx , num div rcx imul rax , rax , hexvar sub rsp , rax mov rax , rsp add rax , hexvar shr rax , num shl rax , num mov qword ptr [ rbp - hexvar ] , rax mov eax , dword ptr [ rbp - hexvar ] movsxd rdx , eax mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov qword ptr [ rbp - hexvar ] , rax mov eax , dword ptr [ rbp - hexvar ] movsxd rdx , eax mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rcx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax + num ] mov qword ptr [ rbp - hexvar ] , rdx mov byte ptr [ rax ] , hexvar mov eax , dword ptr [ rbp - hexvar ] lea edx , [ rax + num ] mov dword ptr [ rbp - hexvar ] , edx movsxd rdx , eax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov esi , num mov rdi , rax call hexvar test al , al jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , num mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar mov rax , qword ptr [ rip + hexvar ] mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - num ] mov esi , num mov rdi , rax call hexvar xor eax , num test al , al je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , num mov eax , num jmp hexvar mov rax , qword ptr [ rbp - num ] leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov dword ptr [ rbp - hexvar ] , edx cmp qword ptr [ rbp - hexvar ] , num je hexvar mov eax , dword ptr [ rbp - hexvar ] movsxd rdx , eax mov rax , qword ptr [ rbp - hexvar ] add rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar jmp hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax call hexvar mov dword ptr [ rax ] , num mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar lea rax , [ rip + hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jns hexvar call hexvar mov eax , dword ptr [ rax ] cmp eax , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar test eax , eax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] cmp rax , qword ptr [ rbp - hexvar ] jne hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov byte ptr [ rax ] , num jmp hexvar cmp qword ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov byte ptr [ rax ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov byte ptr [ rax ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num cmp qword ptr [ rbp - hexvar ] , num jns hexvar call hexvar mov eax , dword ptr [ rax ] test eax , eax je hexvar lea rdi , [ rip + hexvar ] call hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar add rax , num mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] movsx eax , al mov edi , eax call hexvar mov edx , eax mov rax , qword ptr [ rbp - hexvar ] mov byte ptr [ rax ] , dl add qword ptr [ rbp - hexvar ] , num add qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov byte ptr [ rax ] , num mov eax , num leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] cmp al , hexvar jne hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] lea rcx , [ rbp - hexvar ] mov edx , hexvar mov rsi , rcx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] movsx eax , al mov edi , eax call hexvar test al , al jne hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] test al , al jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] movsx eax , al mov edi , eax call hexvar cmp eax , hexvar jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , num lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar test eax , eax je hexvar jmp hexvar nop jmp hexvar nop mov rax , qword ptr [ rbp - num ] leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax jmp hexvar add qword ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - num ] movzx eax , byte ptr [ rax ] test al , al je hexvar mov rax , qword ptr [ rbp - num ] movzx eax , byte ptr [ rax ] cmp al , hexvar je hexvar mov rax , qword ptr [ rbp - num ] movzx eax , byte ptr [ rax ] movsx eax , al mov edi , eax call hexvar xor eax , num test al , al jne hexvar mov rax , qword ptr [ rbp - num ] movzx eax , byte ptr [ rax ] cmp al , hexvar jne hexvar mov rax , qword ptr [ rbp - num ] cmp rax , qword ptr [ rbp - hexvar ] jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov esi , hexvar mov rdi , rax call hexvar test rax , rax je hexvar mov eax , num jmp hexvar mov eax , num leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov dword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] sub rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - num ] add rax , num mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov edx , dword ptr [ rbp - hexvar ] mov eax , edx shl eax , num add eax , edx add eax , eax mov edx , eax mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] movsx eax , al sub eax , hexvar add eax , edx mov dword ptr [ rbp - hexvar ] , eax add qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - hexvar ] jae hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] movsx eax , al mov edi , eax call hexvar test al , al jne hexvar mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - hexvar ] jae hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov eax , dword ptr [ rbp - hexvar ] leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov byte ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] test rax , rax jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax jmp hexvar mov rax , qword ptr [ rbp - num ] movzx eax , byte ptr [ rax ] test al , al jns hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov eax , num jmp hexvar add qword ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - num ] movzx eax , byte ptr [ rax ] test al , al jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rsi , rax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov r8 , rcx mov rcx , rsi mov rsi , rax lea rdi , [ rip + hexvar ] call hexvar test al , al je hexvar mov byte ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] test rax , rax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , num mov eax , num jmp hexvar movzx eax , byte ptr [ rbp - num ] leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - num ] jbe hexvar mov rax , qword ptr [ rbp - hexvar ] sub rax , qword ptr [ rbp - num ] cmp rax , num jbe hexvar mov rax , qword ptr [ rbp - num ] mov edx , num lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rbp - hexvar ] sub rax , qword ptr [ rbp - num ] cmp rax , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num movzx eax , byte ptr [ rax ] movsx eax , al mov edi , eax call hexvar test al , al jne hexvar mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - num ] jbe hexvar mov rax , qword ptr [ rbp - hexvar ] sub rax , qword ptr [ rbp - num ] cmp rax , num jbe hexvar mov rax , qword ptr [ rbp - num ] mov edx , num lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rbp - hexvar ] sub rax , qword ptr [ rbp - num ] cmp rax , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num movzx eax , byte ptr [ rax ] movsx eax , al mov edi , eax call hexvar test al , al jne hexvar mov rax , qword ptr [ rbp - hexvar ] cmp rax , qword ptr [ rbp - num ] jbe hexvar mov rax , qword ptr [ rbp - hexvar ] sub rax , qword ptr [ rbp - num ] cmp rax , num jbe hexvar mov rax , qword ptr [ rbp - num ] mov edx , num lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar test eax , eax jne hexvar mov rax , qword ptr [ rbp - hexvar ] sub rax , qword ptr [ rbp - num ] cmp rax , num je hexvar mov rax , qword ptr [ rbp - num ] add rax , num movzx eax , byte ptr [ rax ] movsx eax , al mov edi , eax call hexvar test al , al je hexvar mov eax , num jmp hexvar mov eax , num and eax , num leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov dword ptr [ rbp - hexvar ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] movsxd rdx , edx mov eax , dword ptr [ rax + rdx * num ] mov edi , eax call hexvar mov ecx , eax mov eax , dword ptr [ rbp - hexvar ] cdqe lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - num ] add rax , rdx mov esi , ecx mov rdi , rax call hexvar add dword ptr [ rbp - hexvar ] , num cmp dword ptr [ rbp - hexvar ] , num jle hexvar mov rax , qword ptr [ rbp - hexvar ] leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov dword ptr [ rbp - hexvar ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] movsxd rdx , edx mov eax , dword ptr [ rax + rdx * num ] mov edi , eax call hexvar mov ecx , eax mov eax , dword ptr [ rbp - hexvar ] cdqe lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - num ] add rax , rdx mov esi , ecx mov rdi , rax call hexvar add dword ptr [ rbp - hexvar ] , num cmp dword ptr [ rbp - hexvar ] , num jle hexvar mov rax , qword ptr [ rbp - hexvar ] leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov dword ptr [ rbp - hexvar ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] movsxd rdx , edx mov eax , dword ptr [ rax + rdx * num ] mov edi , eax call hexvar mov ecx , eax mov eax , dword ptr [ rbp - hexvar ] cdqe lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - num ] add rax , rdx mov esi , ecx mov rdi , rax call hexvar add dword ptr [ rbp - hexvar ] , num cmp dword ptr [ rbp - hexvar ] , num jle hexvar mov rax , qword ptr [ rbp - hexvar ] leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] lea r9 , [ rip - hexvar ] lea r8 , [ rip - hexvar ] mov ecx , hexvar lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] lea r9 , [ rip - hexvar ] lea r8 , [ rip - hexvar ] mov ecx , hexvar lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov dword ptr [ rbp - hexvar ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] movsxd rdx , edx mov eax , dword ptr [ rax + rdx * num ] mov edi , eax call hexvar mov ecx , eax mov eax , dword ptr [ rbp - hexvar ] cdqe lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - num ] add rax , rdx mov esi , ecx mov rdi , rax call hexvar add dword ptr [ rbp - hexvar ] , num cmp dword ptr [ rbp - hexvar ] , num jle hexvar mov rax , qword ptr [ rbp - hexvar ] leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] lea r9 , [ rip - hexvar ] lea r8 , [ rip - hexvar ] mov ecx , hexvar lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] lea r9 , [ rip - hexvar ] lea r8 , [ rip - hexvar ] mov ecx , hexvar lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov dword ptr [ rbp - hexvar ] , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] movsxd rdx , edx mov eax , dword ptr [ rax + rdx * num ] mov edi , eax call hexvar mov ecx , eax mov eax , dword ptr [ rbp - hexvar ] cdqe lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - num ] add rax , rdx mov esi , ecx mov rdi , rax call hexvar add dword ptr [ rbp - hexvar ] , num cmp dword ptr [ rbp - hexvar ] , num jle hexvar mov rax , qword ptr [ rbp - hexvar ] leave ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov dword ptr [ rbp - hexvar ] , hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rbx , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov edi , eax mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov r8d , num mov rcx , rbx mov rsi , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax mov eax , num cmp dword ptr [ rbp - hexvar ] , num cmovle eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num je hexvar movzx eax , byte ptr [ rip + hexvar ] movzx eax , al test rax , rax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rsi , rax lea rdi , [ rip + hexvar ] mov eax , num call hexvar mov eax , dword ptr [ rbp - hexvar ] add rsp , hexvar pop rbx pop rbp ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rax mov edi , num call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rsi , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov r8 , rsi mov rsi , rax mov edi , num call hexvar leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov edx , hexvar mov rsi , rcx mov rdi , rax call hexvar leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] sub rax , qword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax lea rax , [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov eax , dword ptr [ rbp - hexvar ] add eax , num cdqe lea rdx , [ rax + num ] mov eax , hexvar sub rax , num add rax , rdx mov ecx , hexvar mov edx , num div rcx imul rax , rax , hexvar sub rsp , rax mov rax , rsp add rax , hexvar shr rax , num shl rax , num mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov eax , dword ptr [ rbp - hexvar ] movsxd rdx , eax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rcx , qword ptr [ rbp - hexvar ] mov rsi , rcx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax ] mov eax , dword ptr [ rbp - hexvar ] cdqe add rax , rdx mov byte ptr [ rax ] , num mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , rax lea rsi , [ rip + hexvar ] mov edi , num mov eax , num call hexvar nop mov rax , qword ptr [ rbp - num ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar mov rdi , qword ptr [ rbp - num ] xor rdi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov eax , edx mov byte ptr [ rbp - hexvar ] , al mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax movsx ecx , byte ptr [ rbp - hexvar ] lea rax , [ rbp - hexvar ] mov edx , num mov esi , ecx mov rdi , rax call hexvar lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov rsi , qword ptr [ rbp - num ] xor rsi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar lea rdi , [ rip + hexvar ] call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx jmp hexvar mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] add rax , num mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rdi , rax call hexvar nop leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax + num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax jmp hexvar mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov byte ptr [ rax ] , num cmp qword ptr [ rbp - hexvar ] , num je hexvar sub qword ptr [ rbp - hexvar ] , num mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] add rax , rdx movzx eax , byte ptr [ rax ] cmp al , hexvar je hexvar mov rax , qword ptr [ rbp - num ] leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov esi , hexvar mov edi , num call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] test rax , rax jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] jmp hexvar mov dword ptr [ rbp - num ] , num jmp hexvar add dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] cdqe lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov rax , qword ptr [ rax ] test rax , rax jne hexvar mov dword ptr [ rbp - num ] , num jmp hexvar add dword ptr [ rbp - num ] , num mov eax , dword ptr [ rbp - num ] cdqe lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov rax , qword ptr [ rax ] test rax , rax jne hexvar mov edx , dword ptr [ rbp - num ] mov eax , dword ptr [ rbp - num ] add eax , edx add eax , num cdqe lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov eax , dword ptr [ rbp - num ] add eax , num cdqe lea rdx , [ rax * num ] mov eax , dword ptr [ rbp - num ] cdqe lea rcx , [ rax * num ] mov rax , qword ptr [ rbp - hexvar ] add rcx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov rdi , rcx call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi cmp qword ptr [ rbp - hexvar ] , num jne hexvar cmp qword ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov eax , num jmp hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar call hexvar mov rax , qword ptr [ rbp - num ] leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] movzx eax , byte ptr [ rax ] test al , al jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] add rax , rdx movzx eax , byte ptr [ rax ] cmp al , hexvar jne hexvar add qword ptr [ rbp - hexvar ] , num mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar cmp qword ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov byte ptr [ rip + hexvar ] , num nop leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar movzx eax , byte ptr [ rip + hexvar ] xor eax , num test al , al je hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rip + hexvar ] test rax , rax jle hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rip + hexvar ] cmp rdx , rax jl hexvar mov edi , num call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov edx , num mov esi , hexvar mov rdi , rax call hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , rax call hexvar mov edi , eax call hexvar mov dword ptr [ rbp - num ] , eax cmp dword ptr [ rbp - num ] , num jns hexvar lea rdi , [ rip + hexvar ] call hexvar mov rsi , rax mov edi , num mov eax , num call hexvar mov byte ptr [ rip + hexvar ] , num mov eax , num jmp hexvar mov eax , dword ptr [ rbp - num ] lea rsi , [ rip + hexvar ] mov edi , eax call hexvar mov qword ptr [ rip + hexvar ] , rax mov qword ptr [ rip + hexvar ] , num mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar lea rdi , [ rip + hexvar ] call hexvar mov rsi , rax mov edi , num mov eax , num call hexvar mov eax , dword ptr [ rbp - num ] mov edi , eax call hexvar mov byte ptr [ rip + hexvar ] , num mov eax , num jmp hexvar lea rdi , [ rip + hexvar ] call hexvar movzx eax , byte ptr [ rip + hexvar ] leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov dword ptr [ rbp - hexvar ] , edx mov edx , dword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rcx mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rax mov edi , num call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - num ] mov r8 , - num mov edi , eax call hexvar leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov eax , esi mov byte ptr [ rbp - hexvar ] , al movsx edx , byte ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , - num mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar mov rdi , qword ptr [ rbp - num ] xor rdi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov eax , edx mov byte ptr [ rbp - hexvar ] , al mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax movsx ecx , byte ptr [ rbp - hexvar ] lea rax , [ rbp - hexvar ] mov edx , num mov esi , ecx mov rdi , rax call hexvar lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov rsi , qword ptr [ rbp - num ] xor rsi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar lea rdx , [ rax + num ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num sete al movzx eax , al add qword ptr [ rbp - num ] , rax mov ecx , num mov rax , qword ptr [ rbp - num ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar movabs rax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] cmp qword ptr [ rbp - num ] , rax jb hexvar call hexvar mov rax , qword ptr [ rbp - num ] shr rax , num mov rdx , rax mov rax , qword ptr [ rbp - num ] add rax , rdx add rax , num mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar call hexvar mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rsi , rdx mov edi , eax call hexvar mov dword ptr [ rbp - num ] , eax mov rdx , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - num ] mov rsi , rdx mov edi , eax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov ebp , edi push rbx sub rsp , hexvar lea rdi , [ rsp + hexvar ] call hexvar test rax , rax je hexvar mov edx , num mov esi , hexvar mov rdi , rax mov rbx , rax call hexvar test eax , eax jne hexvar test ebp , ebp jne hexvar call hexvar mov rdi , rbx call hexvar mov esi , ebp mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp ret nop word ptr [ rax + rax ] call hexvar add rsp , hexvar pop rbx pop rbp ret
,
,
,
,
,
,
,
push rbx mov rbx , rdi mov rdi , qword ptr [ rdi + hexvar ] call hexvar mov edi , dword ptr [ rbx + hexvar ] mov rsi , rax mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar call hexvar mov dword ptr [ rbx + hexvar ] , eax pop rbx ret nop word ptr [ rax + rax ] call hexvar mov dword ptr [ rbx + hexvar ] , eax pop rbx ret
,
push rbx mov rbx , rdi mov rdi , qword ptr [ rdi + hexvar ] call hexvar mov edi , dword ptr [ rbx + hexvar ] mov rsi , rax mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar call hexvar mov dword ptr [ rbx + hexvar ] , eax pop rbx ret nop word ptr [ rax + rax ] call hexvar mov dword ptr [ rbx + hexvar ] , eax pop rbx ret
,
,
,
,
,
,
,
,
mov ecx , dword ptr [ rsi ] test ecx , ecx je hexvar mov edx , dword ptr [ rsi + num ] test edx , edx je hexvar cmp dword ptr [ rip + hexvar ] , num je hexvar push r12 push rbp mov rbp , rdi push rbx mov rbx , rsi add rsp , - hexvar mov eax , dword ptr [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , edx mov dword ptr [ rip + hexvar ] , ecx test eax , eax je hexvar mov r12 , rsp lea rsi , [ rip + hexvar ] xor eax , eax mov rdi , r12 call hexvar mov rcx , qword ptr [ rip + hexvar ] mov rdi , r12 mov rdx , rbp mov rsi , qword ptr [ rip + hexvar ] call hexvar mov rdi , rax mov rsi , rbx call hexvar sub rsp , - hexvar pop rbx pop rbp pop r12 ret nop cmp edx , dword ptr [ rip + hexvar ] jne hexvar cmp ecx , dword ptr [ rip + hexvar ] jne hexvar ret nop dword ptr [ rax ] mov rsi , rdi mov rdx , qword ptr [ rip + hexvar ] mov rdi , qword ptr [ rip + hexvar ] call hexvar mov rdi , rax jmp hexvar
test edi , edi jne hexvar ret nop dword ptr [ rax ] push r13 xor edx , edx push r12 push rbp movsxd rbp , edi push rbx sub rsp , num mov esi , dword ptr [ rip + hexvar ] mov rdi , qword ptr [ rip + hexvar ] call hexvar mov r12 , rax test rax , rax je hexvar call hexvar mov r13 , rax mov rax , qword ptr [ r12 + hexvar ] mov rbx , qword ptr [ rax ] test rbx , rbx jne hexvar jmp hexvar nop dword ptr [ rax + rax ] mov qword ptr [ r12 + hexvar ] , rbx mov rbx , qword ptr [ rbx ] test rbx , rbx je hexvar mov rdi , qword ptr [ rbx + num ] call hexvar cmp rax , r13 jne hexvar mov rdi , qword ptr [ rbx + num ] lea rsi , [ rbp + r13 ] call hexvar mov qword ptr [ r12 + hexvar ] , rbx mov rbx , qword ptr [ rbx ] test rbx , rbx jne hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 ret
,
,
,
,
,
,
,
,
,
,
,
mov rax , qword ptr [ rip + hexvar ] push r12 mov edx , num lea rsi , [ rip + hexvar ] push rbp push rbx mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rdi , qword ptr [ rax + num ] call hexvar cmp rax , qword ptr [ rip + hexvar ] je hexvar call hexvar mov rbx , rax call hexvar mov rdx , qword ptr [ rip + hexvar ] mov dword ptr [ rax + num ] , hexvar mov rdx , qword ptr [ rdx + hexvar ] mov rcx , qword ptr [ rdx + num ] mov qword ptr [ rax + hexvar ] , rbx mov qword ptr [ rax + hexvar ] , rcx mov qword ptr [ rdx + num ] , rbx call hexvar mov dword ptr [ rax + num ] , hexvar mov rbx , rax lea r12 , [ rbx + hexvar ] call hexvar mov dword ptr [ rbx + hexvar ] , eax call hexvar call hexvar mov rbp , rax test rax , - hexvar jne hexvar test al , hexvar jne hexvar and eax , num cmp rax , num jg hexvar cmp rax , num je hexvar call hexvar xor edx , edx mov rsi , r12 xor edi , edi call hexvar movzx eax , byte ptr [ rbx + hexvar ] cmp al , num jne hexvar mov rax , rbp and eax , hexvar cmp rax , hexvar je hexvar nop dword ptr [ rax + rax ] mov dword ptr [ rbx + hexvar ] , ebp cmp rbp , hexvar je hexvar pop rbx pop rbp pop r12 jmp hexvar nop dword ptr [ rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar call hexvar xor edx , edx mov rsi , r12 xor edi , edi call hexvar mov dword ptr [ rbx + hexvar ] , hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar pop rbx pop rbp pop r12 jmp hexvar nop dword ptr [ rax + rax ] mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rax + num ] call hexvar mov rbx , rax call hexvar cmp rbx , rax jne hexvar jmp hexvar nop dword ptr [ rax ] cmp al , num je hexvar jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
sub rsp , hexvar movzx eax , word ptr [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rdi mov rdi , rsp and ax , hexvar or ax , hexvar mov word ptr [ rsp + hexvar ] , ax call hexvar add rsp , hexvar ret
,
,
push r13 push r12 mov r12 , rdi movzx edi , sil push rbp mov ebp , edx push rbx mov ebx , esi sub rsp , num call hexvar cmp ebx , hexvar je hexvar mov r13d , eax test ebp , ebp jne hexvar and ebx , hexvar mov esi , r13d mov rdi , r12 cmp ebx , hexvar je hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 jmp hexvar nop word ptr cs : [ rax + rax ] add rsp , num pop rbx pop rbp pop r12 pop r13 jmp hexvar nop mov edi , ebx call hexvar jmp hexvar nop dword ptr [ rax ] add rsp , num pop rbx pop rbp pop r12 pop r13 ret
push r12 push rbp push rbx mov rbx , rsi xor esi , esi call hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar call hexvar lea rdi , [ rip + hexvar ] call hexvar lea rdi , [ rip + hexvar ] mov rbp , rax call hexvar mov rdi , rbp mov r12 , rax call hexvar mov qword ptr [ rbx ] , r12 mov rdi , rbx mov esi , num mov qword ptr [ rbx + num ] , rbp mov byte ptr [ rbx + hexvar ] , hexvar mov qword ptr [ rbx + hexvar ] , - num call hexvar pop rbx mov eax , num pop rbp pop r12 ret nop dword ptr [ rax ] call hexvar mov rbp , rax call hexvar mov r12 , rax jmp hexvar
mov rax , qword ptr [ rdi + hexvar ] test rax , rax je hexvar push r13 push r12 push rbp push rbx sub rsp , num mov rbx , qword ptr [ rax ] test rbx , rbx je hexvar mov r12 , rdi lea r13 , [ rip + hexvar ] jmp hexvar nop word ptr [ rax + rax ] xor esi , esi mov edi , ebp call hexvar mov rdi , qword ptr [ rip + hexvar ] call hexvar mov rax , qword ptr [ rip + hexvar ] cmp qword ptr [ rax + hexvar ] , num mov qword ptr [ rax + hexvar ] , num jne hexvar mov rbx , qword ptr [ rbx + hexvar ] test rbx , rbx je hexvar mov esi , dword ptr [ rbx + hexvar ] mov rdi , r12 call hexvar call hexvar test eax , eax je hexvar mov dword ptr [ rip + hexvar ] , num xor ebp , ebp cmp qword ptr [ rbx + hexvar ] , num mov rdi , qword ptr [ rip + hexvar ] je hexvar test byte ptr [ rdi + hexvar ] , hexvar je hexvar mov eax , dword ptr [ rdi + hexvar ] test eax , eax jne hexvar call hexvar test eax , eax jne hexvar xor edx , edx xor esi , esi mov edi , ebp call hexvar jmp hexvar nop call hexvar mov rdi , qword ptr [ rip + hexvar ] mov ebp , eax test eax , eax je hexvar mov ebp , dword ptr [ rip + hexvar ] mov rdi , qword ptr [ rip + hexvar ] test ebp , ebp jne hexvar cmp rdi , r13 je hexvar mov ebp , dword ptr [ rdi + hexvar ] jmp hexvar nop dword ptr [ rax ] xor edx , edx test al , num jne hexvar nop word ptr cs : [ rax + rax ] shr eax , num add edx , num test al , num je hexvar cmp ebp , edx cmovl ebp , edx jmp hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax + rax ] xor ebp , ebp jmp hexvar nop word ptr [ rax + rax ] ret lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar
,
push r13 push r12 push rbp push rbx sub rsp , num mov rsi , qword ptr [ rip + hexvar ] mov rbp , qword ptr [ rip + hexvar ] mov r12d , dword ptr [ rip + hexvar ] movzx eax , byte ptr [ rsi ] cmp al , hexvar jne hexvar lea rdx , [ rsi + num ] mov qword ptr [ rip + hexvar ] , rdx movzx eax , byte ptr [ rsi + num ] mov rsi , rdx cmp al , hexvar jne hexvar lea rbx , [ rsi + num ] mov qword ptr [ rip + hexvar ] , rbx nop dword ptr [ rax + rax ] call hexvar cmp eax , hexvar jbe hexvar mov rax , qword ptr [ rip + hexvar ] xor esi , esi lea rdi , [ rip + hexvar ] movzx edx , byte ptr [ rax ] mov byte ptr [ rax ] , num mov rax , qword ptr [ rip + hexvar ] mov byte ptr [ rax - num ] , num mov rax , qword ptr [ rip + hexvar ] mov byte ptr [ rax ] , dl call hexvar mov rdi , qword ptr [ rip + hexvar ] mov edx , hexvar mov r13 , rax mov rsi , rax call hexvar mov esi , num mov rdi , r13 call hexvar mov rdi , rbx call hexvar mov edi , num lea r13d , [ rax + num ] call hexvar mov rsi , r13 mov edx , num mov rdi , rax call hexvar mov edi , num call hexvar mov edx , num xor esi , esi mov rdi , rax call hexvar mov edi , num call hexvar mov edx , num mov esi , num mov rdi , rax call hexvar mov rdi , r13 call hexvar mov rdx , r13 mov rsi , rbx mov rdi , rax call hexvar xor edx , edx xor esi , esi mov edi , num call hexvar mov esi , r12d mov rdi , rbp call hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 jmp hexvar nop dword ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 jmp hexvar
,
,
lea rax , [ rip + hexvar ] cmp qword ptr [ rip + hexvar ] , rax je hexvar push rbx mov ecx , edx mov ebx , esi movsxd r9 , edi mov edx , num xor r8d , r8d mov esi , num mov edi , num sub rsp , num push num call hexvar mov byte ptr [ rax ] , bl pop rax pop rdx pop rbx ret nop dword ptr [ rax + rax ] mov ecx , edi mov rax , - num mov rsi , qword ptr [ rip + hexvar ] shl rax , cl mov rcx , rax lea rax , [ rsi - num ] sub rax , rcx and rax , rcx test edx , edx je hexvar mov rcx , rax movsxd rdx , edx sub rcx , rsi cmp rcx , rdx ja hexvar mov qword ptr [ rip + hexvar ] , rax ret nop word ptr [ rax + rax ] ret
push r13 push r12 push rbp push rbx sub rsp , num mov rsi , qword ptr [ rip + hexvar ] mov rbp , qword ptr [ rip + hexvar ] mov r12d , dword ptr [ rip + hexvar ] movzx eax , byte ptr [ rsi ] cmp al , hexvar jne hexvar lea rdx , [ rsi + num ] mov qword ptr [ rip + hexvar ] , rdx movzx eax , byte ptr [ rsi + num ] mov rsi , rdx cmp al , hexvar jne hexvar lea rbx , [ rsi + num ] mov qword ptr [ rip + hexvar ] , rbx nop dword ptr [ rax + rax ] call hexvar cmp eax , hexvar jbe hexvar mov rax , qword ptr [ rip + hexvar ] xor esi , esi lea rdi , [ rip + hexvar ] movzx edx , byte ptr [ rax ] mov byte ptr [ rax ] , num mov rax , qword ptr [ rip + hexvar ] mov byte ptr [ rax - num ] , num mov rax , qword ptr [ rip + hexvar ] mov byte ptr [ rax ] , dl call hexvar mov rdi , qword ptr [ rip + hexvar ] mov edx , hexvar mov r13 , rax mov rsi , rax call hexvar mov esi , num mov rdi , r13 call hexvar mov rdi , rbx call hexvar mov edi , num lea r13d , [ rax + num ] call hexvar mov rsi , r13 mov edx , num mov rdi , rax call hexvar mov edi , num call hexvar mov edx , num xor esi , esi mov rdi , rax call hexvar mov edi , num call hexvar mov edx , num mov esi , num mov rdi , rax call hexvar mov rdi , r13 call hexvar mov rdx , r13 mov rsi , rbx mov rdi , rax call hexvar xor edx , edx xor esi , esi mov edi , num call hexvar mov esi , r12d mov rdi , rbp call hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 jmp hexvar nop dword ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 jmp hexvar
mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar ret nop dword ptr [ rax + rax ] push rbx mov ebx , edi mov rdi , qword ptr [ rip + hexvar ] call hexvar xor edi , edi call hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , qword ptr [ rip + hexvar ] mov dword ptr [ rax + hexvar ] , ebx call hexvar xor edi , edi pop rbx jmp hexvar
,
,
,
,
push r13 push r12 push rbp push rbx sub rsp , num mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar xor ebp , ebp lea r13 , [ rip + hexvar ] nop dword ptr [ rax ] mov rdx , qword ptr [ r13 ] mov eax , ebp mov rcx , qword ptr [ rdx + rax * num ] test rcx , rcx je hexvar mov rax , rcx mov ebx , num nop dword ptr [ rax + rax ] mov edx , dword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] and edx , num mov rax , qword ptr [ rax + hexvar ] cmp edx , num sbb rdx , rdx and rdx , hexvar lea rbx , [ rdx + rbx + num ] test rax , rax jne hexvar mov rax , qword ptr [ rcx + hexvar ] xor esi , esi add ebp , num mov r12 , qword ptr [ rax + hexvar ] mov rdi , r12 call hexvar mov rdi , qword ptr [ rip + hexvar ] mov rdx , rbx mov rsi , r12 call hexvar mov rdi , rbx call hexvar mov qword ptr [ r12 + hexvar ] , rax call hexvar mov rdi , qword ptr [ rip + hexvar ] mov qword ptr [ rdi + hexvar ] , rax call hexvar cmp dword ptr [ rip + hexvar ] , ebp ja hexvar mov rdi , qword ptr [ rip + hexvar ] lea rsi , [ rip - hexvar ] call hexvar mov rdi , qword ptr [ rip + hexvar ] add rsp , num pop rbx pop rbp pop r12 pop r13 jmp hexvar nop word ptr [ rax + rax ] mov ebx , num jmp hexvar
,
,
push r13 push r12 push rbp push rbx sub rsp , num mov rax , qword ptr [ rsi + hexvar ] mov r12 , qword ptr [ rax + hexvar ] test r12 , r12 je hexvar mov rdi , qword ptr [ rdx + hexvar ] mov rbp , rsi mov rsi , r12 mov rbx , rdx call hexvar test rax , rax je hexvar mov edx , dword ptr [ rax ] mov rax , qword ptr [ rbx ] lea rax , [ rax + rdx * num ] mov rdx , qword ptr [ rbp + hexvar ] mov rcx , qword ptr [ rax ] mov qword ptr [ rdx + hexvar ] , rcx mov qword ptr [ rax ] , rbp add rsp , num pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax ] mov r13d , dword ptr [ rbx + num ] mov rax , qword ptr [ rbx ] mov edx , r13d test r13b , hexvar je hexvar mov ecx , r13d add edx , num mov edi , num mov qword ptr [ rax + rcx * num ] , rbp mov dword ptr [ rbx + num ] , edx call hexvar mov rdi , qword ptr [ rbx + hexvar ] mov rsi , r12 mov dword ptr [ rax ] , r13d add rsp , num mov rdx , rax pop rbx pop rbp pop r12 pop r13 jmp hexvar nop dword ptr [ rax + rax ] lea esi , [ r13 + hexvar ] mov rdi , rax shl rsi , num call hexvar mov edx , dword ptr [ rbx + num ] mov qword ptr [ rbx ] , rax jmp hexvar
,
push r14 push r13 push r12 mov r12 , rsi push rbp mov rbp , rcx push rbx mov rbx , rdx add qword ptr [ rip + hexvar ] , num call hexvar mov rdx , qword ptr [ rip + hexvar ] mov r14 , rax mov rax , qword ptr [ rip + hexvar ] mov rcx , rax sub rcx , rdx cmp rcx , hexvar jbe hexvar mov r13 , qword ptr [ rip + hexvar ] lea rcx , [ rdx + hexvar ] cmp rcx , r13 je hexvar mov rsi , qword ptr [ rip + hexvar ] mov rdi , rax lea rdx , [ rcx + rsi ] not rsi mov rcx , qword ptr [ rip + hexvar ] and rdx , rsi mov rsi , rdx sub rdi , rcx mov qword ptr [ rip + hexvar ] , rdx sub rsi , rcx cmp rsi , rdi jbe hexvar mov qword ptr [ rip + hexvar ] , rax mov rdx , rax mov qword ptr [ r13 + hexvar ] , rbp mov rdi , qword ptr [ rip + hexvar ] mov rsi , r14 mov qword ptr [ rip + hexvar ] , rdx movzx edx , byte ptr [ r13 ] mov qword ptr [ r13 + hexvar ] , r14 and edx , hexvar mov qword ptr [ r13 + num ] , r12 or edx , num mov qword ptr [ r13 + hexvar ] , rbx mov byte ptr [ r13 ] , dl mov rdx , r13 call hexvar pop rbx mov rax , r13 pop rbp pop r12 pop r13 pop r14 ret nop dword ptr [ rax ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar mov rdx , qword ptr [ rip + hexvar ] mov r13 , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rip + hexvar ] lea rcx , [ rdx + hexvar ] cmp rcx , r13 jne hexvar or byte ptr [ rip + hexvar ] , num jmp hexvar
mov rsi , qword ptr [ rdi ] test rsi , rsi je hexvar push r12 lea r12 , [ rip + hexvar ] push rbp push rbx mov rbx , rdi nop word ptr cs : [ rax + rax ] mov rdi , qword ptr [ rip + hexvar ] mov rdx , rbx call hexvar mov rbp , rax test rax , rax je hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar mov ecx , num mov rsi , rbp mov rdi , r12 repe cmpsb byte ptr [ rsi ] , byte ptr [ rdi ] seta al sbb al , num test al , al jne hexvar add rbx , hexvar mov rsi , qword ptr [ rbx ] test rsi , rsi jne hexvar pop rbx pop rbp pop r12 ret ret mov rbx , qword ptr [ rip + hexvar ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdx , rbp mov rdi , rax mov rsi , rbx xor eax , eax call hexvar
push rbp mov rbp , rdi push rbx sub rsp , num mov rdi , qword ptr [ rdi + hexvar ] test rdi , rdi je hexvar nop word ptr [ rax + rax ] mov rbx , qword ptr [ rdi ] call hexvar mov rdi , rbx test rbx , rbx jne hexvar mov rdi , qword ptr [ rbp + hexvar ] call hexvar mov rdi , rbp call hexvar add rsp , num mov rdi , rbp pop rbx pop rbp jmp hexvar
push r13 mov r13d , edi push r12 mov r12d , esi push rbp mov ebp , edx push rbx mov rbx , rcx sub rsp , num call hexvar mov dword ptr [ rip + hexvar ] , r13d mov dword ptr [ rip + hexvar ] , r12d mov dword ptr [ rip + hexvar ] , ebp mov qword ptr [ rip + hexvar ] , rbx mov qword ptr [ rip + hexvar ] , rax mov dword ptr [ rip + hexvar ] , num add rsp , num pop rbx pop rbp pop r12 pop r13 ret
,
,
,
,
,
,
,
push rbx sub rsp , hexvar lea rdi , [ rsp + hexvar ] call hexvar mov rbx , rax mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar mov rdi , rbx call hexvar test rbx , rbx je hexvar mov ecx , dword ptr [ rsp + hexvar ] mov rdi , qword ptr [ rip + hexvar ] mov rdx , rbx test ecx , ecx je hexvar lea rsi , [ rip + hexvar ] xor eax , eax call hexvar add rsp , hexvar pop rbx ret nop lea rsi , [ rip + hexvar ] xor eax , eax call hexvar add rsp , hexvar pop rbx ret
,
xor edx , edx jmp hexvar
,
,
,
push r13 mov r13d , edi push r12 push rbp push rbx sub rsp , hexvar lea rdi , [ rsp + hexvar ] lea rbp , [ rsp + hexvar ] call hexvar mov rdi , qword ptr [ rip + hexvar ] xor edx , edx xor esi , esi mov r12 , rax call hexvar mov rdi , rbp mov rsi , rax sub rsi , qword ptr [ rip + hexvar ] mov rbx , rax call hexvar mov rsi , qword ptr [ rip + hexvar ] mov rdx , rbx mov rdi , rbp sub rdx , rsi call hexvar mov qword ptr [ rip + hexvar ] , rbx lea rbx , [ rsp + hexvar ] mov rdi , rbx call hexvar xor esi , esi mov rcx , rbx mov rdx , rbp lea r8 , [ rip - hexvar ] mov edi , r13d call hexvar test rax , rax je hexvar mov esi , dword ptr [ rsp + hexvar ] mov rcx , rax lea rdx , [ rip + hexvar ] mov rdi , r12 xor eax , eax call hexvar mov rdi , rbp call hexvar mov rsi , qword ptr [ rip + hexvar ] mov edx , num mov rdi , rbx call hexvar mov rdi , rbx call hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
,
,
,
,
,
push rbx mov rbx , rdi mov rdi , rsi call hexvar mov rdi , rbx pop rbx mov qword ptr [ rip + hexvar ] , rax jmp hexvar
push rbp mov rbp , rdi mov edi , hexvar push rbx sub rsp , num call hexvar movdqa xmm0 , xmmword ptr [ rip + hexvar ] mov rbx , rax mov qword ptr [ rax + hexvar ] , rbp mov rax , qword ptr [ rip + hexvar ] movups xmmword ptr [ rbx + hexvar ] , xmm0 mov qword ptr [ rbx ] , rax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + num ] , rax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + hexvar ] , rax mov eax , dword ptr [ rip + hexvar ] mov dword ptr [ rbx + hexvar ] , eax mov eax , dword ptr [ rip + hexvar ] mov dword ptr [ rbx + hexvar ] , eax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + hexvar ] , rax mov eax , dword ptr [ rip + hexvar ] mov dword ptr [ rbx + hexvar ] , eax movzx eax , byte ptr [ rip + hexvar ] mov byte ptr [ rbx + hexvar ] , al mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbx + hexvar ] , rax call hexvar mov qword ptr [ rip + hexvar ] , - num mov qword ptr [ rbx + hexvar ] , rax call hexvar add rsp , num mov rax , rbx pop rbx pop rbp ret
,
,
,
,
,
sub rsp , num mov rsi , qword ptr [ rip + hexvar ] test rsi , rsi je hexvar mov rax , qword ptr [ rsi + hexvar ] test byte ptr [ rip + hexvar ] , hexvar je hexvar mov ecx , dword ptr [ rsi + hexvar ] test ecx , ecx je hexvar test rax , rax je hexvar mov edx , dword ptr [ rax + hexvar ] test edx , edx jne hexvar mov edi , num call hexvar mov rsi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rsi + hexvar ] nop dword ptr [ rax ] cmp qword ptr [ rip + hexvar ] , rsi mov qword ptr [ rip + hexvar ] , rax jae hexvar cmp qword ptr [ rip + hexvar ] , rsi ja hexvar lea rdi , [ rip + hexvar ] call hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar mov rax , qword ptr [ rip + hexvar ] lea rcx , [ rip + hexvar ] movzx edx , byte ptr [ rax ] cmp byte ptr [ rcx + rdx ] , num jne hexvar add rax , num nop word ptr [ rax + rax ] mov rdx , rax mov qword ptr [ rip + hexvar ] , rax add rax , num movzx edx , byte ptr [ rdx ] cmp byte ptr [ rcx + rdx ] , num je hexvar add rsp , num jmp hexvar mov qword ptr [ rip + hexvar ] , rsi mov qword ptr [ rip + hexvar ] , rsi jmp hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax xor eax , eax call hexvar jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push r12 mov r12d , edx push rbp mov rbp , rsi push rbx mov rbx , rdi mov rdi , rsi sub rsp , hexvar call hexvar xor r9d , r9d lea rsi , [ rbx + num ] mov rdx , rbp lea r8 , [ rsp + hexvar ] mov rcx , rax mov rdi , rbx call hexvar test rax , rax je hexvar mov rdx , qword ptr [ rsp + hexvar ] cmp qword ptr [ rdx ] , rax jne hexvar mov rcx , qword ptr [ rax ] mov qword ptr [ rdx ] , rcx test r12d , r12d je hexvar cmp qword ptr [ rbx + hexvar ] , rax jae hexvar cmp qword ptr [ rbx + hexvar ] , rax jbe hexvar mov qword ptr [ rbx + hexvar ] , rax mov qword ptr [ rbx + hexvar ] , rax nop dword ptr [ rax ] mov rax , qword ptr [ rax + hexvar ] add rsp , hexvar pop rbx pop rbp pop r12 ret nop dword ptr [ rax ] mov rsi , rax lea rdi , [ rbx + hexvar ] mov qword ptr [ rsp + num ] , rax call hexvar mov rax , qword ptr [ rsp + num ] jmp hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar
sub rsp , num mov rdi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rdi + num ] call qword ptr [ rax + hexvar ] mov qword ptr [ rip + hexvar ] , rax test rax , rax je hexvar lea rdx , [ rip + hexvar ] or byte ptr [ rip + hexvar ] , hexvar mov qword ptr [ rax + num ] , rdx mov byte ptr [ rip + hexvar ] , num add rsp , num ret call hexvar mov edi , eax call hexvar lea rdi , [ rip + hexvar ] mov rsi , rax xor eax , eax call hexvar
push rbx mov rbx , qword ptr [ rip + hexvar ] test rbx , rbx je hexvar mov edi , dword ptr [ rbx + hexvar ] test edi , edi je hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rcx , qword ptr [ rip + hexvar ] mov rdx , rax xor eax , eax mov esi , dword ptr [ rcx + hexvar ] mov rdi , qword ptr [ rcx + hexvar ] call hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rcx , qword ptr [ rip + hexvar ] mov rdx , rax xor eax , eax mov esi , dword ptr [ rcx + num ] mov rdi , qword ptr [ rcx ] call hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar mov rax , qword ptr [ rip + hexvar ] lea rcx , [ rip + hexvar ] movzx edx , byte ptr [ rax ] cmp byte ptr [ rcx + rdx ] , num jne hexvar add rax , num nop dword ptr [ rax + rax ] mov rdx , rax mov qword ptr [ rip + hexvar ] , rax add rax , num movzx edx , byte ptr [ rdx ] cmp byte ptr [ rcx + rdx ] , num je hexvar pop rbx jmp hexvar nop dword ptr [ rax ] lea rdi , [ rbx + hexvar ] call hexvar xor edx , edx mov qword ptr [ rbx + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov esi , dword ptr [ rax + hexvar ] test esi , esi sete dl or edx , dword ptr [ rax + hexvar ] mov dword ptr [ rax + hexvar ] , edx test byte ptr [ rip + hexvar ] , hexvar je hexvar mov rcx , qword ptr [ rax + hexvar ] test rcx , rcx je hexvar mov ecx , dword ptr [ rcx + hexvar ] test ecx , ecx jne hexvar test edx , edx jne hexvar mov edi , num call hexvar mov rax , qword ptr [ rip + hexvar ] nop word ptr [ rax + rax ] mov dword ptr [ rax + hexvar ] , num jmp hexvar nop dword ptr [ rax ] xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax xor eax , eax call hexvar jmp hexvar nop word ptr [ rax + rax ] mov edi , num call hexvar mov rax , qword ptr [ rip + hexvar ] jmp hexvar
push rbp push rbx sub rsp , hexvar mov rdx , qword ptr [ rip + hexvar ] movzx eax , byte ptr [ rdx ] cmp al , hexvar jne hexvar lea rax , [ rdx + num ] mov qword ptr [ rip + hexvar ] , rax movzx eax , byte ptr [ rdx + num ] cmp al , hexvar je hexvar call hexvar lea rdi , [ rsp + hexvar ] mov rbp , rax call hexvar mov rbx , rax test rax , rax je hexvar call hexvar test rbp , rbp jle hexvar movsxd rax , dword ptr [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , num cmp rax , rbp jle hexvar mov rax , rbp shl rax , num add rax , qword ptr [ rip + hexvar ] cmp qword ptr [ rax ] , num jne hexvar mov esi , ebp mov rdi , rbx call hexvar add rsp , hexvar mov rax , rbx pop rbx pop rbp ret nop dword ptr [ rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi xor ebx , ebx call hexvar mov rsi , rbp mov rdi , rax xor eax , eax call hexvar jmp hexvar nop dword ptr [ rax ] xor edi , edi xor ebx , ebx call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi xor ebx , ebx call hexvar mov rdi , rax xor eax , eax call hexvar jmp hexvar
push r12 mov r12d , esi push rbp mov rbp , rdi push rbx sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 test al , al je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 lea rbx , [ rsp + hexvar ] lea rcx , [ rsp + num ] mov esi , hexvar mov dword ptr [ rsp + num ] , hexvar lea rax , [ rsp + hexvar ] mov rdi , rbx mov dword ptr [ rsp + hexvar ] , hexvar mov qword ptr [ rsp + hexvar ] , rax lea rax , [ rsp + hexvar ] mov qword ptr [ rsp + hexvar ] , rax call hexvar mov rdx , rbx mov esi , r12d mov rdi , rbp call hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret
,
push rbp lea r8 , [ rip + hexvar ] push rbx mov ebx , edi sub rsp , hexvar mov rdi , qword ptr [ rip + hexvar ] cmp rdi , r8 je hexvar mov eax , dword ptr [ rdi + hexvar ] and eax , hexvar cmp eax , num je hexvar test ebx , ebx je hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar test rsi , rsi je hexvar cmp edx , num jbe hexvar mov edi , ebx mov edx , edx call hexvar mov rdi , qword ptr [ rip + hexvar ] add rsp , hexvar mov esi , ebx pop rbx pop rbp jmp hexvar nop dword ptr [ rax ] xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax xor eax , eax call hexvar test ebx , ebx jne hexvar add rsp , hexvar pop rbx pop rbp ret nop dword ptr [ rax ] mov edx , edx add rdx , rsi test rsi , rsi jne hexvar test ebx , ebx je hexvar mov esi , dword ptr [ rip + hexvar ] test esi , esi jne hexvar mov dword ptr [ rsp + hexvar ] , ecx call hexvar mov ecx , dword ptr [ rsp + hexvar ] test eax , eax je hexvar mov esi , ecx mov edi , ebx call hexvar test ebx , ebx je hexvar mov rdi , qword ptr [ rip + hexvar ] jmp hexvar nop add rsi , num cmp byte ptr [ rsi - num ] , num jne hexvar cmp rsi , rdx jne hexvar xor edx , edx xor esi , esi test ebx , ebx je hexvar jmp hexvar nop dword ptr [ rax ] mov dword ptr [ rsp + hexvar ] , ecx cmp rdi , r8 je hexvar mov rbp , qword ptr [ rdi ] lea rsi , [ rip + hexvar ] xor edi , edi mov edx , num call hexvar mov rdi , rax mov rsi , rbp xor eax , eax call hexvar test ebx , ebx je hexvar mov edx , dword ptr [ rip + hexvar ] mov rdi , qword ptr [ rip + hexvar ] mov ecx , dword ptr [ rsp + hexvar ] test edx , edx je hexvar jmp hexvar nop word ptr cs : [ rax + rax ] movsx esi , byte ptr [ rsi ] mov edi , ebx mov edx , ecx call hexvar mov rdi , qword ptr [ rip + hexvar ] jmp hexvar mov edx , ecx xor esi , esi mov edi , ebx call hexvar jmp hexvar
push rbx sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 test al , al je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar add rsp , hexvar pop rbx ret nop word ptr [ rax + rax ] lea rbx , [ rsp + hexvar ] lea rax , [ rsp + hexvar ] mov rdx , rdi mov esi , hexvar mov qword ptr [ rsp + hexvar ] , rax lea rcx , [ rsp + num ] lea rax , [ rsp + hexvar ] mov rdi , rbx mov dword ptr [ rsp + num ] , num mov dword ptr [ rsp + hexvar ] , hexvar mov qword ptr [ rsp + hexvar ] , rax call hexvar mov rdx , rbx xor esi , esi xor edi , edi call hexvar add rsp , hexvar pop rbx ret
,
push rbx mov rbx , rdi sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 test al , al je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 call hexvar lea rax , [ rsp + hexvar ] mov edx , num xor edi , edi mov qword ptr [ rsp + hexvar ] , rax lea rsi , [ rip + hexvar ] lea rax , [ rsp + hexvar ] mov dword ptr [ rsp + num ] , num mov dword ptr [ rsp + hexvar ] , hexvar mov qword ptr [ rsp + hexvar ] , rax call hexvar mov rdi , qword ptr [ rip + hexvar ] mov rsi , rax xor eax , eax call hexvar mov rdi , qword ptr [ rip + hexvar ] lea rdx , [ rsp + num ] mov rsi , rbx call hexvar mov rsi , qword ptr [ rip + hexvar ] mov edi , hexvar call hexvar mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar call hexvar mov edi , num call hexvar
cmp qword ptr [ rip + hexvar ] , num je hexvar push rbp push rbx mov rbx , rdi sub rsp , num call hexvar test eax , eax jne hexvar mov rdi , qword ptr [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , num test eax , eax je hexvar add rsp , num pop rbx pop rbp ret nop call hexvar jmp hexvar nop word ptr [ rax + rax ] ret call hexvar mov edi , eax call hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi mov rbp , rax call hexvar mov rdx , rbp mov rsi , rbx mov rdi , rax xor eax , eax call hexvar
,
,
,
push rbp lea rdx , [ rip + hexvar ] mov rbp , rsi xor eax , eax push rbx lea rsi , [ rip + hexvar ] sub rsp , hexvar mov ecx , dword ptr [ rip + hexvar ] lea rbx , [ rsp + hexvar ] mov rdi , rbx call hexvar mov rdi , rbx add dword ptr [ rip + hexvar ] , num call hexvar xor eax , eax lea rdi , [ rsp + num ] mov r8 , rbp mov rcx , rbx mov edx , hexvar lea rsi , [ rip + hexvar ] call hexvar cmp eax , - num je hexvar mov rdi , qword ptr [ rsp + num ] call hexvar lea rdx , [ rip + hexvar ] mov edi , hexvar lea rsi , [ rip + hexvar ] call hexvar call hexvar mov rdi , qword ptr [ rsp + num ] call hexvar mov dword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num add rsp , hexvar pop rbx pop rbp ret call hexvar mov edi , dword ptr [ rax ] call hexvar lea rdi , [ rip + hexvar ] mov rsi , rax xor eax , eax call hexvar
push rbp lea rdx , [ rip + hexvar ] mov rbp , rsi xor eax , eax push rbx lea rsi , [ rip + hexvar ] sub rsp , hexvar mov ecx , dword ptr [ rip + hexvar ] lea rbx , [ rsp + hexvar ] mov rdi , rbx call hexvar mov rdi , rbx add dword ptr [ rip + hexvar ] , num call hexvar xor eax , eax lea rdi , [ rsp + num ] mov r8 , rbp mov rcx , rbx mov edx , hexvar lea rsi , [ rip + hexvar ] call hexvar cmp eax , - num je hexvar mov rdi , qword ptr [ rsp + num ] call hexvar lea rdx , [ rip + hexvar ] mov edi , hexvar lea rsi , [ rip + hexvar ] call hexvar call hexvar mov rdi , qword ptr [ rsp + num ] call hexvar mov dword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num add rsp , hexvar pop rbx pop rbp ret call hexvar mov edi , dword ptr [ rax ] call hexvar lea rdi , [ rip + hexvar ] mov rsi , rax xor eax , eax call hexvar
,
,
,
,
,
,
,
push rbx mov edx , num mov ebx , edi sub rsp , hexvar test edi , edi je hexvar lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rcx , qword ptr [ rip + hexvar ] movzx edx , byte ptr [ rcx ] cmp dl , hexvar jne hexvar lea rdx , [ rcx + num ] mov qword ptr [ rip + hexvar ] , rdx movzx edx , byte ptr [ rcx + num ] movzx ecx , dl lea rdi , [ rip + hexvar ] cmp byte ptr [ rdi + rcx ] , num jne hexvar cmp dl , hexvar je hexvar test ebx , ebx lea rax , [ rip + hexvar ] lea rbx , [ rip + hexvar ] mov edx , num cmove rbx , rax lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax mov rsi , rbx xor eax , eax call hexvar call hexvar add rsp , hexvar pop rbx ret nop dword ptr [ rax ] lea rdi , [ rsp + hexvar ] call hexvar test rax , rax je hexvar mov rsi , rax lea rdi , [ rip + hexvar ] xor eax , eax test ebx , ebx jne hexvar call hexvar call hexvar add rsp , hexvar pop rbx ret nop word ptr [ rax + rax ] call hexvar jmp hexvar nop word ptr [ rax + rax ] lea rsi , [ rip + hexvar ] xor edi , edi call hexvar jmp hexvar
,
push r12 mov r12d , esi push rbp mov rbp , rdi push rbx sub rsp , hexvar cmp byte ptr [ rdi ] , hexvar jne hexvar cmp byte ptr [ rdi + num ] , num je hexvar mov rdi , rbp call hexvar mov rbx , rax test rax , rax je hexvar mov rdi , rbx call hexvar test eax , eax je hexvar test r12d , r12d je hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar test r12d , r12d je hexvar js hexvar mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar mov rdi , rbx call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test eax , eax jne hexvar jmp hexvar nop word ptr cs : [ rax + rax ] mov rdi , rbx mov esi , num call hexvar mov rbx , rax jmp hexvar nop word ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rsi , rbp mov rdi , rax xor eax , eax call hexvar call hexvar sub qword ptr [ rip + hexvar ] , num add rsp , hexvar pop rbx pop rbp pop r12 ret nop mov rbx , rsp mov rdi , rbx call hexvar lea rdx , [ rip + hexvar ] cmp rax , rdx je hexvar mov edx , dword ptr [ rip + hexvar ] test edx , edx jne hexvar xor edx , edx mov rsi , rbx mov rdi , rax call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov rdi , rbp call hexvar mov rbx , rax test rax , rax jne hexvar mov rdi , rbp call hexvar mov rbx , rax test byte ptr [ rip + hexvar ] , num je hexvar mov esi , hexvar mov edi , num call hexvar mov rdx , qword ptr [ rip + hexvar ] mov rdi , rbx mov qword ptr [ rax + hexvar ] , rbx mov rsi , rax mov qword ptr [ rax + hexvar ] , rdx call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rdi , rbx call hexvar jmp hexvar nop dword ptr [ rax ] mov rdi , rbx call hexvar jmp hexvar
,
,
,
xor edi , edi cmp dword ptr [ rip + hexvar ] , hexvar setne dil lea edi , [ rdi * num + num ] jmp hexvar
,
push rbp push rbx sub rsp , hexvar mov rdx , qword ptr [ rip + hexvar ] movzx eax , byte ptr [ rdx ] cmp al , hexvar jne hexvar lea rax , [ rdx + num ] mov qword ptr [ rip + hexvar ] , rax movzx eax , byte ptr [ rdx + num ] cmp al , hexvar je hexvar call hexvar lea rdi , [ rsp + hexvar ] mov rbp , rax call hexvar mov rbx , rax test rax , rax je hexvar call hexvar test rbp , rbp jle hexvar movsxd rax , dword ptr [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , num cmp rax , rbp jle hexvar mov rax , rbp shl rax , num add rax , qword ptr [ rip + hexvar ] cmp qword ptr [ rax ] , num jne hexvar mov esi , ebp mov rdi , rbx call hexvar add rsp , hexvar mov rax , rbx pop rbx pop rbp ret nop dword ptr [ rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi xor ebx , ebx call hexvar mov rsi , rbp mov rdi , rax xor eax , eax call hexvar jmp hexvar nop dword ptr [ rax ] xor edi , edi xor ebx , ebx call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi xor ebx , ebx call hexvar mov rdi , rax xor eax , eax call hexvar jmp hexvar
mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rip + hexvar ] , rax mov eax , dword ptr [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , eax jmp hexvar
,
,
,
push rbp mov ebp , edi push rbx sub rsp , num call hexvar test rax , rax je hexvar mov rbx , rax mov rax , qword ptr [ rip + hexvar ] cmp byte ptr [ rax ] , hexvar jne hexvar mov rdi , rbx add rax , num mov esi , ebp mov qword ptr [ rip + hexvar ] , rax call hexvar call hexvar add rsp , num mov rdi , rbx pop rbx pop rbp jmp hexvar nop dword ptr [ rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar call hexvar add rsp , num mov rdi , rbx pop rbx pop rbp jmp hexvar nop dword ptr [ rax + rax ] add rsp , num pop rbx pop rbp ret
,
,
,
,
,
,
,
push r12 mov r12d , esi push rbp mov rbp , rdi push rbx sub rsp , hexvar cmp byte ptr [ rdi ] , hexvar jne hexvar cmp byte ptr [ rdi + num ] , num je hexvar mov rdi , rbp call hexvar mov rbx , rax test rax , rax je hexvar mov rdi , rbx call hexvar test eax , eax je hexvar test r12d , r12d je hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar test r12d , r12d je hexvar js hexvar mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar mov rdi , rbx call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test eax , eax jne hexvar jmp hexvar nop word ptr cs : [ rax + rax ] mov rdi , rbx mov esi , num call hexvar mov rbx , rax jmp hexvar nop word ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rsi , rbp mov rdi , rax xor eax , eax call hexvar call hexvar sub qword ptr [ rip + hexvar ] , num add rsp , hexvar pop rbx pop rbp pop r12 ret nop mov rbx , rsp mov rdi , rbx call hexvar lea rdx , [ rip + hexvar ] cmp rax , rdx je hexvar mov edx , dword ptr [ rip + hexvar ] test edx , edx jne hexvar xor edx , edx mov rsi , rbx mov rdi , rax call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov rdi , rbp call hexvar mov rbx , rax test rax , rax jne hexvar mov rdi , rbp call hexvar mov rbx , rax test byte ptr [ rip + hexvar ] , num je hexvar mov esi , hexvar mov edi , num call hexvar mov rdx , qword ptr [ rip + hexvar ] mov rdi , rbx mov qword ptr [ rax + hexvar ] , rbx mov rsi , rax mov qword ptr [ rax + hexvar ] , rdx call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rdi , rbx call hexvar jmp hexvar nop dword ptr [ rax ] mov rdi , rbx call hexvar jmp hexvar
,
,
push r13 push r12 mov r12 , rdx push rbp push rbx mov rbx , rsi sub rsp , hexvar test rdi , rdi js hexvar mov rbp , rsp mov r13 , rdi mov rdi , rbp call hexvar mov rdx , rbp mov rsi , r12 mov rdi , rbx lea rcx , [ rip - hexvar ] call hexvar test eax , eax je hexvar mov rsi , qword ptr [ rsp + num ] lea r12 , [ rsp + hexvar ] lea rbx , [ r13 - num ] mov rdi , r12 imul rsi , r13 call hexvar test r13 , r13 je hexvar nop dword ptr [ rax + rax ] mov rsi , rbp mov rdi , r12 sub rbx , num call hexvar cmp rbx , - num jne hexvar mov rdi , rbp call hexvar mov rsi , qword ptr [ rip + hexvar ] mov edx , num mov rdi , r12 call hexvar mov rdi , r12 call hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret nop mov edx , num xor edi , edi lea rsi , [ rip + hexvar ] mov rbp , rsp call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar mov rdi , rbp call hexvar mov rdx , rbp mov rsi , r12 mov rdi , rbx lea rcx , [ rip - hexvar ] call hexvar test eax , eax jne hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdx , r12 mov rsi , rbx mov rdi , rax xor eax , eax call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret nop word ptr [ rax + rax ] lea r12 , [ rsp + hexvar ] xor esi , esi mov rdi , r12 call hexvar jmp hexvar
sub rsp , num mov esi , num call hexvar add rsp , num cdqe ret
,
,
,
lea rsi , [ rip - hexvar ] jmp hexvar
,
,
,
,
,
,
,
,
mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rip + hexvar ] , rax mov eax , dword ptr [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , eax jmp hexvar
,
,
,
,
,
,
,
push rbp push rbx sub rsp , num call hexvar lea rdi , [ rip + hexvar ] mov qword ptr [ rip + hexvar ] , rax lea rax , [ rip + hexvar ] mov qword ptr [ rip + hexvar ] , rax call hexvar lea rax , [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , rax call hexvar lea rax , [ rip + hexvar ] lea rdi , [ rip + hexvar ] mov qword ptr [ rip + hexvar ] , rax call hexvar lea rax , [ rip + hexvar ] lea rdi , [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , rax call hexvar call hexvar mov rbp , qword ptr [ rip + hexvar ] mov rbx , qword ptr [ rip + hexvar ] xor edx , edx movsxd rsi , dword ptr [ rip + hexvar ] lea rdi , [ rip + hexvar ] mov r8 , rbp mov rcx , rbx call hexvar mov r8 , rbp mov rcx , rbx xor edx , edx movsxd rsi , dword ptr [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar lea rdx , [ rip + hexvar ] lea rcx , [ rip + hexvar ] nop dword ptr [ rax ] add rdx , num mov byte ptr [ rcx + rax ] , num movzx eax , byte ptr [ rdx ] test al , al jne hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar mov byte ptr [ rip + hexvar ] , num add rsp , num pop rbx pop rbp ret
push rbp push rbx sub rsp , hexvar mov edx , dword ptr [ rip + hexvar ] test edx , edx je hexvar mov rbx , qword ptr [ rip + hexvar ] lea rdx , [ rip + hexvar ] movzx eax , byte ptr [ rbx ] cmp byte ptr [ rdx + rax ] , num mov rbp , rax jne hexvar nop word ptr [ rax + rax ] add rbx , num movzx eax , byte ptr [ rbx ] cmp byte ptr [ rdx + rax ] , num mov rbp , rax je hexvar mov byte ptr [ rbx ] , num mov rdi , rsp call hexvar mov qword ptr [ rip + hexvar ] , rax call hexvar xor esi , esi lea rdi , [ rip + hexvar ] call hexvar call hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar add rsp , hexvar pop rbx pop rbp ret nop dword ptr [ rax + rax ] xor ebp , ebp xor ebx , ebx jmp hexvar nop word ptr cs : [ rax + rax ] movsx esi , bpl mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp ret
,
,
,
,
,
push r15 push r14 mov r14 , r9 push r13 mov r13 , rdi push r12 mov r12d , r8d push rbp mov rbp , rdx lea rdx , [ rsi + num ] push rbx mov rbx , rsi sub rsp , hexvar mov qword ptr [ rsp + num ] , rcx mov rcx , rbp call hexvar cmp rax , qword ptr [ rbx + num ] mov r15 , rax mov eax , dword ptr [ rip + hexvar ] jae hexvar mov rcx , qword ptr [ rbx ] movsx ecx , byte ptr [ rcx + r15 ] cmp r12d , ecx je hexvar cmp r12d , hexvar sete cl test eax , eax je hexvar test cl , cl jne hexvar mov rdi , rbp call hexvar mov rdi , qword ptr [ rsp + num ] mov rsi , rax call hexvar test rax , rax je hexvar cmp qword ptr [ rax + hexvar ] , num jne hexvar lea rsi , [ rax + hexvar ] mov rdi , r14 call hexvar add rsp , hexvar mov rax , r15 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret lea rsi , [ rax + hexvar ] mov rdi , r14 call hexvar jmp hexvar nop cmp r13 , r15 je hexvar mov rax , qword ptr [ rbx ] cmp byte ptr [ rax + r15 - num ] , hexvar jne hexvar mov rdi , rbp call hexvar mov rdi , qword ptr [ rsp + num ] mov rsi , rax call hexvar test rax , rax jne hexvar nop word ptr [ rax + rax ] mov eax , dword ptr [ rsp + hexvar ] test eax , eax je hexvar mov rsi , rbp mov rdi , r14 call hexvar jmp hexvar nop dword ptr [ rax ] cmp r12d , hexvar jne hexvar mov esi , hexvar mov rdi , r14 call hexvar mov rsi , rbp mov rdi , r14 call hexvar cmp r13 , r15 je hexvar mov rax , qword ptr [ rbx ] cmp byte ptr [ rax + r15 - num ] , hexvar jne hexvar mov esi , hexvar mov rdi , r14 call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov edx , dword ptr [ rip + hexvar ] test edx , edx je hexvar test eax , eax je hexvar cmp r12d , hexvar sete cl test eax , eax je hexvar test cl , cl je hexvar add r15 , num jmp hexvar nop mov rdi , r14 mov esi , hexvar call hexvar mov rsi , rbp mov rdi , r14 call hexvar jmp hexvar
push r12 push rbp mov rbp , rdi push rbx sub rsp , hexvar call hexvar mov rbx , rsp mov r12 , rax mov rsi , rax mov rdi , rbx call hexvar mov rdx , r12 mov rsi , rbp mov rdi , rbx call hexvar mov rsi , qword ptr [ rip + hexvar ] xor edx , edx mov rdi , rbx call hexvar mov rdi , rbx call hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar pop rbx pop rbp pop r12 ret
,
push r15 push r14 mov r14 , r9 push r13 mov r13 , rdi push r12 mov r12d , r8d push rbp mov rbp , rdx lea rdx , [ rsi + num ] push rbx mov rbx , rsi sub rsp , hexvar mov qword ptr [ rsp + num ] , rcx mov rcx , rbp call hexvar cmp rax , qword ptr [ rbx + num ] mov r15 , rax mov eax , dword ptr [ rip + hexvar ] jae hexvar mov rcx , qword ptr [ rbx ] movsx ecx , byte ptr [ rcx + r15 ] cmp r12d , ecx je hexvar cmp r12d , hexvar sete cl test eax , eax je hexvar test cl , cl jne hexvar mov rdi , rbp call hexvar mov rdi , qword ptr [ rsp + num ] mov rsi , rax call hexvar test rax , rax je hexvar cmp qword ptr [ rax + hexvar ] , num jne hexvar lea rsi , [ rax + hexvar ] mov rdi , r14 call hexvar add rsp , hexvar mov rax , r15 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret lea rsi , [ rax + hexvar ] mov rdi , r14 call hexvar jmp hexvar nop cmp r13 , r15 je hexvar mov rax , qword ptr [ rbx ] cmp byte ptr [ rax + r15 - num ] , hexvar jne hexvar mov rdi , rbp call hexvar mov rdi , qword ptr [ rsp + num ] mov rsi , rax call hexvar test rax , rax jne hexvar nop word ptr [ rax + rax ] mov eax , dword ptr [ rsp + hexvar ] test eax , eax je hexvar mov rsi , rbp mov rdi , r14 call hexvar jmp hexvar nop dword ptr [ rax ] cmp r12d , hexvar jne hexvar mov esi , hexvar mov rdi , r14 call hexvar mov rsi , rbp mov rdi , r14 call hexvar cmp r13 , r15 je hexvar mov rax , qword ptr [ rbx ] cmp byte ptr [ rax + r15 - num ] , hexvar jne hexvar mov esi , hexvar mov rdi , r14 call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov edx , dword ptr [ rip + hexvar ] test edx , edx je hexvar test eax , eax je hexvar cmp r12d , hexvar sete cl test eax , eax je hexvar test cl , cl je hexvar add r15 , num jmp hexvar nop mov rdi , r14 mov esi , hexvar call hexvar mov rsi , rbp mov rdi , r14 call hexvar jmp hexvar
,
push r12 mov r12 , rsi push rbp push rbx mov rbx , rdi mov rdi , rsi call hexvar mov rdi , rbx mov rbp , rax mov rsi , rax call hexvar mov rdi , qword ptr [ rbx + num ] mov rdx , rbp add rdi , qword ptr [ rbx ] mov rsi , r12 call hexvar add qword ptr [ rbx + num ] , rbp pop rbx pop rbp pop r12 ret
,
,
push r13 push r12 mov r12 , rdx push rbp push rbx mov rbx , rsi sub rsp , hexvar test rdi , rdi js hexvar mov rbp , rsp mov r13 , rdi mov rdi , rbp call hexvar mov rdx , rbp mov rsi , r12 mov rdi , rbx lea rcx , [ rip - hexvar ] call hexvar test eax , eax je hexvar mov rsi , qword ptr [ rsp + num ] lea r12 , [ rsp + hexvar ] lea rbx , [ r13 - num ] mov rdi , r12 imul rsi , r13 call hexvar test r13 , r13 je hexvar nop dword ptr [ rax + rax ] mov rsi , rbp mov rdi , r12 sub rbx , num call hexvar cmp rbx , - num jne hexvar mov rdi , rbp call hexvar mov rsi , qword ptr [ rip + hexvar ] mov edx , num mov rdi , r12 call hexvar mov rdi , r12 call hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret nop mov edx , num xor edi , edi lea rsi , [ rip + hexvar ] mov rbp , rsp call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar mov rdi , rbp call hexvar mov rdx , rbp mov rsi , r12 mov rdi , rbx lea rcx , [ rip - hexvar ] call hexvar test eax , eax jne hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdx , r12 mov rsi , rbx mov rdi , rax xor eax , eax call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret nop word ptr [ rax + rax ] lea r12 , [ rsp + hexvar ] xor esi , esi mov rdi , r12 call hexvar jmp hexvar
push r12 push rbp mov rbp , rdi push rbx sub rsp , hexvar call hexvar mov rbx , rsp mov r12 , rax mov rsi , rax mov rdi , rbx call hexvar mov rdx , r12 mov rsi , rbp mov rdi , rbx call hexvar mov rsi , qword ptr [ rip + hexvar ] xor edx , edx mov rdi , rbx call hexvar mov rdi , rbx call hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar pop rbx pop rbp pop r12 ret
push r13 push r12 mov r12 , rdx push rbp push rbx mov rbx , rsi sub rsp , hexvar test rdi , rdi js hexvar mov rbp , rsp mov r13 , rdi mov rdi , rbp call hexvar mov rdx , rbp mov rsi , r12 mov rdi , rbx lea rcx , [ rip - hexvar ] call hexvar test eax , eax je hexvar mov rsi , qword ptr [ rsp + num ] lea r12 , [ rsp + hexvar ] lea rbx , [ r13 - num ] mov rdi , r12 imul rsi , r13 call hexvar test r13 , r13 je hexvar nop dword ptr [ rax + rax ] mov rsi , rbp mov rdi , r12 sub rbx , num call hexvar cmp rbx , - num jne hexvar mov rdi , rbp call hexvar mov rsi , qword ptr [ rip + hexvar ] mov edx , num mov rdi , r12 call hexvar mov rdi , r12 call hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret nop mov edx , num xor edi , edi lea rsi , [ rip + hexvar ] mov rbp , rsp call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar mov rdi , rbp call hexvar mov rdx , rbp mov rsi , r12 mov rdi , rbx lea rcx , [ rip - hexvar ] call hexvar test eax , eax jne hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdx , r12 mov rsi , rbx mov rdi , rax xor eax , eax call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret nop word ptr [ rax + rax ] lea r12 , [ rsp + hexvar ] xor esi , esi mov rdi , r12 call hexvar jmp hexvar
,
,
,
,
,
,
,
,
mov rax , qword ptr [ rdi + hexvar ] test rax , rax je hexvar push r13 push r12 push rbp push rbx sub rsp , num mov rbx , qword ptr [ rax ] test rbx , rbx je hexvar mov r12 , rdi lea r13 , [ rip + hexvar ] jmp hexvar nop word ptr [ rax + rax ] xor esi , esi mov edi , ebp call hexvar mov rdi , qword ptr [ rip + hexvar ] call hexvar mov rax , qword ptr [ rip + hexvar ] cmp qword ptr [ rax + hexvar ] , num mov qword ptr [ rax + hexvar ] , num jne hexvar mov rbx , qword ptr [ rbx + hexvar ] test rbx , rbx je hexvar mov esi , dword ptr [ rbx + hexvar ] mov rdi , r12 call hexvar call hexvar test eax , eax je hexvar mov dword ptr [ rip + hexvar ] , num xor ebp , ebp cmp qword ptr [ rbx + hexvar ] , num mov rdi , qword ptr [ rip + hexvar ] je hexvar test byte ptr [ rdi + hexvar ] , hexvar je hexvar mov eax , dword ptr [ rdi + hexvar ] test eax , eax jne hexvar call hexvar test eax , eax jne hexvar xor edx , edx xor esi , esi mov edi , ebp call hexvar jmp hexvar nop call hexvar mov rdi , qword ptr [ rip + hexvar ] mov ebp , eax test eax , eax je hexvar mov ebp , dword ptr [ rip + hexvar ] mov rdi , qword ptr [ rip + hexvar ] test ebp , ebp jne hexvar cmp rdi , r13 je hexvar mov ebp , dword ptr [ rdi + hexvar ] jmp hexvar nop dword ptr [ rax ] xor edx , edx test al , num jne hexvar nop word ptr cs : [ rax + rax ] shr eax , num add edx , num test al , num je hexvar cmp ebp , edx cmovl ebp , edx jmp hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax + rax ] xor ebp , ebp jmp hexvar nop word ptr [ rax + rax ] ret lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar
,
push r15 push r14 push r13 mov r13 , rdi push r12 push rbp mov rbp , rsi push rbx sub rsp , hexvar call hexvar xor esi , esi mov rdi , rbp mov r15d , dword ptr [ rip + hexvar ] mov r14 , rax mov r12d , eax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rsp ] , rax call hexvar mov rbx , rax mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov edx , eax test eax , eax je hexvar test r14d , r14d jne hexvar mov rdi , qword ptr [ rsp ] mov esi , r15d call hexvar add rsp , hexvar mov eax , r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret nop word ptr [ rax + rax ] mov edi , num call hexvar mov edx , hexvar mov rsi , rbx mov byte ptr [ rax ] , num mov rax , qword ptr [ rbx + hexvar ] mov rdi , qword ptr [ rip + hexvar ] mov qword ptr [ rax + hexvar ] , num call hexvar mov edx , num cmp qword ptr [ rbx ] , rbp jne hexvar mov rdi , rbp mov dword ptr [ rsp + hexvar ] , edx call hexvar mov edx , dword ptr [ rsp + hexvar ] mov qword ptr [ rbx ] , rax jmp hexvar nop word ptr [ rax + rax ] lea ebp , [ r14 + num ] mov dword ptr [ rsp + hexvar ] , edx mov rdi , rbp call hexvar mov rsi , r13 mov rdi , rax call hexvar mov rax , qword ptr [ rbx + hexvar ] mov edx , dword ptr [ rsp + hexvar ] add qword ptr [ rax + hexvar ] , rbp mov r12d , edx jmp hexvar
,
push r15 push r14 push r13 mov r13 , rdi push r12 push rbp mov rbp , rsi push rbx sub rsp , hexvar call hexvar xor esi , esi mov rdi , rbp mov r15d , dword ptr [ rip + hexvar ] mov r14 , rax mov r12d , eax mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rsp ] , rax call hexvar mov rbx , rax mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov edx , eax test eax , eax je hexvar test r14d , r14d jne hexvar mov rdi , qword ptr [ rsp ] mov esi , r15d call hexvar add rsp , hexvar mov eax , r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret nop word ptr [ rax + rax ] mov edi , num call hexvar mov edx , hexvar mov rsi , rbx mov byte ptr [ rax ] , num mov rax , qword ptr [ rbx + hexvar ] mov rdi , qword ptr [ rip + hexvar ] mov qword ptr [ rax + hexvar ] , num call hexvar mov edx , num cmp qword ptr [ rbx ] , rbp jne hexvar mov rdi , rbp mov dword ptr [ rsp + hexvar ] , edx call hexvar mov edx , dword ptr [ rsp + hexvar ] mov qword ptr [ rbx ] , rax jmp hexvar nop word ptr [ rax + rax ] lea ebp , [ r14 + num ] mov dword ptr [ rsp + hexvar ] , edx mov rdi , rbp call hexvar mov rsi , r13 mov rdi , rax call hexvar mov rax , qword ptr [ rbx + hexvar ] mov edx , dword ptr [ rsp + hexvar ] add qword ptr [ rax + hexvar ] , rbp mov r12d , edx jmp hexvar
push rbp mov ebp , esi xor esi , esi push rbx sub rsp , num call hexvar mov esi , ebp mov rdi , rax mov rbx , rax call hexvar add rsp , num mov rax , rbx pop rbx pop rbp ret
,
,
,
,
,
,
,
push rbp push rbx sub rsp , num nop word ptr cs : [ rax + rax ] call hexvar mov rbx , rax mov rax , qword ptr [ rip + hexvar ] mov rdi , rbx movzx ebp , byte ptr [ rax ] call hexvar mov rdi , rbx call hexvar mov dword ptr [ rax ] , num cmp bpl , hexvar je hexvar add rsp , num pop rbx pop rbp jmp hexvar nop dword ptr [ rax ] mov rax , qword ptr [ rip + hexvar ] lea rdx , [ rax + num ] mov qword ptr [ rip + hexvar ] , rdx movzx edx , byte ptr [ rax + num ] cmp dl , hexvar jne hexvar lea rdx , [ rax + num ] mov qword ptr [ rip + hexvar ] , rdx movzx edx , byte ptr [ rax + num ] cmp dl , hexvar jne hexvar add rsp , num pop rbx pop rbp jmp hexvar
,
push r13 mov r13 , rsi push r12 push rbp mov rbp , rdi mov rdi , rsi push rbx sub rsp , num call hexvar mov rdi , rbp mov r12 , rax call hexvar mov rdx , qword ptr [ r12 + num ] mov rbx , rax test rdx , rdx je hexvar mov rax , qword ptr [ rax + num ] test rax , rax je hexvar movdqu xmm0 , xmmword ptr [ rdx ] movups xmmword ptr [ rax ] , xmm0 movdqu xmm1 , xmmword ptr [ rdx + hexvar ] movups xmmword ptr [ rax + hexvar ] , xmm1 mov rdi , r13 call hexvar mov rdi , rbp mov rbx , rax call hexvar mov rdx , qword ptr [ rbx + hexvar ] mov rdi , rbp mov qword ptr [ rax + hexvar ] , rdx call hexvar mov rdi , r13 movzx ebx , byte ptr [ rax + hexvar ] call hexvar mov rdi , rbp and ebx , num mov r12d , ebx movzx ebx , byte ptr [ rax + hexvar ] call hexvar and ebx , hexvar or ebx , r12d mov byte ptr [ rax + hexvar ] , bl add rsp , num pop rbx pop rbp pop r12 pop r13 ret nop word ptr [ rax + rax ] mov rdi , qword ptr [ rax + num ] test rdi , rdi je hexvar call hexvar mov qword ptr [ rbx + num ] , num jmp hexvar mov edi , hexvar call hexvar mov qword ptr [ rbx + num ] , rax mov rdx , qword ptr [ r12 + num ] jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbx mov rbx , rdi call hexvar mov eax , dword ptr [ rax + hexvar ] test eax , eax jne hexvar pop rbx ret nop word ptr [ rax + rax ] mov rdi , rbx lea rsi , [ rip + hexvar ] pop rbx jmp hexvar
push rbx mov rbx , rdi call hexvar mov eax , dword ptr [ rax + hexvar ] test eax , eax jne hexvar pop rbx ret nop word ptr [ rax + rax ] mov rdi , rbx lea rsi , [ rip + hexvar ] pop rbx jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
test byte ptr [ rdi ] , num jne hexvar or byte ptr [ rdi + num ] , num jmp hexvar nop mov rax , qword ptr [ rip + hexvar ] cmp qword ptr [ rdi + num ] , rax je hexvar sub rsp , num call hexvar or byte ptr [ rax + num ] , num mov rdi , rax add rsp , num jmp hexvar nop word ptr cs : [ rax + rax ] mov rdi , qword ptr [ rdi + hexvar ] or byte ptr [ rdi + num ] , num jmp hexvar
push r12 push rbp push rbx mov r12 , qword ptr [ rdi + hexvar ] test r12 , r12 je hexvar mov rbx , qword ptr [ r12 + hexvar ] test rbx , rbx je hexvar mov rax , rbx pop rbx pop rbp pop r12 ret nop word ptr cs : [ rax + rax ] mov rax , qword ptr [ rdi + hexvar ] mov rbp , rdi mov rdi , qword ptr [ rax + num ] mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar lea rcx , [ rip + hexvar ] xor edx , edx mov rsi , rbp call hexvar mov rbx , rax mov rdi , rbx call hexvar cmp qword ptr [ rbp + hexvar ] , num je hexvar mov rsi , qword ptr [ rbp + hexvar ] mov rdi , rbx call hexvar mov qword ptr [ r12 + hexvar ] , rbx mov rax , rbx pop rbx pop rbp pop r12 ret nop word ptr [ rax + rax ] call hexvar mov rbx , rax test rax , rax je hexvar mov rdi , rax call hexvar lea rdx , [ rip + hexvar ] cmp rbp , rax je hexvar cmp rax , rdx je hexvar mov rax , qword ptr [ rbp + hexvar ] lea rcx , [ rip + hexvar ] xor edx , edx mov rsi , rbp mov rdi , qword ptr [ rax + num ] call hexvar mov rbx , rax jmp hexvar nop word ptr [ rax + rax ] mov rdi , rbx call hexvar or dword ptr [ rax + hexvar ] , hexvar jmp hexvar nop dword ptr [ rax ] cmp rax , rdx jne hexvar mov rsi , rbp mov rdi , rbx call hexvar lea rsi , [ rip + hexvar ] mov rdi , rbx call hexvar jmp hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar
,
,
,
,
,
,
,
,
,
mov rax , qword ptr [ rip + hexvar ] push rbx mov rbx , rdi mov qword ptr [ rdi + hexvar ] , rax call hexvar mov rdi , rbx mov rsi , rax call hexvar mov rsi , qword ptr [ rip + hexvar ] mov rdi , rbx pop rbx jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
push rbp push rbx sub rsp , hexvar mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rdi , qword ptr [ rax + num ] call hexvar cmp rax , qword ptr [ rip + hexvar ] je hexvar call hexvar mov rbx , rax call hexvar mov rdx , qword ptr [ rip + hexvar ] mov dword ptr [ rax + num ] , hexvar mov rdx , qword ptr [ rdx + hexvar ] mov rcx , qword ptr [ rdx + num ] mov qword ptr [ rax + hexvar ] , rbx mov qword ptr [ rax + hexvar ] , rcx mov qword ptr [ rdx + num ] , rbx lea rbp , [ rsp + num ] nop word ptr [ rax + rax ] mov edi , hexvar call hexvar mov esi , num lea rdi , [ rax + num ] mov rbx , rax call hexvar mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp ] , rbx mov rbp , rbx lea rdx , [ rax + num ] mov qword ptr [ rip + hexvar ] , rdx cmp byte ptr [ rax ] , hexvar je hexvar mov qword ptr [ rbx ] , num call hexvar mov rdx , qword ptr [ rsp + num ] sub qword ptr [ rip + hexvar ] , num mov dword ptr [ rax + num ] , hexvar mov qword ptr [ rax + hexvar ] , rdx add rsp , hexvar pop rbx pop rbp jmp hexvar nop dword ptr [ rax + rax ] mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rax + num ] call hexvar mov rbx , rax call hexvar cmp rbx , rax jne hexvar jmp hexvar nop dword ptr [ rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar add rsp , hexvar pop rbx pop rbp jmp hexvar
push rbp push rbx sub rsp , hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov rax , qword ptr [ rip + hexvar ] cmp byte ptr [ rax ] , hexvar je hexvar lea rsi , [ rip + hexvar ] xor edi , edi mov edx , num call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar call hexvar mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp ret nop dword ptr [ rax + rax ] add rax , num mov rsi , rsp xor edx , edx xor edi , edi mov qword ptr [ rip + hexvar ] , rax call hexvar movzx eax , byte ptr [ rsp + hexvar ] cmp al , num je hexvar cmp al , num je hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax xor eax , eax call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov rdi , rbx call hexvar mov rdi , rax mov rbp , rax call hexvar lea rdx , [ rip + hexvar ] cmp rax , rdx je hexvar lea rsi , [ rip + hexvar ] xor edi , edi mov edx , num call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar call hexvar mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp ret nop dword ptr [ rax + rax ] cmp byte ptr [ rsp + hexvar ] , num lea rsi , [ rdx + hexvar ] je hexvar mov rsi , qword ptr [ rip + hexvar ] mov rdi , rbp call hexvar mov rsi , qword ptr [ rsp + hexvar ] mov rdi , rbp call hexvar jmp hexvar
push rbx xor esi , esi mov rbx , rdi sub rsp , hexvar call hexvar test rax , rax je hexvar add rsp , hexvar pop rbx ret nop word ptr [ rax + rax ] mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar mov rdi , qword ptr [ rip + hexvar ] mov rsi , rbx mov rax , qword ptr [ rdi + num ] call qword ptr [ rax + hexvar ] test eax , eax jne hexvar mov rdi , rbx call hexvar mov rdi , rax mov qword ptr [ rsp + num ] , rax call hexvar mov rax , qword ptr [ rsp + num ] add rsp , hexvar pop rbx ret nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test rax , rax jne hexvar add rsp , hexvar mov rdi , rbx lea rcx , [ rip + hexvar ] xor edx , edx lea rsi , [ rip + hexvar ] pop rbx jmp hexvar
,
test byte ptr [ rdi ] , num jne hexvar or byte ptr [ rdi ] , hexvar ret nop dword ptr [ rax ] mov rax , qword ptr [ rip + hexvar ] cmp qword ptr [ rdi + num ] , rax je hexvar sub rsp , num call hexvar or byte ptr [ rax ] , hexvar add rsp , num ret nop mov rdi , qword ptr [ rdi + hexvar ] or byte ptr [ rdi ] , hexvar ret
,
,
,
push r12 push rbp push rbx mov rax , qword ptr [ rdi + hexvar ] mov rbx , rdi mov rdx , qword ptr [ rdi + hexvar ] mov rsi , qword ptr [ rax ] mov eax , dword ptr [ rdi + hexvar ] sub esi , dword ptr [ rdi ] sub esi , edx cmp eax , num je hexvar cmp eax , num jne hexvar test esi , esi jne hexvar pop rbx pop rbp pop r12 ret mov ebp , esi lea r12 , [ rdi + rdx + hexvar ] and ebp , num jne hexvar cmp dword ptr [ rip + hexvar ] , num jbe hexvar cmp esi , num jle hexvar sar esi , num mov rdi , r12 mov edx , num add r12 , num or esi , hexvar add ebp , num movsxd rsi , esi call hexvar nop mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar cmp dword ptr [ rip + hexvar ] , num je hexvar cmp dword ptr [ rip + hexvar ] , num jbe hexvar mov edx , num mov esi , hexvar mov rdi , r12 call hexvar movsxd rbp , ebp mov qword ptr [ rbx + hexvar ] , num add qword ptr [ rbx + hexvar ] , rbp pop rbx pop rbp pop r12 ret nop word ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov esi , dword ptr [ rbx + hexvar ] mov rdi , qword ptr [ rbx + hexvar ] mov rdx , rax pop rbx xor eax , eax pop rbp pop r12 jmp hexvar movsxd rcx , ebp xor eax , eax mov edx , eax add eax , num mov byte ptr [ r12 + rdx ] , num cmp eax , ebp jb hexvar add r12 , rcx sub esi , ebp jmp hexvar nop dword ptr [ rax ] mov edx , num mov esi , hexvar mov rdi , r12 call hexvar jmp hexvar
push r12 push rbp push rbx mov rax , qword ptr [ rdi + hexvar ] mov rbx , rdi mov rdx , qword ptr [ rdi + hexvar ] mov rsi , qword ptr [ rax ] mov eax , dword ptr [ rdi + hexvar ] sub esi , dword ptr [ rdi ] sub esi , edx cmp eax , num je hexvar cmp eax , num jne hexvar test esi , esi jne hexvar pop rbx pop rbp pop r12 ret mov ebp , esi lea r12 , [ rdi + rdx + hexvar ] and ebp , num jne hexvar cmp dword ptr [ rip + hexvar ] , num jbe hexvar cmp esi , num jle hexvar sar esi , num mov rdi , r12 mov edx , num add r12 , num or esi , hexvar add ebp , num movsxd rsi , esi call hexvar nop mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar cmp dword ptr [ rip + hexvar ] , num je hexvar cmp dword ptr [ rip + hexvar ] , num jbe hexvar mov edx , num mov esi , hexvar mov rdi , r12 call hexvar movsxd rbp , ebp mov qword ptr [ rbx + hexvar ] , num add qword ptr [ rbx + hexvar ] , rbp pop rbx pop rbp pop r12 ret nop word ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov esi , dword ptr [ rbx + hexvar ] mov rdi , qword ptr [ rbx + hexvar ] mov rdx , rax pop rbx xor eax , eax pop rbp pop r12 jmp hexvar movsxd rcx , ebp xor eax , eax mov edx , eax add eax , num mov byte ptr [ r12 + rdx ] , num cmp eax , ebp jb hexvar add r12 , rcx sub esi , ebp jmp hexvar nop dword ptr [ rax ] mov edx , num mov esi , hexvar mov rdi , r12 call hexvar jmp hexvar
,
,
,
,
,
push r15 push r14 push r13 mov r13d , edx push r12 mov r12 , rsi mov esi , num push rbp push rbx mov rbx , rdi sub rsp , num mov rbp , qword ptr [ rip + hexvar ] mov r14 , qword ptr [ rip + hexvar ] mov r15d , dword ptr [ rip + hexvar ] mov rdi , rbp call hexvar test r13d , r13d jne hexvar mov rdi , rbx call hexvar cmp rax , rbp je hexvar mov rsi , qword ptr [ rip + hexvar ] mov rdi , rbx call hexvar sub rsp , num mov r9 , r12 mov r8 , rbx push num xor ecx , ecx mov edx , num mov esi , num mov edi , num call hexvar mov rdi , rbx mov byte ptr [ rax ] , num call hexvar mov rsi , rbp mov rdi , rbx mov qword ptr [ rax + hexvar ] , r12 call hexvar add rsp , hexvar mov esi , r15d mov rdi , r14 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 jmp hexvar nop dword ptr [ rax + rax ] mov esi , r13d mov rdi , rbp call hexvar xor edx , edx xor esi , esi mov edi , r13d call hexvar mov rdi , rbx call hexvar cmp rax , rbp jne hexvar mov rdi , rbx call hexvar mov qword ptr [ rax + hexvar ] , num jmp hexvar
,
,
,
sub rsp , num mov rax , rdi mov r10d , esi mov r11 , rcx mov r9d , num cmp edx , num je hexvar mov r9d , num cmp edx , num je hexvar mov r9d , num cmp edx , num je hexvar test r8 , r8 je hexvar movzx ecx , byte ptr [ r8 ] cmp cl , hexvar je hexvar cmp cl , hexvar je hexvar cmp edx , num je hexvar cmp edx , num mov ecx , hexvar cmove r9d , ecx xor r8d , r8d mov rcx , r11 mov esi , r10d mov rdi , rax add rsp , num jmp hexvar nop word ptr [ rax + rax ] cmp edx , num je hexvar jbe hexvar cmp edx , num je hexvar cmp edx , num jne hexvar mov r9d , num jmp hexvar nop dword ptr [ rax ] cmp edx , num jne hexvar mov r9d , hexvar jmp hexvar nop dword ptr [ rax ] mov ecx , dword ptr [ rip + hexvar ] test ecx , ecx je hexvar cmp edx , num je hexvar cmp edx , num je hexvar cmp edx , num je hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar nop dword ptr [ rax ] mov rcx , qword ptr [ rip + hexvar ] lea rdi , [ rip + hexvar ] mov rsi , qword ptr [ rcx ] mov ecx , hexvar repe cmpsb byte ptr [ rsi ] , byte ptr [ rdi ] seta cl sbb cl , num test cl , cl jne hexvar jmp hexvar nop dword ptr [ rax + rax ] mov esi , dword ptr [ rip + hexvar ] test esi , esi je hexvar mov rcx , qword ptr [ rip + hexvar ] mov ecx , dword ptr [ rcx + hexvar ] and ecx , num cmp ecx , num sbb r9d , r9d and r9d , hexvar add r9d , hexvar jmp hexvar nop mov r9d , num jmp hexvar nop dword ptr [ rax + rax ] mov r9d , hexvar jmp hexvar nop dword ptr [ rax + rax ] mov r9d , hexvar jmp hexvar nop dword ptr [ rax + rax ] mov r9d , hexvar jmp hexvar nop dword ptr [ rax + rax ] mov r9d , hexvar jmp hexvar nop dword ptr [ rax + rax ] cmp edx , num je hexvar cmp edx , num mov ecx , hexvar cmove r9d , ecx jmp hexvar nop word ptr cs : [ rax + rax ] mov r9d , hexvar jmp hexvar nop dword ptr [ rax + rax ] mov r9d , hexvar jmp hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar mov r9d , num jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbx xor esi , esi mov rbx , rdi sub rsp , hexvar call hexvar test rax , rax je hexvar add rsp , hexvar pop rbx ret nop word ptr [ rax + rax ] mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar mov rdi , qword ptr [ rip + hexvar ] mov rsi , rbx mov rax , qword ptr [ rdi + num ] call qword ptr [ rax + hexvar ] test eax , eax jne hexvar mov rdi , rbx call hexvar mov rdi , rax mov qword ptr [ rsp + num ] , rax call hexvar mov rax , qword ptr [ rsp + num ] add rsp , hexvar pop rbx ret nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test rax , rax jne hexvar add rsp , hexvar mov rdi , rbx lea rcx , [ rip + hexvar ] xor edx , edx lea rsi , [ rip + hexvar ] pop rbx jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push r14 xor eax , eax push r13 push r12 push rbp push rbx mov r12 , qword ptr [ rdi + hexvar ] mov rbx , rdi sub r12 , qword ptr [ rdi + hexvar ] mov r13 , qword ptr [ rdi + num ] add rsi , r12 setb al add rsi , qword ptr [ rdi + hexvar ] setb dl test rax , rax jne hexvar movzx edx , dl test rdx , rdx je hexvar lea rax , [ rip + hexvar ] call qword ptr [ rax ] mov qword ptr [ rbx + num ] , num mov qword ptr [ num ] , r13 ud2 nop mov rax , r12 shr rax , num cmp qword ptr [ rdi ] , rsi lea rbp , [ rsi + rax + hexvar ] cmovae rsi , qword ptr [ rdi ] cmp rsi , rbp cmovae rbp , rsi mov rsi , rbp call hexvar mov r14 , rax test rax , rax je hexvar lea rsi , [ rax + rbp ] mov qword ptr [ rbx + num ] , rax mov rdx , r12 mov qword ptr [ rax + num ] , r13 mov qword ptr [ rbx + hexvar ] , rsi mov qword ptr [ rax ] , rsi mov rax , qword ptr [ rbx + hexvar ] mov rsi , qword ptr [ rbx + hexvar ] lea rbp , [ r14 + rax + hexvar ] not rax and rbp , rax mov rdi , rbp call hexvar test byte ptr [ rbx + hexvar ] , num jne hexvar mov rax , qword ptr [ rbx + hexvar ] lea rdx , [ r13 + rax + hexvar ] not rax and rax , rdx cmp qword ptr [ rbx + hexvar ] , rax je hexvar add r12 , rbp mov qword ptr [ rbx + hexvar ] , rbp mov qword ptr [ rbx + hexvar ] , r12 and byte ptr [ rbx + hexvar ] , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret nop mov rax , qword ptr [ r13 + num ] mov rsi , r13 mov rdi , rbx mov qword ptr [ r14 + num ] , rax call hexvar jmp hexvar
,
,
push r12 mov r12 , rdx push rbp mov rbp , rsi push rbx mov rbx , rdi mov rdi , rsi sub rsp , hexvar call hexvar lea rsi , [ rbx + num ] mov rdx , rbp mov rdi , rbx lea r9 , [ rsp + hexvar ] lea r8 , [ rsp + hexvar ] mov rcx , rax call hexvar test rax , rax je hexvar add rsp , hexvar lea rax , [ rip + hexvar ] pop rbx pop rbp pop r12 ret nop word ptr [ rax + rax ] mov r8 , qword ptr [ rbx + hexvar ] mov rcx , qword ptr [ rbx + hexvar ] mov rdx , r8 sub rdx , rcx cmp rdx , hexvar jbe hexvar mov rsi , qword ptr [ rbx + hexvar ] add rcx , hexvar mov qword ptr [ rbx + hexvar ] , rcx cmp rcx , rsi je hexvar mov rdi , qword ptr [ rbx + hexvar ] mov r10 , r8 lea rdx , [ rcx + rdi ] not rdi mov rcx , qword ptr [ rbx + hexvar ] and rdx , rdi mov rdi , rdx sub r10 , rcx mov qword ptr [ rbx + hexvar ] , rdx sub rdi , rcx cmp rdi , r10 jbe hexvar mov qword ptr [ rbx + hexvar ] , r8 mov rdx , r8 mov qword ptr [ rbx + hexvar ] , rdx mov rdx , qword ptr [ rsp + hexvar ] mov qword ptr [ rsi + hexvar ] , r12 mov qword ptr [ rsi + hexvar ] , rdx mov rdx , qword ptr [ rsp + hexvar ] mov qword ptr [ rsi + num ] , rbp mov rcx , qword ptr [ rdx ] mov qword ptr [ rsi ] , rcx mov qword ptr [ rdx ] , rsi add rsp , hexvar pop rbx pop rbp pop r12 ret nop dword ptr [ rax + rax ] lea rdi , [ rbx + hexvar ] mov esi , hexvar mov qword ptr [ rsp + num ] , rax call hexvar mov rcx , qword ptr [ rbx + hexvar ] mov r8 , qword ptr [ rbx + hexvar ] mov rax , qword ptr [ rsp + num ] jmp hexvar nop dword ptr [ rax ] or byte ptr [ rbx + hexvar ] , num jmp hexvar
,
sub rsp , num movsxd rsi , dword ptr [ rip + hexvar ] mov r8 , qword ptr [ rip + hexvar ] xor edx , edx mov rcx , qword ptr [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar lea rax , [ rip + hexvar ] mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , rax add rsp , num ret
or byte ptr [ rdi + hexvar ] , num mov qword ptr [ rdi + hexvar ] , rcx mov qword ptr [ rdi + hexvar ] , r8 mov qword ptr [ rdi + hexvar ] , r9 jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov rcx , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - num ] mov rdx , - num mov rsi , rcx mov edi , eax call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - num ] mov r8 , - num mov edi , eax call hexvar leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov eax , esi mov byte ptr [ rbp - hexvar ] , al movsx edx , byte ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , - num mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar mov rdi , qword ptr [ rbp - num ] xor rdi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax lea rax , [ rbp - hexvar ] mov edx , num mov esi , hexvar mov rdi , rax call hexvar lea rdx , [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , - num mov edi , eax call hexvar mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar lea rdx , [ rax + num ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num sete al movzx eax , al add qword ptr [ rbp - num ] , rax mov ecx , num mov rax , qword ptr [ rbp - num ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar movabs rax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] cmp qword ptr [ rbp - num ] , rax jb hexvar call hexvar mov rax , qword ptr [ rbp - num ] shr rax , num mov rdx , rax mov rax , qword ptr [ rbp - num ] add rax , rdx add rax , num mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov rcx , rax mov rax , qword ptr [ rbp - num ] mov rdx , rax mov esi , num mov rdi , rcx call hexvar leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov ecx , num mov rax , qword ptr [ rbp - hexvar ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] cmp qword ptr [ rbp - hexvar ] , rax jne hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] test rax , rax je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] mov rax , qword ptr [ rax ] jmp hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] test rax , rax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] jmp hexvar add qword ptr [ rbp - hexvar ] , hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] cmp qword ptr [ rbp - hexvar ] , rax jb hexvar mov eax , num leave ret
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx cmp qword ptr [ rbp - hexvar ] , num je hexvar mov edi , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + num ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + num ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar call hexvar mov rax , qword ptr [ rbp - num ] cmp rax , qword ptr [ rbp - hexvar ] je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar jmp hexvar nop leave ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov rcx , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - num ] mov rdx , - num mov rsi , rcx mov edi , eax call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rsi , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov r8 , rsi mov rsi , rax mov edi , num call hexvar leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov eax , esi mov byte ptr [ rbp - hexvar ] , al movsx edx , byte ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , - num mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar mov rdi , qword ptr [ rbp - num ] xor rdi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov eax , edx mov byte ptr [ rbp - hexvar ] , al mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax movsx ecx , byte ptr [ rbp - hexvar ] lea rax , [ rbp - hexvar ] mov edx , num mov esi , ecx mov rdi , rax call hexvar lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov rsi , qword ptr [ rbp - num ] xor rsi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar lea rax , [ rip + hexvar ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov ecx , num mov rax , qword ptr [ rbp - hexvar ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov ecx , num mov rax , qword ptr [ rbp - num ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar mov rax , qword ptr [ rbp - num ] imul rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar call hexvar mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rsp + hexvar ] , rax xor eax , eax lea rax , [ rsp + hexvar ] mov rdi , rax call hexvar mov dword ptr [ rsp + hexvar ] , eax cmp dword ptr [ rsp + hexvar ] , num je hexvar mov eax , dword ptr [ rsp + hexvar ] jmp hexvar mov eax , dword ptr [ rsp + hexvar ] movsxd rdx , eax mov rax , rdx add rax , rax add rax , rdx shl rax , num mov rdx , rax lea rax , [ rip ] mov rax , qword ptr [ rdx + rax ] test rax , rax je hexvar mov eax , dword ptr [ rsp + hexvar ] movsxd rdx , eax mov rax , rdx add rax , rax add rax , rdx shl rax , num mov rdx , rax lea rax , [ rip ] mov rax , qword ptr [ rdx + rax ] call rax mov dword ptr [ rsp + hexvar ] , eax cmp dword ptr [ rsp + hexvar ] , num je hexvar mov eax , dword ptr [ rsp + hexvar ] jmp hexvar mov eax , dword ptr [ rsp + hexvar ] movsxd rdx , eax mov rax , rdx add rax , rax add rax , rdx shl rax , num add rax , rdx shl rax , num mov rdx , rax lea rax , [ rip ] mov rax , qword ptr [ rdx + rax ] test rax , rax je hexvar mov eax , dword ptr [ rsp + hexvar ] movsxd rdx , eax mov rax , rdx add rax , rax add rax , rdx shl rax , num add rax , rdx shl rax , num mov rdx , rax lea rax , [ rip ] mov rax , qword ptr [ rdx + rax ] call rax mov dword ptr [ rsp + hexvar ] , eax cmp dword ptr [ rsp + hexvar ] , num je hexvar mov eax , dword ptr [ rsp + hexvar ] jmp hexvar mov eax , num mov rcx , qword ptr [ rsp + hexvar ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar add rsp , hexvar ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rip + hexvar ] mov rbx , qword ptr [ rax ] lea rdi , [ rip + hexvar ] call hexvar mov rsi , rbx mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num jmp hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] lea rcx , [ rdx + rax ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rcx mov rdi , rax call hexvar test eax , eax je hexvar mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] lea rsi , [ rip + hexvar ] mov rdi , rax mov eax , num call hexvar mov rax , qword ptr [ rbp - hexvar ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] lea rsi , [ rip + hexvar ] mov rdi , rax mov eax , num call hexvar add qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov rax , qword ptr [ rax ] test rax , rax jne hexvar mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] mov rsi , rax mov edi , hexvar call hexvar nop add rsp , hexvar pop rbx pop rbp ret
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx cmp qword ptr [ rbp - hexvar ] , - num jne hexvar lea rdi , [ rip + hexvar ] call hexvar jmp hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov rbx , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov esi , num mov edi , num call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov r8 , rbx mov rcx , rdx mov rdx , rax mov esi , num mov edi , num mov eax , num call hexvar nop add rsp , hexvar pop rbx pop rbp ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rax mov edi , num call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - num ] mov r8 , - num mov edi , eax call hexvar leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov edx , hexvar mov rsi , rcx mov rdi , rax call hexvar leave ret
,
,
,
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx cmp qword ptr [ rbp - hexvar ] , - num jne hexvar lea rdi , [ rip + hexvar ] call hexvar jmp hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov rbx , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov esi , num mov edi , num call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov r8 , rbx mov rcx , rdx mov rdx , rax mov esi , num mov edi , num mov eax , num call hexvar nop add rsp , hexvar pop rbx pop rbp ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar lea rdx , [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , - num mov edi , eax call hexvar mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax lea rax , [ rbp - hexvar ] mov edx , num mov esi , hexvar mov rdi , rax call hexvar lea rdx , [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , - num mov edi , eax call hexvar mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar lea rax , [ rip + hexvar ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov ecx , num mov rax , qword ptr [ rbp - hexvar ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov edi , hexvar call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] lea rdx , [ rip - hexvar ] mov qword ptr [ rax + num ] , rdx mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov ecx , num mov rax , qword ptr [ rbp - hexvar ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al jne hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar call hexvar mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num js hexvar cmp dword ptr [ rbp - hexvar ] , num jg hexvar mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num jns hexvar call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax mov eax , num jmp hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar test eax , eax jne hexvar mov rdx , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rsi , rdx mov edi , eax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax mov eax , num jmp hexvar mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi cmp dword ptr [ rbp - hexvar ] , num js hexvar cmp dword ptr [ rbp - hexvar ] , num jg hexvar mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar mov dword ptr [ rbp - num ] , eax call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - num ] , eax mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar call hexvar mov rdx , rax mov eax , dword ptr [ rbp - num ] mov dword ptr [ rdx ] , eax mov eax , dword ptr [ rbp - num ] mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax lea rax , [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov dword ptr [ rax + num ] , edx call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp mov rax , qword ptr [ rip + hexvar ] lea rcx , [ rax + hexvar ] mov rax , qword ptr [ rip + hexvar ] lea rdx , [ rip + hexvar ] mov rsi , rcx mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov qword ptr [ rip + hexvar ] , num nop pop rbp ret
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rip + hexvar ] test rax , rax jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov edx , eax mov rax , qword ptr [ rip + hexvar ] mov eax , dword ptr [ rax ] sub eax , num and eax , edx mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov edx , dword ptr [ rbp - hexvar ] shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax jmp hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + num ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test eax , eax je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar jmp hexvar nop cmp qword ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] jmp hexvar mov eax , num leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax lea rax , [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov dword ptr [ rax + num ] , edx call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar mov dword ptr [ rbp - num ] , eax cmp dword ptr [ rbp - num ] , num js hexvar mov rax , qword ptr [ rip + hexvar ] mov edx , dword ptr [ rbp - num ] movsxd rdx , edx shl rdx , num add rax , rdx mov rax , qword ptr [ rax ] jmp hexvar mov eax , num leave ret
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar add eax , num cdqe mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num je hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar cmp qword ptr [ rbp - hexvar ] , num jne hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] leave ret
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rbp - hexvar ] , eax lea rax , [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov dword ptr [ rax + num ] , edx call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] add rax , hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi jmp hexvar add qword ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - num ] movzx eax , byte ptr [ rax ] test al , al jne hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar nop leave ret
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rax mov edi , num call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - num ] mov r8 , - num mov edi , eax call hexvar leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov edx , hexvar mov rsi , rcx mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar lea rdx , [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , - num mov edi , eax call hexvar mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov eax , edx mov byte ptr [ rbp - hexvar ] , al mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax movsx ecx , byte ptr [ rbp - hexvar ] lea rax , [ rbp - hexvar ] mov edx , num mov esi , ecx mov rdi , rax call hexvar lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov rsi , qword ptr [ rbp - num ] xor rsi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar lea rax , [ rip + hexvar ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov ecx , num mov rax , qword ptr [ rbp - hexvar ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov rcx , rax mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rax mov rdi , rcx call hexvar leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov ecx , num mov rax , qword ptr [ rbp - hexvar ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push r15 push r14 push r13 mov r13 , rsi lea rsi , [ rip + hexvar ] push r12 mov r12 , rdx mov edx , num push rbp push rbx mov rbx , rdi xor edi , edi sub rsp , num call hexvar mov rbp , qword ptr [ rbx ] mov r14 , rax mov rdi , rbp call hexvar mov rdi , r12 mov r15 , rax call hexvar mov edx , dword ptr [ rbx + hexvar ] add rax , r15 lea r15 , [ rax + num ] test edx , edx je hexvar cmp qword ptr [ rbx + hexvar ] , num jne hexvar mov rdi , r15 call hexvar mov r13 , rax test rax , rax je hexvar mov r8 , r12 mov rcx , rbp lea rdx , [ rip + hexvar ] mov rsi , r15 mov rdi , r13 xor eax , eax call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov rdi , r15 call hexvar mov r13 , rax test rax , rax je hexvar mov r8 , r12 mov rcx , rbp lea rdx , [ rip + hexvar ] mov rsi , r15 mov rdi , r13 xor eax , eax call hexvar add rsp , num mov rax , r13 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret mov r15 , qword ptr [ r13 ] lea rbx , [ rax + num ] test r15 , r15 je hexvar mov rdi , r15 call hexvar add rbx , rax mov rdi , rbx call hexvar mov r9 , r12 mov r8 , r15 mov r13 , rax test rax , rax je hexvar mov rcx , rbp lea rdx , [ rip + hexvar ] mov rsi , rbx mov rdi , r13 xor eax , eax call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rdi , r14 call hexvar add rbx , rax mov rdi , rbx call hexvar mov r9 , r12 mov r8 , r14 mov r13 , rax test rax , rax jne hexvar nop dword ptr [ rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi xor r13d , r13d call hexvar mov rdi , rax xor eax , eax call hexvar jmp hexvar
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rdi push rbx sub rsp , num call hexvar lea rbx , [ rax + num ] mov rdi , rbx call hexvar add rsp , num mov rdx , rbx mov rsi , rbp pop rbx mov rdi , rax pop rbp jmp hexvar
test rdi , rdi push rbx mov eax , num mov rbx , rdi cmove rbx , rax mov rdi , rbx call hexvar test rax , rax je hexvar pop rbx ret mov rdi , rbx call hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push r12 mov r12d , edi push rbp mov rbp , rdx push rbx mov rbx , rsi sub rsp , hexvar test edi , edi jle hexvar mov esi , edi xor eax , eax lea rdi , [ rip + hexvar ] call hexvar cmp rbx , rbp jae hexvar and r12d , num jne hexvar mov rdi , rbx lea rsi , [ rsp + hexvar ] xor edx , edx mov rcx , rbp call hexvar mov edx , dword ptr [ rsp + hexvar ] lea rdi , [ rip + hexvar ] mov rsi , rax add rbx , rdx mov rdx , rax xor eax , eax call hexvar cmp rbx , rbp ja hexvar add rsp , hexvar mov rax , rbx pop rbx pop rbp pop r12 ret nop word ptr cs : [ rax + rax ] mov r12 , rbp mov rsi , qword ptr [ rip + hexvar ] mov edi , hexvar sub r12 , rbx sub r12 , num call hexvar test r12 , r12 jne hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi mov rbx , rbp call hexvar mov rdi , rax xor eax , eax call hexvar lea rdi , [ rip + hexvar ] call hexvar jmp hexvar nop xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax xor eax , eax call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rsi , rbx mov edi , r12d call hexvar mov rdi , rbx mov rsi , r12 call hexvar lea rbx , [ rbx + rax + num ] jmp hexvar lea rcx , [ rip + hexvar ] mov edx , hexvar lea rsi , [ rip + hexvar ] lea rdi , [ rip + hexvar ] call hexvar
,
,
,
,
,
,
,
,
,
,
,
,
push r12 mov r12 , rdi push rbp lea rbp , [ rip + hexvar ] push rbx xor ebx , ebx mov eax , ebx movzx eax , byte ptr [ r12 + rax ] test al , al je hexvar sub eax , hexvar add ebx , num cmp al , hexvar ja hexvar movzx eax , al movsxd rax , dword ptr [ rbp + rax * num ] add rax , rbp jmp rax nop word ptr cs : [ rax + rax ] mov dword ptr [ rip + hexvar ] , num mov dword ptr [ rip + hexvar ] , num mov eax , ebx movzx eax , byte ptr [ r12 + rax ] test al , al jne hexvar pop rbx pop rbp pop r12 ret nop dword ptr [ rax ] mov dword ptr [ rip + hexvar ] , num jmp hexvar nop dword ptr [ rax ] mov dword ptr [ rip + hexvar ] , num jmp hexvar nop dword ptr [ rax ] mov dword ptr [ rip + hexvar ] , num jmp hexvar nop word ptr [ rax + rax ] mov dword ptr [ rip + hexvar ] , num jmp hexvar nop mov dword ptr [ rip + hexvar ] , num jmp hexvar nop mov dword ptr [ rip + hexvar ] , num jmp hexvar nop mov dword ptr [ rip + hexvar ] , num jmp hexvar nop or dword ptr [ rip + hexvar ] , num jmp hexvar nop dword ptr [ rax ] mov dword ptr [ rip + hexvar ] , num jmp hexvar nop mov dword ptr [ rip + hexvar ] , num jmp hexvar nop mov dword ptr [ rip + hexvar ] , num jmp hexvar nop mov dword ptr [ rip + hexvar ] , num jmp hexvar nop mov dword ptr [ rip + hexvar ] , num jmp hexvar nop mov dword ptr [ rip + hexvar ] , num jmp hexvar nop mov dword ptr [ rip + hexvar ] , num jmp hexvar nop mov dword ptr [ rip + hexvar ] , num jmp hexvar nop or dword ptr [ rip + hexvar ] , num jmp hexvar nop dword ptr [ rax ] mov dword ptr [ rip + hexvar ] , num jmp hexvar nop mov dword ptr [ rip + hexvar ] , num jmp hexvar nop xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rsi , r12 mov rdi , rax xor eax , eax call hexvar jmp hexvar
push r12 xor eax , eax push rbp push rbx mov ebx , dword ptr [ rdi + hexvar ] cmp ebx , esi ja hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar cmp eax , esi jb hexvar lea eax , [ rsi + num ] mov dword ptr [ rdi + hexvar ] , eax test eax , eax je hexvar mov r12d , esi mov rbp , rdi cmp eax , hexvar ja hexvar mov esi , eax mov rdi , qword ptr [ rdi + hexvar ] add rsi , rsi call hexvar mov esi , dword ptr [ rbp + hexvar ] mov rdi , qword ptr [ rbp + hexvar ] mov qword ptr [ rbp + hexvar ] , rax shl rsi , num call hexvar mov rcx , qword ptr [ rbp + hexvar ] mov qword ptr [ rbp + hexvar ] , rax test rcx , rcx je hexvar cmp ebx , dword ptr [ rbp + hexvar ] jae hexvar nop word ptr [ rax + rax ] mov edx , ebx mov esi , hexvar add ebx , num mov word ptr [ rcx + rdx * num ] , si mov dword ptr [ rax + rdx * num ] , num cmp dword ptr [ rbp + hexvar ] , ebx ja hexvar mov eax , num pop rbx pop rbp pop r12 ret nop dword ptr [ rax ] lea rsi , [ rip + hexvar ] mov edx , num xor edi , edi call hexvar mov esi , r12d mov rdi , rax xor eax , eax call hexvar mov dword ptr [ rbp + hexvar ] , num pop rbx mov eax , hexvar pop rbp pop r12 ret nop dword ptr [ rax ] mov ebx , dword ptr [ rbp + hexvar ] lea rsi , [ rip + hexvar ] mov edx , num xor edi , edi call hexvar mov esi , ebx jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
mov rax , - num xor edx , edx div rsi cmp rax , rdi jbe hexvar imul rdi , rsi jmp hexvar push rbx mov edx , num mov rbx , rdi lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , qword ptr [ rip + hexvar ] mov rdx , rbx mov rsi , rax xor eax , eax call hexvar mov edi , num call hexvar
,
,
push r14 xor eax , eax mov r14 , rdx mov ecx , hexvar push r13 mov r13 , rdi push r12 push rbp mov rbp , rsi push rbx sub rsp , hexvar mov rsi , qword ptr [ rdx ] mov rdx , qword ptr [ rdi ] mov qword ptr [ rsp + hexvar ] , num mov rbx , rsp mov qword ptr [ rsp + hexvar ] , num lea rdi , [ rbx + hexvar ] rep stosq qword ptr [ rdi ] , rax mov rdi , rbp mov dword ptr [ rsp + num ] , esi mov qword ptr [ rsp ] , rdx mov dword ptr [ rsp + hexvar ] , ebp call hexvar mov edx , hexvar lea rsi , [ rip + hexvar ] mov rdi , rbx mov r12 , rax call hexvar mov ecx , dword ptr [ rsp + num ] test ecx , ecx jne hexvar jmp hexvar nop dword ptr [ rax + rax ] mov eax , dword ptr [ rsp + hexvar ] mov rcx , rbp mov esi , num mov rdi , rbx sub rcx , rax mov rax , rcx add rax , r12 mov qword ptr [ rsp + hexvar ] , rax call hexvar cmp eax , num jne hexvar mov rdi , rbx call hexvar mov edx , dword ptr [ rsp + num ] test edx , edx je hexvar test eax , eax je hexvar mov rdi , r12 call hexvar mov qword ptr [ r13 ] , num xor eax , eax add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret nop word ptr [ rax + rax ] mov rdi , rbx call hexvar or eax , dword ptr [ rsp + hexvar ] jne hexvar mov qword ptr [ r13 ] , r12 mov eax , num mov qword ptr [ r14 ] , rbp add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret
push rbp push rbx sub rsp , num test rdi , rdi je hexvar mov rbx , rdi mov rbp , rsi test rsi , rsi je hexvar mov rsi , rbp mov rdi , rbx call hexvar test rax , rax je hexvar add rsp , num pop rbx pop rbp ret nop dword ptr [ rax ] mov ebp , num mov ebx , num jmp hexvar mov rdi , rbx imul rdi , rbp call hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push r12 push rbp mov rbp , rdi push rbx movsxd rbx , esi lea r12 , [ rbx + num ] mov rdi , r12 call hexvar test rax , rax je hexvar xor edx , edx test rbx , rbx je hexvar nop word ptr [ rax + rax ] movzx ecx , byte ptr [ rbp + rdx ] mov byte ptr [ rax + rdx ] , cl add rdx , num cmp rbx , rdx jne hexvar mov byte ptr [ rax + rbx + num ] , num mov rsi , r12 mov rdi , rax mov byte ptr [ rax + rbx ] , num call hexvar test rax , rax je hexvar mov dword ptr [ rax + hexvar ] , num pop rbx pop rbp pop r12 ret lea rdi , [ rip + hexvar ] call hexvar lea rdi , [ rip + hexvar ] call hexvar
,
,
,
,
,
push r12 mov r12 , rdi mov edi , hexvar push rbp mov ebp , esi push rbx call hexvar test rax , rax je hexvar mov dword ptr [ rax + hexvar ] , ebp lea edi , [ rbp + num ] mov rbx , rax movsxd rdi , edi call hexvar mov qword ptr [ rbx + num ] , rax test rax , rax je hexvar mov dword ptr [ rbx + hexvar ] , num mov rsi , r12 mov rdi , rbx call hexvar mov rax , rbx pop rbx pop rbp pop r12 ret lea rdi , [ rip + hexvar ] call hexvar
push rbp push rbx sub rsp , num mov rbp , qword ptr [ rip + hexvar ] test rbp , rbp jne hexvar jmp hexvar nop dword ptr [ rax ] call hexvar mov qword ptr [ rbx ] , num call hexvar mov rax , qword ptr [ rip + hexvar ] lea rbx , [ rbp + rax * num ] mov rdi , qword ptr [ rbx ] test rdi , rdi jne hexvar mov rdi , rbp call hexvar xor eax , eax mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num mov dword ptr [ rip + hexvar ] , num mov dword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num add rsp , num pop rbx pop rbp ret
mov eax , dword ptr [ rip + hexvar ] push r12 mov r12 , rsi push rbp mov rbp , rdi push rbx mov ebx , edx cmp eax , num ja hexvar mov ecx , eax lea rdx , [ rip + hexvar ] mov esi , dword ptr [ rip + hexvar ] mov qword ptr [ rdx + rcx * num ] , r12 lea rdx , [ rip + hexvar ] mov dword ptr [ rdx + rcx * num ] , esi movzx edx , byte ptr [ rip + hexvar ] lea rsi , [ rip + hexvar ] shr dl , num and edx , num mov dword ptr [ rsi + rcx * num ] , edx mov rdx , qword ptr [ rip + hexvar ] test rdx , rdx je hexvar mov rsi , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rdx + rsi * num ] lea rsi , [ rip + hexvar ] and ebx , num mov rdi , rbp add eax , num mov qword ptr [ rsi + rcx * num ] , rdx movzx edx , byte ptr [ rip + hexvar ] shl ebx , num mov esi , hexvar mov qword ptr [ rip + hexvar ] , rbp and edx , hexvar mov dword ptr [ rip + hexvar ] , eax mov dword ptr [ rip + hexvar ] , num or edx , ebx mov byte ptr [ rip + hexvar ] , dl call hexvar pop rbx pop rbp mov rdi , rax pop r12 jmp hexvar nop dword ptr [ rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar mov eax , dword ptr [ rip + hexvar ] jmp hexvar
push r13 mov r13 , rdi push r12 push rbp mov rbp , rsi push rbx mov ebx , edx sub rsp , num mov eax , dword ptr [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , num cmp eax , num ja hexvar mov ecx , eax lea rdx , [ rip + hexvar ] mov esi , dword ptr [ rip + hexvar ] mov qword ptr [ rdx + rcx * num ] , rbp lea rdx , [ rip + hexvar ] mov dword ptr [ rdx + rcx * num ] , esi mov rdx , qword ptr [ rip + hexvar ] test rdx , rdx je hexvar mov rsi , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rdx + rsi * num ] lea rsi , [ rip + hexvar ] mov rdi , r13 add eax , num mov dword ptr [ rip + hexvar ] , ebx mov qword ptr [ rsi + rcx * num ] , rdx mov dword ptr [ rip + hexvar ] , eax call hexvar mov edi , hexvar mov rbp , rax call hexvar lea edi , [ rbp + num ] mov dword ptr [ rax + hexvar ] , ebp mov rbx , rax mov qword ptr [ rax ] , num call hexvar lea rdx , [ rbp + num ] mov rsi , r13 mov qword ptr [ rbx + num ] , rax mov r12 , rax lea rdi , [ rax + num ] mov byte ptr [ rax ] , hexvar call hexvar mov byte ptr [ r12 + rbp + num ] , num mov rax , qword ptr [ rbx + num ] mov rdi , rbx mov byte ptr [ r12 + rbp + num ] , num add ebp , num add rax , num mov dword ptr [ rbx + hexvar ] , ebp mov qword ptr [ rbx + hexvar ] , rax mov qword ptr [ rbx + hexvar ] , num mov dword ptr [ rbx + hexvar ] , num mov qword ptr [ rbx + hexvar ] , num add rsp , num pop rbx pop rbp pop r12 pop r13 jmp hexvar nop dword ptr [ rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar mov eax , dword ptr [ rip + hexvar ] jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
sub rsp , num xor edx , edx call hexvar add rsp , num mov rdi , rax jmp hexvar
,
,
,
,
,
,
,
,
xor edi , edi jmp hexvar
,
,
sub rsp , num cmp dword ptr [ rip + hexvar ] , num je hexvar mov dword ptr [ rip + hexvar ] , num xor esi , esi xor edi , edi mov dword ptr [ rip + hexvar ] , num call hexvar call hexvar mov rax , qword ptr [ rip + hexvar ] test rax , rax je hexvar movzx r10d , byte ptr [ rip + hexvar ] mov r8 , qword ptr [ rip + hexvar ] and r10d , num nop mov edx , dword ptr [ rax + hexvar ] test edx , edx js hexvar mov rdx , qword ptr [ rax + hexvar ] test rdx , rdx je hexvar cmp qword ptr [ rdx + hexvar ] , num jne hexvar mov ecx , dword ptr [ rdx + hexvar ] test ecx , hexvar jne hexvar mov rsi , qword ptr [ rdx + hexvar ] test rsi , rsi je hexvar cmp qword ptr [ rsi + hexvar ] , rdx je hexvar nop dword ptr [ rax ] mov rax , qword ptr [ rax + hexvar ] test rax , rax jne hexvar add rsp , num ret nop word ptr cs : [ rax + rax ] cmp qword ptr [ r8 + hexvar ] , rdx jne hexvar mov rdi , qword ptr [ rdx + hexvar ] test rdi , rdi jne hexvar movzx edi , byte ptr [ rax + hexvar ] test dil , hexvar jne hexvar or edi , num mov byte ptr [ rax + hexvar ] , dil or ch , hexvar mov dword ptr [ rdx + hexvar ] , ecx mov rdx , qword ptr [ rdx + hexvar ] test rdx , rdx je hexvar mov qword ptr [ rdx + hexvar ] , rsi test rsi , rsi je hexvar mov qword ptr [ rsi + hexvar ] , rdx sub dword ptr [ r8 + hexvar ] , num jmp hexvar nop word ptr [ rax + rax ] mov r9d , dword ptr [ rdi + hexvar ] test r9d , hexvar jne hexvar and r9d , hexvar jne hexvar test r10b , r10b jne hexvar mov rdi , qword ptr [ rdi + hexvar ] test rdi , rdi jne hexvar jmp hexvar nop dword ptr [ rax ] mov qword ptr [ r8 + hexvar ] , rdx jmp hexvar nop dword ptr [ rax ] mov qword ptr [ r8 + hexvar ] , rsi jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
sub rsp , hexvar mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar mov esi , dword ptr [ rip + hexvar ] test byte ptr [ rip + hexvar ] , num jne hexvar test esi , esi jne hexvar call hexvar cmp qword ptr [ rip + hexvar ] , num je hexvar cmp qword ptr [ rip + hexvar ] , num je hexvar add rsp , hexvar ret nop dword ptr [ rax ] test esi , esi je hexvar xor edx , edx lea rsi , [ rsp + num ] call hexvar mov rax , qword ptr [ rsp + num ] cmp byte ptr [ rax ] , num je hexvar mov esi , dword ptr [ rip + hexvar ] mov rdi , qword ptr [ rip + hexvar ] jmp hexvar nop dword ptr [ rax ] movzx esi , byte ptr [ rip + hexvar ] mov rdi , qword ptr [ rip + hexvar ] shr sil , num and esi , num call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar ret nop mov rdi , qword ptr [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rax jmp hexvar
,
,
,
,
,
push rbp lea rbp , [ rip + hexvar ] push rbx mov rbx , rdi sub rsp , num cmp dword ptr [ rbx + hexvar ] , num ja hexvar mov eax , dword ptr [ rbx + hexvar ] movsxd rax , dword ptr [ rbp + rax * num ] add rax , rbp jmp rax nop dword ptr [ rax + rax ] mov rbx , qword ptr [ rbx + hexvar ] cmp dword ptr [ rbx + hexvar ] , num jbe hexvar add rsp , num pop rbx pop rbp ret nop dword ptr [ rax ] mov rdi , qword ptr [ rbx + hexvar ] call hexvar mov rbx , qword ptr [ rbx + hexvar ] jmp hexvar nop mov rdi , qword ptr [ rbx + hexvar ] call hexvar mov rdi , qword ptr [ rbx + hexvar ] call hexvar mov rbx , qword ptr [ rbx + hexvar ] jmp hexvar nop dword ptr [ rax + rax ] mov eax , dword ptr [ rbx ] lea ecx , [ rax - hexvar ] cmp ecx , num ja hexvar mov eax , num shl rax , cl test al , hexvar je hexvar mov rdi , qword ptr [ rbx + hexvar ] xor edx , edx xor esi , esi call hexvar test rax , rax je hexvar cmp qword ptr [ rax + hexvar ] , num jne hexvar add rsp , num xor esi , esi mov rdi , rax pop rbx pop rbp jmp hexvar
,
,
,
,
push rbp lea rbp , [ rip + hexvar ] push rbx mov rbx , rdi sub rsp , num cmp dword ptr [ rbx + hexvar ] , num ja hexvar mov eax , dword ptr [ rbx + hexvar ] movsxd rax , dword ptr [ rbp + rax * num ] add rax , rbp jmp rax nop dword ptr [ rax + rax ] mov rbx , qword ptr [ rbx + hexvar ] cmp dword ptr [ rbx + hexvar ] , num jbe hexvar add rsp , num pop rbx pop rbp ret nop dword ptr [ rax ] mov rdi , qword ptr [ rbx + hexvar ] call hexvar mov rbx , qword ptr [ rbx + hexvar ] jmp hexvar nop mov rdi , qword ptr [ rbx + hexvar ] call hexvar mov rdi , qword ptr [ rbx + hexvar ] call hexvar mov rbx , qword ptr [ rbx + hexvar ] jmp hexvar nop dword ptr [ rax + rax ] mov eax , dword ptr [ rbx ] lea ecx , [ rax - hexvar ] cmp ecx , num ja hexvar mov eax , num shl rax , cl test al , hexvar je hexvar mov rdi , qword ptr [ rbx + hexvar ] xor edx , edx xor esi , esi call hexvar test rax , rax je hexvar cmp qword ptr [ rax + hexvar ] , num jne hexvar add rsp , num xor esi , esi mov rdi , rax pop rbx pop rbp jmp hexvar
,
,
,
,
push r14 xor ecx , ecx mov r14d , edx push r13 mov r13 , rdi push r12 push rbp mov ebp , esi mov rsi , rdi lea rdi , [ rip + hexvar ] push rbx call hexvar mov rbx , rax test rax , rax je hexvar mov r12 , qword ptr [ rax + hexvar ] test r12 , r12 je hexvar test r14d , r14d je hexvar cmp ebp , hexvar jne hexvar xor edi , edi mov rdx , r12 lea rsi , [ rip + hexvar ] call hexvar test rax , rax je hexvar movdqu xmm0 , xmmword ptr [ rbx ] mov r13 , r12 movups xmmword ptr [ rax ] , xmm0 mov rdx , qword ptr [ rbx + hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov qword ptr [ rbx ] , rax mov rbx , rax mov qword ptr [ rbx + hexvar ] , r13 mov dword ptr [ rbx + hexvar ] , ebp add rbx , hexvar mov rax , rbx pop rbx pop rbp pop r12 pop r13 pop r14 ret nop test eax , eax js hexvar test ebp , ebp je hexvar mov rax , qword ptr [ rbx ] test rax , rax je hexvar cmp r12 , qword ptr [ rax + hexvar ] jne hexvar mov rbx , rax mov eax , dword ptr [ rbx + hexvar ] cmp eax , ebp jne hexvar jmp hexvar nop dword ptr [ rax ] test r14d , r14d jne hexvar xor ebx , ebx mov rax , rbx pop rbx pop rbp pop r12 pop r13 pop r14 ret nop dword ptr [ rax + rax ] test r14d , r14d je hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rsi , r13 mov rdi , rax xor eax , eax call hexvar jmp hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi xor ebx , ebx call hexvar mov rsi , r12 mov rdi , rax xor eax , eax call hexvar jmp hexvar
,
test rdi , rdi je hexvar push r12 lea r12 , [ rip - hexvar ] push rbp mov rbp , rsi push rbx mov rbx , rdi jmp hexvar nop dword ptr [ rax ] cmp eax , num je hexvar mov rbx , qword ptr [ rbx ] test rbx , rbx je hexvar mov eax , dword ptr [ rbx + num ] cmp eax , hexvar je hexvar cmp eax , hexvar jne hexvar mov rdi , qword ptr [ rip + hexvar ] mov rsi , rbp call hexvar test byte ptr [ rbp + hexvar ] , num jne hexvar pop rbx pop rbp pop r12 ret nop word ptr [ rax + rax ] mov rdx , rbp mov rsi , r12 mov rdi , rbx call hexvar test byte ptr [ rbp + hexvar ] , num jne hexvar pop rbx pop rbp pop r12 ret nop dword ptr [ rax ] mov rdi , qword ptr [ rbx + hexvar ] mov rsi , rbp call hexvar test byte ptr [ rbp + hexvar ] , num jne hexvar pop rbx pop rbp pop r12 ret ret
,
,
,
,
,
push r14 mov r14 , rcx push r13 mov r13 , rdx lea rdx , [ rip - hexvar ] push r12 push rbp mov rbp , rsi push rbx mov rbx , rdi sub rsp , hexvar mov r12 , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rsi + hexvar ] mov rcx , rsp mov qword ptr [ rsp ] , num mov rsi , qword ptr [ r12 + num ] mov dword ptr [ rsp + num ] , num call hexvar mov eax , dword ptr [ rsp + num ] mov rdx , qword ptr [ rsp ] test eax , eax jne hexvar test rdx , rdx je hexvar mov r9 , r14 mov r8 , r13 mov rcx , r12 mov rsi , rbp mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret nop word ptr cs : [ rax + rax ] mov rcx , r14 mov rdx , r13 mov rsi , rbp mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret
push r14 mov r14 , rcx push r13 mov r13 , rdx lea rdx , [ rip - hexvar ] push r12 push rbp mov rbp , rsi push rbx mov rbx , rdi sub rsp , hexvar mov r12 , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rsi + hexvar ] mov rcx , rsp mov qword ptr [ rsp ] , num mov rsi , qword ptr [ r12 + num ] mov dword ptr [ rsp + num ] , num call hexvar mov eax , dword ptr [ rsp + num ] mov rdx , qword ptr [ rsp ] test eax , eax jne hexvar test rdx , rdx je hexvar mov r9 , r14 mov r8 , r13 mov rcx , r12 mov rsi , rbp mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret nop word ptr cs : [ rax + rax ] mov rcx , r14 mov rdx , r13 mov rsi , rbp mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret
,
push r12 mov r12d , edi mov edi , hexvar push rbp mov rbp , rsi push rbx call hexvar mov dword ptr [ rax ] , r12d mov rbx , rax call hexvar mov qword ptr [ rbx + hexvar ] , rbp mov qword ptr [ rbx + num ] , rax mov eax , dword ptr [ rip + hexvar ] mov dword ptr [ rbx + hexvar ] , num mov dword ptr [ rbx + num ] , eax mov rax , rbx pop rbx pop rbp pop r12 ret
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsi lea rsi , [ rip + hexvar ] push rbx mov rbx , rdi sub rsp , num call hexvar mov rdx , qword ptr [ rax ] mov qword ptr [ rdx ] , num mov rax , qword ptr [ rax ] mov qword ptr [ rdx + num ] , rbx mov qword ptr [ rdx + hexvar ] , num mov dword ptr [ rax + hexvar ] , num mov qword ptr [ rax + hexvar ] , num mov qword ptr [ rax + hexvar ] , rbp mov qword ptr [ rax + hexvar ] , num add rsp , num pop rbx pop rbp ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbx mov r8 , qword ptr [ rip + hexvar ] xor r9d , r9d xor ecx , ecx push num mov rsi , qword ptr [ rip + hexvar ] mov edx , num mov rbx , rdi push num call hexvar cmp qword ptr [ rip + hexvar ] , num pop rax pop rdx je hexvar mov edi , hexvar call hexvar mov rdx , qword ptr [ rip + hexvar ] mov rsi , rbx mov edi , hexvar mov qword ptr [ rax + num ] , rdx mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rip + hexvar ] , rax mov qword ptr [ rax ] , rdx call hexvar mov rsi , qword ptr [ rip + hexvar ] test rsi , rsi je hexvar mov rdx , rax mov edi , hexvar call hexvar mov qword ptr [ rip + hexvar ] , rax pop rbx ret nop word ptr cs : [ rax + rax ] mov rsi , rbx mov edi , hexvar call hexvar mov qword ptr [ rip + hexvar ] , rax jmp hexvar
,
,
push rbx mov r8 , qword ptr [ rip + hexvar ] xor r9d , r9d xor ecx , ecx push num mov rsi , qword ptr [ rip + hexvar ] mov edx , num mov rbx , rdi push num call hexvar cmp qword ptr [ rip + hexvar ] , num pop rax pop rdx je hexvar mov edi , hexvar call hexvar mov rdx , qword ptr [ rip + hexvar ] mov rsi , rbx mov edi , hexvar mov qword ptr [ rax + num ] , rdx mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rip + hexvar ] , rax mov qword ptr [ rax ] , rdx call hexvar mov rsi , qword ptr [ rip + hexvar ] test rsi , rsi je hexvar mov rdx , rax mov edi , hexvar call hexvar mov qword ptr [ rip + hexvar ] , rax pop rbx ret nop word ptr cs : [ rax + rax ] mov rsi , rbx mov edi , hexvar call hexvar mov qword ptr [ rip + hexvar ] , rax jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
movzx eax , byte ptr [ rip + hexvar ] and eax , num cmp al , num jne hexvar or qword ptr [ rip + hexvar ] , hexvar movabs rax , hexvar movabs rdx , hexvar and rax , qword ptr [ rip + hexvar ] cmp rax , rdx je hexvar jmp hexvar nop mov eax , dword ptr [ rip + hexvar ] test eax , eax jg hexvar mov dword ptr [ rip + hexvar ] , num jmp hexvar nop dword ptr [ rax ] sub rsp , num mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar mov dword ptr [ rip + hexvar ] , num add rsp , num jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rdi push rbx mov rbx , rsi sub rsp , num cmp qword ptr [ rip + hexvar ] , num je hexvar mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rbp mov qword ptr [ rip + hexvar ] , rbx add rsp , num pop rbx pop rbp ret nop dword ptr [ rax ] cmp qword ptr [ rip + hexvar ] , num jne hexvar cmp qword ptr [ rip + hexvar ] , num jne hexvar jmp hexvar
push r15 push r14 push r13 push r12 push rbp push rbx sub rsp , hexvar mov rax , qword ptr [ rdi + hexvar ] mov rdx , qword ptr [ rdi + num ] mov rax , qword ptr [ rax + hexvar ] mov r14 , qword ptr [ rdx + hexvar ] mov r12 , qword ptr [ rax + hexvar ] mov rcx , qword ptr [ rax + hexvar ] mov rax , qword ptr [ r12 + hexvar ] mov qword ptr [ rsp + num ] , rcx lea rcx , [ rip + hexvar ] cmp rax , rcx je hexvar mov r15 , qword ptr [ rax + hexvar ] mov rbp , rdi mov r13 , qword ptr [ r12 + hexvar ] mov rbx , qword ptr [ r15 + hexvar ] test rbx , rbx je hexvar add rbx , qword ptr [ r12 + hexvar ] mov rsi , rbx mov edi , num sub r13 , hexvar call qword ptr [ rdx + hexvar ] mov rax , qword ptr [ rbp + num ] mov rdi , r13 lea rsi , [ rbx + num ] call qword ptr [ rax + hexvar ] mov rax , qword ptr [ rbp + num ] lea rsi , [ rbx + num ] mov edi , num call qword ptr [ rax + hexvar ] mov r8d , r13d lea rcx , [ rbx + hexvar ] mov rdi , rbp mov dword ptr [ rbx + hexvar ] , hexvar mov rax , qword ptr [ r14 + hexvar ] mov rsi , qword ptr [ rsp + num ] mov rdx , qword ptr [ rax + hexvar ] call hexvar mov rsi , qword ptr [ r12 + hexvar ] xor edx , edx add rsi , qword ptr [ r15 + hexvar ] mov rdi , rbp mov r13 , qword ptr [ r12 + hexvar ] call hexvar xor edx , edx test eax , eax je hexvar add rsp , hexvar mov eax , edx pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret nop dword ptr [ rax ] mov rdx , rbp mov rsi , r13 mov rdi , rbx call hexvar xor edx , edx cmp rax , r13 sete dl jmp hexvar mov rbx , qword ptr [ r12 + hexvar ] test rbx , rbx jne hexvar mov rdi , r13 call hexvar mov r13 , qword ptr [ r12 + hexvar ] mov rdx , qword ptr [ rbp + num ] mov rbx , rax mov qword ptr [ r12 + hexvar ] , rax jmp hexvar nop word ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar mov edx , num jmp hexvar
sub rsp , num lea rsi , [ rip + hexvar ] xor edi , edi mov edx , num call hexvar xor esi , esi add rsp , num mov rdi , rax xor eax , eax jmp hexvar
sub rsp , num xor esi , esi lea rdi , [ rip + hexvar ] call hexvar or byte ptr [ rip + hexvar ] , hexvar movabs rax , hexvar mov dword ptr [ rip + hexvar ] , num mov dword ptr [ rip + hexvar ] , num or qword ptr [ rip + hexvar ] , rax add rsp , num ret
,
,
,
,
,
,
push r15 mov r15 , rdi xor ecx , ecx xor edx , edx push r14 mov r8d , num push r13 push r12 push rbp push rbx sub rsp , num mov rsi , qword ptr [ rdi + num ] mov rdi , qword ptr [ rip + hexvar ] call hexvar test rax , rax je hexvar mov rbp , rax movzx eax , byte ptr [ rax + hexvar ] sub eax , num cmp al , num ja hexvar mov rax , qword ptr [ rbp + hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov r13 , qword ptr [ rip + hexvar ] mov r14 , qword ptr [ rax ] test r13 , r13 je hexvar nop word ptr [ rax + rax ] mov r12 , qword ptr [ r13 + num ] test r12 , r12 jne hexvar jmp hexvar nop dword ptr [ rax + rax ] mov eax , dword ptr [ r13 + hexvar ] test eax , eax jne hexvar mov r12 , qword ptr [ r12 ] test r12 , r12 je hexvar mov rdi , qword ptr [ r12 + num ] mov rsi , r14 call hexvar test eax , eax jne hexvar mov rbx , qword ptr [ r15 + hexvar ] test rbx , rbx je hexvar nop dword ptr [ rax + rax ] mov rcx , qword ptr [ rbx + num ] mov rdx , qword ptr [ rbp + hexvar ] mov r8 , r13 mov esi , num mov rdi , qword ptr [ rbp + num ] call hexvar mov rbx , qword ptr [ rbx ] test rbx , rbx jne hexvar mov eax , dword ptr [ r13 + hexvar ] test eax , eax je hexvar nop dword ptr [ rax ] mov r13 , qword ptr [ r13 ] test r13 , r13 jne hexvar add rsp , num mov eax , num pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret mov rbx , qword ptr [ r15 + num ] xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax mov rsi , rbx xor eax , eax call hexvar jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
cmp dword ptr [ rdi + num ] , num je hexvar ret nop word ptr [ rax + rax ] mov rdi , qword ptr [ rdi + hexvar ] jmp hexvar
,
,
,
,
,
,
,
,
,
push r13 mov r13 , rdx mov rax , rdi push r12 mov r12d , ecx push rbp mov rbp , rsi mov rsi , rax push rbx sub rsp , hexvar mov rdx , qword ptr [ rip + hexvar ] mov rdi , qword ptr [ rdx + hexvar ] mov edx , hexvar call hexvar test rax , rax je hexvar mov dword ptr [ rax + hexvar ] , r12d mov rdi , rbp mov rbx , rax mov r12 , rsp call hexvar mov rdi , r12 mov qword ptr [ rsp + hexvar ] , r13 mov rbp , rax call hexvar mov rcx , rbp xor edx , edx mov rsi , rbx mov rdi , r12 call hexvar mov rcx , qword ptr [ rsp ] test rcx , rcx je hexvar test r13 , r13 je hexvar lea rsi , [ rbp + hexvar ] mov rdi , r12 call hexvar test eax , eax je hexvar add rsp , hexvar mov rax , rbx pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi xor ebx , ebx call hexvar mov rdi , rax xor eax , eax call hexvar add rsp , hexvar mov rax , rbx pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax ] mov rdx , qword ptr [ rbp + hexvar ] test rdx , rdx jne hexvar jmp hexvar nop dword ptr [ rax + rax ] mov rdx , rax mov rax , qword ptr [ rdx ] test rax , rax jne hexvar mov qword ptr [ rdx ] , rcx add rsp , hexvar mov rax , rbx pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax ] mov qword ptr [ rbp + hexvar ] , rcx jmp hexvar
,
,
,
,
,
,
,
push r13 push r12 lea r12 , [ rip + hexvar ] push rbp lea rbp , [ rip + hexvar ] push rbx mov rbx , rdi sub rsp , num cmp dword ptr [ rbx + hexvar ] , num ja hexvar mov eax , dword ptr [ rbx + hexvar ] movsxd rax , dword ptr [ rbp + rax * num ] add rax , rbp jmp rax nop xor r9d , r9d mov rdx , qword ptr [ rbx + hexvar ] mov ecx , num mov rdi , r12 mov rsi , rdx repe cmpsb byte ptr [ rsi ] , byte ptr [ rdi ] seta al sbb al , num test al , al jne hexvar mov rbx , qword ptr [ rbx + hexvar ] cmp dword ptr [ rbx + hexvar ] , num jbe hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 ret nop word ptr [ rax + rax ] mov rbx , qword ptr [ rbx + hexvar ] jmp hexvar nop mov rdi , qword ptr [ rbx + hexvar ] call hexvar mov rdi , qword ptr [ rbx + hexvar ] call hexvar mov rbx , qword ptr [ rbx + hexvar ] jmp hexvar nop dword ptr [ rax + rax ] mov rdi , qword ptr [ rbx + hexvar ] call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov r9d , num jmp hexvar nop dword ptr [ rax + rax ] mov r8d , dword ptr [ rbx + hexvar ] mov rdi , qword ptr [ rip + hexvar ] mov ecx , r9d lea rsi , [ rip + hexvar ] call hexvar test eax , eax jne hexvar mov r13 , qword ptr [ rbx + hexvar ] xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax mov rsi , r13 xor eax , eax call hexvar jmp hexvar
,
,
,
,
,
,
,
,
,
push r13 mov r13 , rdx mov rax , rdi push r12 mov r12d , ecx push rbp mov rbp , rsi mov rsi , rax push rbx sub rsp , hexvar mov rdx , qword ptr [ rip + hexvar ] mov rdi , qword ptr [ rdx + hexvar ] mov edx , hexvar call hexvar test rax , rax je hexvar mov dword ptr [ rax + hexvar ] , r12d mov rdi , rbp mov rbx , rax mov r12 , rsp call hexvar mov rdi , r12 mov qword ptr [ rsp + hexvar ] , r13 mov rbp , rax call hexvar mov rcx , rbp xor edx , edx mov rsi , rbx mov rdi , r12 call hexvar mov rcx , qword ptr [ rsp ] test rcx , rcx je hexvar test r13 , r13 je hexvar lea rsi , [ rbp + hexvar ] mov rdi , r12 call hexvar test eax , eax je hexvar add rsp , hexvar mov rax , rbx pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi xor ebx , ebx call hexvar mov rdi , rax xor eax , eax call hexvar add rsp , hexvar mov rax , rbx pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax ] mov rdx , qword ptr [ rbp + hexvar ] test rdx , rdx jne hexvar jmp hexvar nop dword ptr [ rax + rax ] mov rdx , rax mov rax , qword ptr [ rdx ] test rax , rax jne hexvar mov qword ptr [ rdx ] , rcx add rsp , hexvar mov rax , rbx pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax ] mov qword ptr [ rbp + hexvar ] , rcx jmp hexvar
,
,
,
,
,
push r15 mov r15 , rsi push r14 push r13 mov r13d , hexvar push r12 mov r12 , rdi push rbp push rbx sub rsp , hexvar mov r14 , rsp lea rbp , [ rsp + hexvar ] mov rdi , r14 call hexvar xor ebx , ebx nop word ptr [ rax + rax ] mov rdx , r13 lea rdi , [ rbp + rbx ] mov rcx , r12 mov esi , num sub rdx , rbx call hexvar add rbx , rax cmp rbx , hexvar ja hexvar test rax , rax jne hexvar test rax , rax je hexvar mov rdx , r14 mov esi , hexvar mov rdi , rbp call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov rdi , r12 call hexvar mov r12d , eax test eax , eax jne hexvar test rbx , rbx jne hexvar mov rsi , r15 mov rdi , r14 call hexvar add rsp , hexvar mov eax , r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret mov r12d , num jmp hexvar mov rdx , r14 mov rsi , rbx mov rdi , rbp call hexvar jmp hexvar
,
push r15 mov r15 , rsi push r14 push r13 mov r13d , hexvar push r12 mov r12 , rdi push rbp push rbx sub rsp , hexvar mov r14 , rsp lea rbp , [ rsp + hexvar ] mov rdi , r14 call hexvar xor ebx , ebx nop word ptr [ rax + rax ] mov rdx , r13 lea rdi , [ rbp + rbx ] mov rcx , r12 mov esi , num sub rdx , rbx call hexvar add rbx , rax cmp rbx , hexvar ja hexvar test rax , rax jne hexvar test rax , rax je hexvar mov rdx , r14 mov esi , hexvar mov rdi , rbp call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov rdi , r12 call hexvar mov r12d , eax test eax , eax jne hexvar test rbx , rbx jne hexvar mov rsi , r15 mov rdi , r14 call hexvar add rsp , hexvar mov eax , r12d pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret mov r12d , num jmp hexvar mov rdx , r14 mov rsi , rbx mov rdi , rbp call hexvar jmp hexvar
,
,
push r13 mov r13 , rsi push r12 mov r12 , rdi push rbp mov rbp , rdx push rbx sub rsp , hexvar mov rbx , rsp mov rdi , rbx call hexvar mov rdx , rbx mov rsi , r13 mov rdi , r12 call hexvar mov rsi , rbp mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
,
push r13 mov r13 , rsi push r12 mov r12 , rdi push rbp mov rbp , rdx push rbx sub rsp , hexvar mov rbx , rsp mov rdi , rbx call hexvar mov rdx , rbx mov rsi , r13 mov rdi , r12 call hexvar mov rsi , rbp mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
,
,
,
,
,
push r13 mov r13 , - hexvar push r12 mov r12d , hexvar push rbp push rbx mov rbx , rdi sub rsp , num test rdx , rdx je hexvar lea r12 , [ rdx - num ] neg rdx mov r13 , rdx test rsi , rsi mov eax , hexvar mov qword ptr [ rbx + hexvar ] , r12 mov rdi , rbx cmove rsi , rax mov qword ptr [ rbx ] , rsi call hexvar mov rbp , rax test rax , rax je hexvar lea rax , [ rbp + r12 + hexvar ] mov qword ptr [ rbx + num ] , rbp and rax , r13 mov qword ptr [ rbx + hexvar ] , rax mov qword ptr [ rbx + hexvar ] , rax mov rax , qword ptr [ rbx ] add rax , rbp mov qword ptr [ rbp ] , rax mov qword ptr [ rbx + hexvar ] , rax mov eax , num mov qword ptr [ rbp + num ] , num and byte ptr [ rbx + hexvar ] , hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 ret nop word ptr [ rax + rax ] lea rax , [ rip + hexvar ] call qword ptr [ rax ] jmp hexvar
,
,
,
,
,
and byte ptr [ rdi + hexvar ] , hexvar mov qword ptr [ rdi + hexvar ] , rcx mov qword ptr [ rdi + hexvar ] , r8 jmp hexvar
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar jmp hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar nop leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov edi , num call hexvar mov eax , dword ptr [ rbp - num ] mov esi , num mov edi , eax call hexvar mov eax , dword ptr [ rbp - num ] mov edi , eax call hexvar nop leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov eax , dword ptr [ rip + hexvar ] mov edi , eax call hexvar mov qword ptr [ rip + hexvar ] , rax mov eax , dword ptr [ rip + hexvar ] cmp eax , - num jne hexvar mov byte ptr [ rbp - hexvar ] , num mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar lea rax , [ rbp - hexvar ] mov rdx , rax lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov rax , qword ptr [ rip + hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] test rax , rax setne al mov byte ptr [ rbp - hexvar ] , al call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax movzx edx , byte ptr [ rbp - hexvar ] mov eax , dword ptr [ rip + hexvar ] add eax , edx mov dword ptr [ rip + hexvar ] , eax lea rax , [ rbp - hexvar ] mov edx , num mov rsi , rax mov edi , num call hexvar movzx eax , byte ptr [ rbp - hexvar ] xor eax , num test al , al je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , rax mov esi , num mov edi , num call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx lea rdx , [ rip + hexvar ] mov esi , eax mov edi , num mov eax , num call hexvar call hexvar mov qword ptr [ rip + hexvar ] , num nop mov rax , qword ptr [ rbp - num ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov rdx , qword ptr [ rbp - hexvar ] add rdx , num imul rax , rdx mov qword ptr [ rbp - hexvar ] , rax call hexvar call hexvar test al , al je hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax jmp hexvar call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax + num ] mov qword ptr [ rbp - hexvar ] , rdx cmp qword ptr [ rbp - hexvar ] , rax ja hexvar call hexvar movzx eax , byte ptr [ rip + hexvar ] test al , al je hexvar call hexvar call hexvar test al , al je hexvar movzx eax , byte ptr [ rip + hexvar ] xor eax , num test al , al je hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar nop leave ret
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov ecx , num mov rax , qword ptr [ rbp - hexvar ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al jne hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar call hexvar mov rax , qword ptr [ rbp - num ] leave ret
push rbp mov rbp , rsp push r12 push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - hexvar ] , rax xor eax , eax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] lea rdx , [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rdi , rax call hexvar mov r12 , rax lea rax , [ rip + hexvar ] mov rbx , qword ptr [ rax ] lea rdi , [ rip + hexvar ] call hexvar mov rsi , rax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] mov rcx , r12 mov rdx , rbx mov rdi , rax mov eax , num call hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar lea rdx , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rbx , rax lea rdi , [ rip + hexvar ] call hexvar mov rcx , rax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] mov rdx , rbx mov rsi , rcx mov rdi , rax mov eax , num call hexvar jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] mov rsi , rax mov edi , hexvar call hexvar call hexvar
,
,
,
,
,
,
,
push rbp mov rbp , rsp push r12 push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov eax , edx mov byte ptr [ rbp - hexvar ] , al mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - hexvar ] , rax xor eax , eax mov rdx , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rax + hexvar ] cdqe shl rax , num add rax , rdx mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov r12 , rax lea rax , [ rip + hexvar ] mov rbx , qword ptr [ rax ] lea rdi , [ rip + hexvar ] call hexvar mov rsi , rax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] mov rcx , r12 mov rdx , rbx mov rdi , rax mov eax , num call hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar lea rdx , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rbx , rax lea rdi , [ rip + hexvar ] call hexvar mov rcx , rax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] mov rdx , rbx mov rsi , rcx mov rdi , rax mov eax , num call hexvar jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] mov rsi , rax mov edi , hexvar call hexvar movzx eax , byte ptr [ rbp - hexvar ] xor eax , num test al , al je hexvar call hexvar call hexvar call hexvar
,
push rbp mov rbp , rsp push r12 push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - hexvar ] , rax xor eax , eax mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] lea rdx , [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rdi , rax call hexvar mov r12 , rax lea rax , [ rip + hexvar ] mov rbx , qword ptr [ rax ] lea rdi , [ rip + hexvar ] call hexvar mov rsi , rax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] mov rcx , r12 mov rdx , rbx mov rdi , rax mov eax , num call hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar lea rdx , [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov rbx , rax lea rdi , [ rip + hexvar ] call hexvar mov rcx , rax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] mov rdx , rbx mov rsi , rcx mov rdi , rax mov eax , num call hexvar jmp hexvar mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] mov rsi , rax mov edi , hexvar call hexvar call hexvar
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rax mov edi , num call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - num ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - num ] mov r8 , - num mov edi , eax call hexvar leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov eax , dword ptr [ rip + hexvar ] mov edi , eax call hexvar mov qword ptr [ rip + hexvar ] , rax mov eax , dword ptr [ rip + hexvar ] cmp eax , - num jne hexvar mov byte ptr [ rbp - hexvar ] , num mov dword ptr [ rbp - hexvar ] , hexvar jmp hexvar lea rax , [ rbp - hexvar ] mov rdx , rax lea rsi , [ rip + hexvar ] mov edi , num call hexvar mov rax , qword ptr [ rip + hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] test rax , rax setne al mov byte ptr [ rbp - hexvar ] , al call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax movzx edx , byte ptr [ rbp - hexvar ] mov eax , dword ptr [ rip + hexvar ] add eax , edx mov dword ptr [ rip + hexvar ] , eax lea rax , [ rbp - hexvar ] mov edx , num mov rsi , rax mov edi , num call hexvar movzx eax , byte ptr [ rbp - hexvar ] xor eax , num test al , al je hexvar mov rax , qword ptr [ rip + hexvar ] mov rdx , rax mov esi , num mov edi , num call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx lea rdx , [ rip + hexvar ] mov esi , eax mov edi , num mov eax , num call hexvar call hexvar mov qword ptr [ rip + hexvar ] , num nop mov rax , qword ptr [ rbp - num ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov eax , esi mov byte ptr [ rbp - hexvar ] , al movsx edx , byte ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , - num mov rdi , rax call hexvar leave ret
,
push rbp mov rbp , rsp push r12 push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar test eax , eax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov ecx , num mov edx , num mov rsi , rax mov edi , num call hexvar test eax , eax jns hexvar mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov r12 , rax lea rdi , [ rip + hexvar ] call hexvar mov rbx , rax call hexvar mov eax , dword ptr [ rax ] mov rcx , r12 mov rdx , rbx mov esi , eax mov edi , num mov eax , num call hexvar nop add rsp , hexvar pop rbx pop r12 pop rbp ret
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar mov rdi , qword ptr [ rbp - num ] xor rdi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov eax , edx mov byte ptr [ rbp - hexvar ] , al mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax movsx ecx , byte ptr [ rbp - hexvar ] lea rax , [ rbp - hexvar ] mov edx , num mov esi , ecx mov rdi , rax call hexvar lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov rsi , qword ptr [ rbp - num ] xor rsi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar lea rdx , [ rax + num ] mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num sete al movzx eax , al add qword ptr [ rbp - num ] , rax mov ecx , num mov rax , qword ptr [ rbp - num ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar movabs rax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] cmp qword ptr [ rbp - num ] , rax jb hexvar call hexvar mov rax , qword ptr [ rbp - num ] shr rax , num mov rdx , rax mov rax , qword ptr [ rbp - num ] add rax , rdx add rax , num mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov edi , hexvar call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov rax , qword ptr [ rbp - num ] leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov rdx , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rip + hexvar ] cmp rdx , rax jne hexvar mov rax , qword ptr [ rip + hexvar ] mov edx , hexvar lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov rcx , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] lea rax , [ rdx + num ] mov qword ptr [ rip + hexvar ] , rax mov rax , rdx add rax , rax add rax , rdx shl rax , num add rax , rcx mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov byte ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov byte ptr [ rax + hexvar ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + num ] , num mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax ] , num mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar test rax , rax setne al mov byte ptr [ rbp - num ] , al mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar test eax , eax setne al mov byte ptr [ rbp - num ] , al mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar test eax , eax setne al mov byte ptr [ rbp - num ] , al cmp byte ptr [ rbp - num ] , num jne hexvar cmp byte ptr [ rbp - num ] , num je hexvar cmp byte ptr [ rbp - num ] , num jne hexvar call hexvar mov eax , dword ptr [ rax ] cmp eax , num je hexvar movzx eax , byte ptr [ rbp - num ] xor eax , num test al , al je hexvar call hexvar mov dword ptr [ rax ] , num mov eax , hexvar jmp hexvar mov eax , num leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov eax , edi mov qword ptr [ rbp - hexvar ] , rsi mov word ptr [ rbp - hexvar ] , ax mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax movzx eax , word ptr [ rbp - hexvar ] mov edi , eax call hexvar mov word ptr [ rbp - hexvar ] , ax movzx edx , word ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov word ptr [ rax ] , dx nop mov rax , qword ptr [ rbp - num ] xor rax , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov ebp , edi push rbx sub rsp , hexvar lea rdi , [ rsp + hexvar ] call hexvar test rax , rax je hexvar mov edx , num mov esi , hexvar mov rdi , rax mov rbx , rax call hexvar test eax , eax jne hexvar test ebp , ebp jne hexvar call hexvar mov rdi , rbx call hexvar mov esi , ebp mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp ret nop word ptr [ rax + rax ] call hexvar add rsp , hexvar pop rbx pop rbp ret
,
,
,
,
,
,
,
push rbx mov rbx , rdi mov rdi , qword ptr [ rdi + hexvar ] call hexvar mov edi , dword ptr [ rbx + hexvar ] mov rsi , rax mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar call hexvar mov dword ptr [ rbx + hexvar ] , eax pop rbx ret nop word ptr [ rax + rax ] call hexvar mov dword ptr [ rbx + hexvar ] , eax pop rbx ret
,
push rbp mov ebp , edi push rbx sub rsp , hexvar mov eax , dword ptr [ rip + hexvar ] mov qword ptr [ rsp ] , rsi mov rsi , - num mov byte ptr [ rsp + hexvar ] , hexvar mov qword ptr [ rsp + num ] , rdx mov qword ptr [ rsp + hexvar ] , num test eax , eax je hexvar call hexvar mov ebx , eax mov rdi , rsp call hexvar sub rsp , num movsxd rsi , ebx movsxd r9 , ebp push num mov r8 , rax mov ecx , num mov rdx , rsi mov edi , hexvar call hexvar add rsp , hexvar pop rbx pop rbp ret nop word ptr [ rax + rax ] call hexvar mov ebx , eax jmp hexvar
,
,
,
,
,
,
,
,
mov ecx , dword ptr [ rsi ] test ecx , ecx je hexvar mov edx , dword ptr [ rsi + num ] test edx , edx je hexvar cmp dword ptr [ rip + hexvar ] , num je hexvar push r12 push rbp mov rbp , rdi push rbx mov rbx , rsi add rsp , - hexvar mov eax , dword ptr [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , edx mov dword ptr [ rip + hexvar ] , ecx test eax , eax je hexvar mov r12 , rsp lea rsi , [ rip + hexvar ] xor eax , eax mov rdi , r12 call hexvar mov rcx , qword ptr [ rip + hexvar ] mov rdi , r12 mov rdx , rbp mov rsi , qword ptr [ rip + hexvar ] call hexvar mov rdi , rax mov rsi , rbx call hexvar sub rsp , - hexvar pop rbx pop rbp pop r12 ret nop cmp edx , dword ptr [ rip + hexvar ] jne hexvar cmp ecx , dword ptr [ rip + hexvar ] jne hexvar ret nop dword ptr [ rax ] mov rsi , rdi mov rdx , qword ptr [ rip + hexvar ] mov rdi , qword ptr [ rip + hexvar ] call hexvar mov rdi , rax jmp hexvar
push r12 mov r12 , rsi push rbp mov rbp , rdi mov edi , hexvar push rbx call hexvar movdqu xmm0 , xmmword ptr [ r12 ] movdqu xmm1 , xmmword ptr [ r12 + hexvar ] mov edx , num mov qword ptr [ rax + num ] , rbp mov esi , dword ptr [ rip + hexvar ] mov rbx , rax mov qword ptr [ rax ] , num mov rdi , qword ptr [ rip + hexvar ] movups xmmword ptr [ rax + hexvar ] , xmm0 movups xmmword ptr [ rax + hexvar ] , xmm1 call hexvar cmp qword ptr [ r12 + hexvar ] , num mov rbp , rax je hexvar mov rcx , qword ptr [ rax + hexvar ] xor edx , edx test rcx , rcx je hexvar mov rdx , qword ptr [ rax + hexvar ] lea rsi , [ rbx + hexvar ] lea rdi , [ rbx + num ] call hexvar mov rax , qword ptr [ rbp + hexvar ] mov qword ptr [ rax ] , rbx mov qword ptr [ rbp + hexvar ] , rbx pop rbx pop rbp pop r12 ret
,
,
,
,
,
,
,
,
,
,
,
sub rsp , num call hexvar mov edi , hexvar mov dword ptr [ rax + num ] , hexvar call hexvar mov rdx , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rdx + hexvar ] mov rcx , qword ptr [ rdx + hexvar ] mov qword ptr [ rax + num ] , rcx mov rcx , qword ptr [ rdx + hexvar ] mov qword ptr [ rax ] , rcx mov qword ptr [ rdx + hexvar ] , rax add rsp , num ret
,
,
,
,
,
,
,
push rbp push rbx sub rsp , hexvar cmp qword ptr [ rip + hexvar ] , num je hexvar cmp qword ptr [ rip + hexvar ] , num je hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax xor eax , eax call hexvar lea rdi , [ rsp + num ] call hexvar mov rbp , qword ptr [ rip + hexvar ] mov ebx , eax cmp al , hexvar jne hexvar lea rax , [ rbp + num ] mov qword ptr [ rip + hexvar ] , rax mov rdi , qword ptr [ rsp + num ] call hexvar mov byte ptr [ rbp ] , bl mov qword ptr [ rip + hexvar ] , rax call hexvar add rsp , hexvar pop rbx pop rbp ret nop dword ptr [ rax ] cmp dword ptr [ rip + hexvar ] , - num jne hexvar jmp hexvar nop dword ptr [ rax + rax ] xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax xor eax , eax call hexvar jmp hexvar
,
,
,
,
,
,
,
push rbp mov ebp , edi push rbx sub rsp , hexvar mov eax , dword ptr [ rip + hexvar ] mov qword ptr [ rsp ] , rsi mov rsi , - num mov byte ptr [ rsp + hexvar ] , hexvar mov qword ptr [ rsp + num ] , rdx mov qword ptr [ rsp + hexvar ] , num test eax , eax je hexvar call hexvar mov ebx , eax mov rdi , rsp call hexvar sub rsp , num movsxd rsi , ebx movsxd r9 , ebp push num mov r8 , rax mov ecx , num mov rdx , rsi mov edi , hexvar call hexvar add rsp , hexvar pop rbx pop rbp ret nop word ptr [ rax + rax ] call hexvar mov ebx , eax jmp hexvar
,
,
push r12 push rbp mov ebp , edi push rbx mov ebx , esi test edi , edi je hexvar mov rdx , qword ptr [ rip + hexvar ] mov eax , dword ptr [ rdx + hexvar ] and eax , hexvar cmp eax , num je hexvar mov edx , dword ptr [ rip + hexvar ] test edx , edx je hexvar cmp ebx , hexvar je hexvar jle hexvar cmp ebx , hexvar je hexvar cmp ebx , hexvar jne hexvar xor edi , edi call hexvar xor edi , edi call hexvar xor edi , edi call hexvar xor edi , edi call hexvar xor edi , edi call hexvar xor edi , edi call hexvar xor edi , edi call hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar pop rbx pop rbp pop r12 ret nop cmp ebx , num jne hexvar pop rbx mov edi , ebp pop rbp pop r12 jmp hexvar mov edi , ebp call hexvar cmp ebx , hexvar je hexvar jg hexvar cmp ebx , num je hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar nop dword ptr [ rax + rax ] mov r12 , qword ptr [ rdx ] xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax mov rsi , r12 xor eax , eax call hexvar jmp hexvar
push rbp push rbx sub rsp , hexvar mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax + hexvar ] test rax , rax je hexvar mov rdi , qword ptr [ rax + num ] call hexvar cmp rax , qword ptr [ rip + hexvar ] je hexvar call hexvar mov rbx , rax call hexvar mov rdx , qword ptr [ rip + hexvar ] mov dword ptr [ rax + num ] , hexvar mov rdx , qword ptr [ rdx + hexvar ] mov rcx , qword ptr [ rdx + num ] mov qword ptr [ rax + hexvar ] , rbx mov qword ptr [ rax + hexvar ] , rcx mov qword ptr [ rdx + num ] , rbx lea rbp , [ rsp + num ] nop word ptr [ rax + rax ] mov edi , hexvar call hexvar mov esi , num lea rdi , [ rax + num ] mov rbx , rax call hexvar mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp ] , rbx mov rbp , rbx lea rdx , [ rax + num ] mov qword ptr [ rip + hexvar ] , rdx cmp byte ptr [ rax ] , hexvar je hexvar mov qword ptr [ rbx ] , num call hexvar mov rdx , qword ptr [ rsp + num ] sub qword ptr [ rip + hexvar ] , num mov dword ptr [ rax + num ] , hexvar mov qword ptr [ rax + hexvar ] , rdx add rsp , hexvar pop rbx pop rbp jmp hexvar nop dword ptr [ rax + rax ] mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rax + num ] call hexvar mov rbx , rax call hexvar cmp rbx , rax jne hexvar jmp hexvar nop dword ptr [ rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar add rsp , hexvar pop rbx pop rbp jmp hexvar
,
,
mov rax , qword ptr [ rdi + hexvar ] test rax , rax je hexvar push r13 push r12 push rbp push rbx sub rsp , num mov rbx , qword ptr [ rax ] test rbx , rbx je hexvar mov rbp , rdi lea r12 , [ rip + hexvar ] jmp hexvar nop word ptr [ rax + rax ] xor esi , esi mov edi , r13d call hexvar mov rdi , qword ptr [ rip + hexvar ] call hexvar mov rax , qword ptr [ rip + hexvar ] cmp qword ptr [ rax + hexvar ] , num mov qword ptr [ rax + hexvar ] , num jne hexvar mov rbx , qword ptr [ rbx + hexvar ] test rbx , rbx je hexvar mov esi , dword ptr [ rbx + hexvar ] mov rdi , rbp call hexvar call hexvar test eax , eax je hexvar mov dword ptr [ rip + hexvar ] , num xor r13d , r13d cmp qword ptr [ rbx + hexvar ] , num mov rdi , qword ptr [ rip + hexvar ] je hexvar test byte ptr [ rdi + hexvar ] , hexvar je hexvar mov eax , dword ptr [ rdi + hexvar ] test eax , eax jne hexvar call hexvar test eax , eax jne hexvar xor edx , edx xor esi , esi mov edi , r13d call hexvar jmp hexvar nop word ptr [ rax + rax ] call hexvar mov rdi , qword ptr [ rip + hexvar ] mov r13d , eax test eax , eax je hexvar cmp rdi , r12 je hexvar cmp dword ptr [ rdi + hexvar ] , num mov r13d , num cmovle r13d , dword ptr [ rdi + hexvar ] jmp hexvar nop dword ptr [ rax ] xor edx , edx test al , num jne hexvar nop shr eax , num add edx , num test al , num je hexvar cmp r13d , edx cmovl r13d , edx jmp hexvar nop word ptr [ rax + rax ] add rsp , num pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax + rax ] xor r13d , r13d jmp hexvar ret lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar
,
,
sub rsp , hexvar mov ecx , esi movsxd r9 , edi xor r8d , r8d push num mov edx , num mov esi , hexvar mov edi , num call hexvar mov byte ptr [ rax ] , num add rsp , hexvar ret
push r12 mov r12d , hexvar push rbp push rbx sub rsp , hexvar mov rdx , qword ptr [ rip + hexvar ] movzx eax , byte ptr [ rdx ] cmp al , hexvar je hexvar xor r12d , r12d cmp al , hexvar jne hexvar lea rax , [ rdx + num ] mov qword ptr [ rip + hexvar ] , rax cmp byte ptr [ rdx + num ] , hexvar je hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar mov rax , qword ptr [ rip + hexvar ] add rax , num mov edi , num mov rbp , rsp mov qword ptr [ rip + hexvar ] , rax call hexvar mov edi , num call hexvar mov rsi , rbp mov edx , num xor edi , edi call hexvar mov edi , num call hexvar mov rsi , r12 mov edx , num mov rdi , rax mov rbx , rax call hexvar mov rdi , qword ptr [ rip + hexvar ] mov rcx , rbp mov r9d , hexvar mov r8d , num mov edx , num lea rax , [ rdi + hexvar ] sub rbx , rax mov rsi , rbx call hexvar call hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret nop dword ptr [ rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar mov rdx , qword ptr [ rip + hexvar ] jmp hexvar
mov rax , qword ptr [ rip + hexvar ] push r12 push rbp push rbx mov r12 , qword ptr [ rax + hexvar ] mov rbx , rsi mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rax + hexvar ] , rdx mov rdx , qword ptr [ rsp + hexvar ] mov dword ptr [ rax + hexvar ] , edi mov rdi , rax mov dword ptr [ rax + hexvar ] , ecx mov qword ptr [ rax + hexvar ] , r8 mov qword ptr [ rax + hexvar ] , r9 mov qword ptr [ rax + hexvar ] , rdx call hexvar mov rbp , qword ptr [ rip + hexvar ] lea rdi , [ rbp + hexvar ] call hexvar mov rdi , rbx mov qword ptr [ rbp + hexvar ] , rax call hexvar mov rax , r12 pop rbx pop rbp pop r12 ret
,
,
,
,
mov rdi , qword ptr [ rip + hexvar ] lea rsi , [ rip + hexvar ] jmp hexvar
,
mov rdx , qword ptr [ rdi ] mov eax , hexvar cmp byte ptr [ rdx ] , hexvar jne hexvar push rbp lea rsi , [ rdx + num ] push rbx mov rbx , rsi sub rsp , num movzx eax , byte ptr [ rdx + num ] cmp al , hexvar je hexvar test al , al jne hexvar jmp hexvar nop dword ptr [ rax + rax ] add rbx , num movzx eax , byte ptr [ rbx ] test al , al je hexvar cmp al , hexvar je hexvar cmp al , hexvar jne hexvar add rsp , num mov eax , hexvar pop rbx pop rbp ret nop cmp al , hexvar jne hexvar mov rbp , rdi mov rdx , rbx mov rdi , qword ptr [ rip + hexvar ] sub rdx , rsi call hexvar test rax , rax je hexvar add rbx , num mov eax , dword ptr [ rax + num ] mov qword ptr [ rbp ] , rbx add rsp , num pop rbx pop rbp ret ret
sub rsp , num mov rsi , rdi mov rdi , qword ptr [ rip + hexvar ] call hexvar test rax , rax je hexvar mov ecx , dword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] test ecx , ecx je hexvar mov rcx , qword ptr [ rax + hexvar ] test qword ptr [ rcx ] , rdx jne hexvar mov rdx , qword ptr [ rcx + num ] test qword ptr [ rip + hexvar ] , rdx jne hexvar mov rdx , qword ptr [ rip + hexvar ] test qword ptr [ rcx + hexvar ] , rdx je hexvar mov dword ptr [ rip + hexvar ] , num mov edi , dword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rip + hexvar ] , rdi add rsp , num jmp rax nop mov rcx , qword ptr [ rax + hexvar ] test qword ptr [ rcx ] , rdx jne hexvar mov rdx , qword ptr [ rcx + num ] test qword ptr [ rip + hexvar ] , rdx jne hexvar mov rdx , qword ptr [ rcx + hexvar ] test qword ptr [ rip + hexvar ] , rdx je hexvar mov ecx , dword ptr [ rax + hexvar ] mov edx , dword ptr [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , num mov rax , qword ptr [ rax + hexvar ] shl edx , hexvar shr ecx , num or edx , ecx movsxd rdx , edx mov qword ptr [ rip + hexvar ] , rdx add rsp , num jmp rax nop word ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov edx , num xor edi , edi mov rsi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , num ret lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar
,
push rbp push rbx sub rsp , num test rdi , rdi je hexvar mov rbx , rdi mov rax , qword ptr [ rdi + num ] test byte ptr [ rdi ] , num jne hexvar cmp qword ptr [ rax + num ] , num je hexvar mov rsi , qword ptr [ rax + num ] mov rdi , qword ptr [ rip + hexvar ] mov rdx , rbx call hexvar mov rbp , rax test rax , rax jne hexvar add rsp , num pop rbx pop rbp ret nop dword ptr [ rax ] cmp qword ptr [ rip + hexvar ] , rax je hexvar mov rsi , qword ptr [ rdi + hexvar ] test rsi , rsi je hexvar mov rdx , rdi mov rdi , qword ptr [ rip + hexvar ] call hexvar mov rbp , rax test rax , rax je hexvar test byte ptr [ rbx ] , num je hexvar mov rax , qword ptr [ rbx + num ] cmp qword ptr [ rip + hexvar ] , rax je hexvar mov rbx , qword ptr [ rbx + hexvar ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdx , rbp mov rsi , rbx mov rdi , rax xor eax , eax call hexvar nop mov rbx , qword ptr [ rdi + hexvar ] mov rcx , qword ptr [ rbx + num ] cmp qword ptr [ rcx + num ] , num je hexvar mov rdx , rax mov rax , rcx test byte ptr [ rbx ] , num je hexvar cmp rax , rdx je hexvar mov rsi , qword ptr [ rbx + hexvar ] jmp hexvar nop dword ptr [ rax ] mov rax , qword ptr [ rbx + hexvar ] mov rax , qword ptr [ rax + num ] jmp hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar test byte ptr [ rbx ] , num je hexvar mov rax , qword ptr [ rip + hexvar ] cmp qword ptr [ rbx + num ] , rax jne hexvar mov rbx , qword ptr [ rbx + hexvar ] mov rax , qword ptr [ rbx + num ] mov rbx , qword ptr [ rax + num ] jmp hexvar
mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar push r12 push rbp mov rbp , qword ptr [ rip + hexvar ] push rbx test rbp , rbp je hexvar mov rdi , rsi mov rbx , rsi call hexvar lea rcx , [ rip + hexvar ] mov r12 , rax movzx eax , byte ptr [ rax ] mov rdx , r12 test al , al je hexvar nop dword ptr [ rax ] movzx eax , byte ptr [ rcx + rax ] add rdx , num mov byte ptr [ rdx - num ] , al movzx eax , byte ptr [ rdx ] test al , al jne hexvar mov rsi , r12 mov rdi , rbp call hexvar test rax , rax je hexvar mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar xor edx , edx mov rsi , rbx call hexvar test rax , rax je hexvar pop rbx xor eax , eax pop rbp pop r12 ret nop dword ptr [ rax ] xor eax , eax ret nop dword ptr [ rax + rax ] xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar jmp hexvar nop word ptr [ rax + rax ] call hexvar mov rdi , rax mov qword ptr [ rip + hexvar ] , rax jmp hexvar nop dword ptr [ rax ] mov rdi , r12 call hexvar jmp hexvar
push r13 push r12 push rbp push rbx sub rsp , num mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar xor ebp , ebp lea r13 , [ rip + hexvar ] nop dword ptr [ rax ] mov rdx , qword ptr [ r13 ] mov eax , ebp mov rcx , qword ptr [ rdx + rax * num ] test rcx , rcx je hexvar mov rax , rcx mov ebx , num nop dword ptr [ rax + rax ] mov edx , dword ptr [ rax + hexvar ] mov rax , qword ptr [ rax + hexvar ] and edx , num mov rax , qword ptr [ rax + hexvar ] cmp edx , num sbb rdx , rdx and rdx , hexvar lea rbx , [ rdx + rbx + num ] test rax , rax jne hexvar mov rax , qword ptr [ rcx + hexvar ] xor esi , esi add ebp , num mov r12 , qword ptr [ rax + hexvar ] mov rdi , r12 call hexvar mov rdi , qword ptr [ rip + hexvar ] mov rdx , rbx mov rsi , r12 call hexvar mov rdi , rbx call hexvar mov qword ptr [ r12 + hexvar ] , rax call hexvar mov rdi , qword ptr [ rip + hexvar ] mov qword ptr [ rdi + hexvar ] , rax call hexvar cmp dword ptr [ rip + hexvar ] , ebp ja hexvar mov rdi , qword ptr [ rip + hexvar ] lea rsi , [ rip - hexvar ] call hexvar mov rdi , qword ptr [ rip + hexvar ] add rsp , num pop rbx pop rbp pop r12 pop r13 jmp hexvar nop word ptr [ rax + rax ] mov ebx , num jmp hexvar
mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar push r12 push rbp mov rbp , qword ptr [ rip + hexvar ] push rbx test rbp , rbp je hexvar mov rdi , rsi mov rbx , rsi call hexvar lea rcx , [ rip + hexvar ] mov r12 , rax movzx eax , byte ptr [ rax ] mov rdx , r12 test al , al je hexvar nop dword ptr [ rax ] movzx eax , byte ptr [ rcx + rax ] add rdx , num mov byte ptr [ rdx - num ] , al movzx eax , byte ptr [ rdx ] test al , al jne hexvar mov rsi , r12 mov rdi , rbp call hexvar test rax , rax je hexvar mov rdi , qword ptr [ rip + hexvar ] test rdi , rdi je hexvar xor edx , edx mov rsi , rbx call hexvar test rax , rax je hexvar pop rbx xor eax , eax pop rbp pop r12 ret nop dword ptr [ rax ] xor eax , eax ret nop dword ptr [ rax + rax ] xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar jmp hexvar nop word ptr [ rax + rax ] call hexvar mov rdi , rax mov qword ptr [ rip + hexvar ] , rax jmp hexvar nop dword ptr [ rax ] mov rdi , r12 call hexvar jmp hexvar
,
,
,
,
,
,
,
push r15 mov r15d , edi mov rdi , rsi push r14 mov r14d , ecx push r13 mov r13 , r8 push r12 mov r12 , r9 push rbp push rbx mov rbx , rsi sub rsp , hexvar mov qword ptr [ rsp + num ] , rdx call hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , qword ptr [ rip + hexvar ] mov esi , ebx mov rdx , qword ptr [ rsp + num ] mov rbp , qword ptr [ rax + hexvar ] lea rcx , [ rbp + rbx ] mov qword ptr [ rax + hexvar ] , rcx mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rdi + hexvar ] , rdx mov dword ptr [ rdi + hexvar ] , r15d mov dword ptr [ rdi + hexvar ] , r14d mov qword ptr [ rdi + hexvar ] , r13 mov qword ptr [ rdi + hexvar ] , r12 mov qword ptr [ rdi + hexvar ] , rax call hexvar mov r12 , qword ptr [ rip + hexvar ] lea rdi , [ r12 + hexvar ] call hexvar mov rdi , rbx mov qword ptr [ r12 + hexvar ] , rax call hexvar add rsp , hexvar mov rax , rbp pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
,
push rbp mov ebp , edi push rbx sub rsp , hexvar lea rdi , [ rsp + hexvar ] call hexvar test rax , rax je hexvar mov edx , num mov esi , hexvar mov rdi , rax mov rbx , rax call hexvar test eax , eax jne hexvar test ebp , ebp jne hexvar call hexvar mov rdi , rbx call hexvar mov esi , ebp mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp ret nop word ptr [ rax + rax ] call hexvar add rsp , hexvar pop rbx pop rbp ret
,
,
,
push r12 push rbp mov rbp , rdi push rbx sub rsp , hexvar call hexvar mov rbx , rsp mov r12 , rax mov rsi , rax mov rdi , rbx call hexvar mov rdx , r12 mov rsi , rbp mov rdi , rbx call hexvar mov rsi , qword ptr [ rip + hexvar ] xor edx , edx mov rdi , rbx call hexvar mov rdi , rbx call hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar pop rbx pop rbp pop r12 ret
,
,
,
,
,
push rbx mov rbx , rdi mov rdi , rsi call hexvar mov rdi , rbx pop rbx mov qword ptr [ rip + hexvar ] , rax jmp hexvar
sub rsp , num mov qword ptr [ rip + hexvar ] , num mov qword ptr [ rip + hexvar ] , num call hexvar xor edi , edi add rsp , num jmp hexvar
,
,
,
,
,
sub rsp , num mov rsi , qword ptr [ rip + hexvar ] test rsi , rsi je hexvar mov rax , qword ptr [ rsi + hexvar ] test byte ptr [ rip + hexvar ] , hexvar je hexvar mov ecx , dword ptr [ rsi + hexvar ] test ecx , ecx je hexvar test rax , rax je hexvar mov edx , dword ptr [ rax + hexvar ] test edx , edx jne hexvar mov edi , num call hexvar mov rsi , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rsi + hexvar ] nop dword ptr [ rax ] cmp qword ptr [ rip + hexvar ] , rsi mov qword ptr [ rip + hexvar ] , rax jae hexvar cmp qword ptr [ rip + hexvar ] , rsi ja hexvar lea rdi , [ rip + hexvar ] call hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar mov rax , qword ptr [ rip + hexvar ] lea rcx , [ rip + hexvar ] movzx edx , byte ptr [ rax ] cmp byte ptr [ rcx + rdx ] , num jne hexvar add rax , num nop word ptr [ rax + rax ] mov rdx , rax mov qword ptr [ rip + hexvar ] , rax add rax , num movzx edx , byte ptr [ rdx ] cmp byte ptr [ rcx + rdx ] , num je hexvar add rsp , num jmp hexvar mov qword ptr [ rip + hexvar ] , rsi mov qword ptr [ rip + hexvar ] , rsi jmp hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax xor eax , eax call hexvar jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbx mov eax , dword ptr [ rdi ] mov rbx , rdi movdqu xmm0 , xmmword ptr [ rdi + hexvar ] mov rsi , qword ptr [ rdi + hexvar ] mov dword ptr [ rip + hexvar ] , eax mov eax , dword ptr [ rdi + num ] mov dword ptr [ rip + hexvar ] , eax mov rax , qword ptr [ rdi + num ] movaps xmmword ptr [ rip + hexvar ] , xmm0 mov qword ptr [ rip + hexvar ] , rax mov eax , dword ptr [ rdi + hexvar ] mov dword ptr [ rip + hexvar ] , eax mov eax , dword ptr [ rdi + hexvar ] mov dword ptr [ rip + hexvar ] , eax test rsi , rsi je hexvar mov rdx , qword ptr [ rdi + hexvar ] cmp rdx , hexvar ja hexvar lea rcx , [ rip + hexvar ] mov rdi , rcx call hexvar mov rdi , qword ptr [ rbx + hexvar ] mov qword ptr [ rip + hexvar ] , rax mov rax , qword ptr [ rbx + hexvar ] mov qword ptr [ rip + hexvar ] , rax call hexvar mov rax , qword ptr [ rbx + hexvar ] mov rdi , rbx mov qword ptr [ rip + hexvar ] , rax movzx eax , byte ptr [ rbx + hexvar ] mov byte ptr [ rip + hexvar ] , al mov rax , qword ptr [ rbx + hexvar ] mov qword ptr [ rip + hexvar ] , rax movzx eax , byte ptr [ rbx + hexvar ] pop rbx mov byte ptr [ rip + hexvar ] , al jmp hexvar nop dword ptr [ rax ] mov qword ptr [ rip + hexvar ] , num jmp hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar
mov rsi , qword ptr [ rdi ] test rsi , rsi je hexvar push r12 lea r12 , [ rip + hexvar ] push rbp push rbx mov rbx , rdi nop word ptr cs : [ rax + rax ] mov rdi , qword ptr [ rip + hexvar ] mov rdx , rbx call hexvar mov rbp , rax test rax , rax je hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar mov ecx , num mov rsi , rbp mov rdi , r12 repe cmpsb byte ptr [ rsi ] , byte ptr [ rdi ] seta al sbb al , num test al , al jne hexvar add rbx , hexvar mov rsi , qword ptr [ rbx ] test rsi , rsi jne hexvar pop rbx pop rbp pop r12 ret ret mov rbx , qword ptr [ rip + hexvar ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdx , rbp mov rdi , rax mov rsi , rbx xor eax , eax call hexvar
push rbx mov rbx , qword ptr [ rip + hexvar ] test rbx , rbx je hexvar mov edi , dword ptr [ rbx + hexvar ] test edi , edi je hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rcx , qword ptr [ rip + hexvar ] mov rdx , rax xor eax , eax mov esi , dword ptr [ rcx + hexvar ] mov rdi , qword ptr [ rcx + hexvar ] call hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rcx , qword ptr [ rip + hexvar ] mov rdx , rax xor eax , eax mov esi , dword ptr [ rcx + num ] mov rdi , qword ptr [ rcx ] call hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar mov rax , qword ptr [ rip + hexvar ] lea rcx , [ rip + hexvar ] movzx edx , byte ptr [ rax ] cmp byte ptr [ rcx + rdx ] , num jne hexvar add rax , num nop dword ptr [ rax + rax ] mov rdx , rax mov qword ptr [ rip + hexvar ] , rax add rax , num movzx edx , byte ptr [ rdx ] cmp byte ptr [ rcx + rdx ] , num je hexvar pop rbx jmp hexvar nop dword ptr [ rax ] lea rdi , [ rbx + hexvar ] call hexvar xor edx , edx mov qword ptr [ rbx + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov esi , dword ptr [ rax + hexvar ] test esi , esi sete dl or edx , dword ptr [ rax + hexvar ] mov dword ptr [ rax + hexvar ] , edx test byte ptr [ rip + hexvar ] , hexvar je hexvar mov rcx , qword ptr [ rax + hexvar ] test rcx , rcx je hexvar mov ecx , dword ptr [ rcx + hexvar ] test ecx , ecx jne hexvar test edx , edx jne hexvar mov edi , num call hexvar mov rax , qword ptr [ rip + hexvar ] nop word ptr [ rax + rax ] mov dword ptr [ rax + hexvar ] , num jmp hexvar nop dword ptr [ rax ] xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax xor eax , eax call hexvar jmp hexvar nop word ptr [ rax + rax ] mov edi , num call hexvar mov rax , qword ptr [ rip + hexvar ] jmp hexvar
sub rsp , num mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar add rsp , num jmp hexvar
push rbx sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 test al , al je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 lea rbx , [ rsp + hexvar ] lea rcx , [ rsp + num ] mov rdx , rdi mov esi , hexvar lea rax , [ rsp + hexvar ] mov rdi , rbx mov dword ptr [ rsp + num ] , num mov qword ptr [ rsp + hexvar ] , rax lea rax , [ rsp + hexvar ] mov dword ptr [ rsp + hexvar ] , hexvar mov qword ptr [ rsp + hexvar ] , rax call hexvar mov rdx , rbx xor esi , esi xor edi , edi call hexvar add rsp , hexvar pop rbx ret
,
sub rsp , num mov eax , dword ptr [ rip + hexvar ] test byte ptr [ rip + hexvar ] , num jne hexvar lea edx , [ rax + num ] mov dword ptr [ rip + hexvar ] , edx cmp eax , hexvar je hexvar cmp eax , hexvar je hexvar test byte ptr [ rip + hexvar ] , num je hexvar mov ecx , dword ptr [ rip + hexvar ] cmp ecx , eax je hexvar mov edx , dword ptr [ rip + hexvar ] cmp ecx , edx jne hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar mov eax , dword ptr [ rip + hexvar ] mov edx , dword ptr [ rip + hexvar ] shl edx , num shl eax , hexvar xor esi , esi mov edi , num or eax , edx or qword ptr [ rip + hexvar ] , rax mov edx , num add rsp , num jmp hexvar nop dword ptr [ rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , num ret nop word ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov qword ptr [ rip + hexvar ] , rax jmp hexvar
push rbx sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 test al , al je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar add rsp , hexvar pop rbx ret nop word ptr [ rax + rax ] lea rbx , [ rsp + hexvar ] lea rax , [ rsp + hexvar ] mov rdx , rdi mov esi , hexvar mov qword ptr [ rsp + hexvar ] , rax lea rcx , [ rsp + num ] lea rax , [ rsp + hexvar ] mov rdi , rbx mov dword ptr [ rsp + num ] , num mov dword ptr [ rsp + hexvar ] , hexvar mov qword ptr [ rsp + hexvar ] , rax call hexvar mov rdx , rbx xor esi , esi xor edi , edi call hexvar add rsp , hexvar pop rbx ret
sub rsp , num mov ecx , dword ptr [ rip + hexvar ] mov esi , dword ptr [ rip + hexvar ] mov rdi , qword ptr [ rip + hexvar ] cmp ecx , esi je hexvar mov edx , dword ptr [ rip + hexvar ] mov eax , dword ptr [ rip + hexvar ] shl ecx , hexvar shl eax , hexvar shl edx , num or edx , eax mov eax , edx or rax , rdi or rax , rsi or rax , rcx mov qword ptr [ rip + hexvar ] , rax add rsp , num ret nop dword ptr [ rax ] mov rax , qword ptr [ rip + hexvar ] mov rdx , rdi and edx , hexvar and eax , hexvar or rax , rdx jne hexvar lea rsi , [ rip + hexvar ] mov edx , num xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar mov rdi , qword ptr [ rip + hexvar ] mov ecx , dword ptr [ rip + hexvar ] mov esi , dword ptr [ rip + hexvar ] jmp hexvar
push r12 mov r12d , esi push rbp mov rbp , rdi push rbx mov rbx , rdx call hexvar test rbp , rbp je hexvar mov edx , num test rbx , rbx je hexvar lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov r8d , r12d mov rcx , rbp mov rdx , rbx mov rdi , qword ptr [ rip + hexvar ] mov rsi , rax xor eax , eax call hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , qword ptr [ rip + hexvar ] mov rsi , rax xor eax , eax call hexvar mov edi , num call hexvar xor edi , edi lea rsi , [ rip + hexvar ] call hexvar mov rdi , qword ptr [ rip + hexvar ] mov ecx , r12d mov rdx , rbp mov rsi , rax xor eax , eax call hexvar jmp hexvar test rbx , rbx je hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , qword ptr [ rip + hexvar ] mov rdx , rbx mov rsi , rax xor eax , eax call hexvar jmp hexvar lea rbx , [ rip + hexvar ] jmp hexvar
cmp qword ptr [ rip + hexvar ] , num je hexvar push rbp push rbx mov rbx , rdi sub rsp , num call hexvar test eax , eax jne hexvar mov rdi , qword ptr [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , num test eax , eax je hexvar add rsp , num pop rbx pop rbp ret nop call hexvar jmp hexvar nop word ptr [ rax + rax ] ret call hexvar mov edi , eax call hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi mov rbp , rax call hexvar mov rdx , rbp mov rsi , rbx mov rdi , rax xor eax , eax call hexvar
,
,
,
push rbp push rbx sub rsp , hexvar lea rdi , [ rsp + hexvar ] call hexvar mov rsi , qword ptr [ rip + hexvar ] mov rbx , rax test rsi , rsi je hexvar mov eax , dword ptr [ rsp + hexvar ] cmp eax , dword ptr [ rip + hexvar ] je hexvar mov rdi , rbx mov dword ptr [ rip + hexvar ] , eax call hexvar test eax , eax jne hexvar mov rsi , rbx mov edi , hexvar lea rbp , [ rsp + hexvar ] mov dword ptr [ rip + hexvar ] , num call hexvar mov ecx , dword ptr [ rip + hexvar ] mov rdi , rbp xor eax , eax lea rdx , [ rip + hexvar ] lea rsi , [ rip + hexvar ] call hexvar mov eax , dword ptr [ rip + hexvar ] add dword ptr [ rip + hexvar ] , num test eax , eax jne hexvar mov edi , hexvar call hexvar mov ecx , dword ptr [ rsp + hexvar ] mov r8 , rbp mov edx , hexvar mov rbx , rax mov rdi , rax lea rsi , [ rip + hexvar ] xor eax , eax call hexvar mov rdi , rbx call hexvar lea rdx , [ rip + hexvar ] mov edi , hexvar lea rsi , [ rip + hexvar ] call hexvar call hexvar mov rdi , rbp call hexvar mov rdi , rbx mov dword ptr [ rip + hexvar ] , num add rsp , hexvar pop rbx pop rbp jmp hexvar nop dword ptr [ rax + rax ] mov rdi , qword ptr [ rip + hexvar ] call hexvar lea rdi , [ rax + hexvar ] call hexvar mov r9 , qword ptr [ rip + hexvar ] mov ecx , dword ptr [ rsp + hexvar ] mov r8 , rbp mov rbx , rax mov rdi , rax xor eax , eax mov edx , hexvar lea rsi , [ rip + hexvar ] call hexvar jmp hexvar nop dword ptr [ rax ] mov rdi , qword ptr [ rip + hexvar ] call hexvar mov rdi , rbx call hexvar mov qword ptr [ rip + hexvar ] , rax jmp hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov eax , dword ptr [ rsp + hexvar ] mov rsi , qword ptr [ rip + hexvar ] jmp hexvar nop dword ptr [ rax ] add rsp , hexvar pop rbx pop rbp ret nop word ptr [ rax + rax ] mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov eax , dword ptr [ rsp + hexvar ] mov dword ptr [ rip + hexvar ] , eax jmp hexvar
push rbp push rbx sub rsp , hexvar lea rdi , [ rsp + hexvar ] call hexvar mov rsi , qword ptr [ rip + hexvar ] mov rbx , rax test rsi , rsi je hexvar mov eax , dword ptr [ rsp + hexvar ] cmp eax , dword ptr [ rip + hexvar ] je hexvar mov rdi , rbx mov dword ptr [ rip + hexvar ] , eax call hexvar test eax , eax jne hexvar mov rsi , rbx mov edi , hexvar lea rbp , [ rsp + hexvar ] mov dword ptr [ rip + hexvar ] , num call hexvar mov ecx , dword ptr [ rip + hexvar ] mov rdi , rbp xor eax , eax lea rdx , [ rip + hexvar ] lea rsi , [ rip + hexvar ] call hexvar mov eax , dword ptr [ rip + hexvar ] add dword ptr [ rip + hexvar ] , num test eax , eax jne hexvar mov edi , hexvar call hexvar mov ecx , dword ptr [ rsp + hexvar ] mov r8 , rbp mov edx , hexvar mov rbx , rax mov rdi , rax lea rsi , [ rip + hexvar ] xor eax , eax call hexvar mov rdi , rbx call hexvar lea rdx , [ rip + hexvar ] mov edi , hexvar lea rsi , [ rip + hexvar ] call hexvar call hexvar mov rdi , rbp call hexvar mov rdi , rbx mov dword ptr [ rip + hexvar ] , num add rsp , hexvar pop rbx pop rbp jmp hexvar nop dword ptr [ rax + rax ] mov rdi , qword ptr [ rip + hexvar ] call hexvar lea rdi , [ rax + hexvar ] call hexvar mov r9 , qword ptr [ rip + hexvar ] mov ecx , dword ptr [ rsp + hexvar ] mov r8 , rbp mov rbx , rax mov rdi , rax xor eax , eax mov edx , hexvar lea rsi , [ rip + hexvar ] call hexvar jmp hexvar nop dword ptr [ rax ] mov rdi , qword ptr [ rip + hexvar ] call hexvar mov rdi , rbx call hexvar mov qword ptr [ rip + hexvar ] , rax jmp hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov eax , dword ptr [ rsp + hexvar ] mov rsi , qword ptr [ rip + hexvar ] jmp hexvar nop dword ptr [ rax ] add rsp , hexvar pop rbx pop rbp ret nop word ptr [ rax + rax ] mov rdi , rax call hexvar mov qword ptr [ rip + hexvar ] , rax mov eax , dword ptr [ rsp + hexvar ] mov dword ptr [ rip + hexvar ] , eax jmp hexvar
,
,
,
,
,
,
,
,
push r13 push r12 mov r12d , edi push rbp push rbx sub rsp , hexvar lea rdi , [ rsp + hexvar ] call hexvar mov rbx , rax mov rax , qword ptr [ rip + hexvar ] movzx edx , byte ptr [ rax ] cmp dl , hexvar jne hexvar lea rcx , [ rax + num ] mov qword ptr [ rip + hexvar ] , rcx movzx edx , byte ptr [ rax + num ] mov rax , rcx cmp dl , hexvar jne hexvar mov rbp , qword ptr [ rip + hexvar ] add rax , num mov qword ptr [ rip + hexvar ] , rax test rbp , rbp je hexvar mov rsi , rbx mov rdi , rbp call hexvar test eax , eax je hexvar mov rdi , rbx xor edx , edx lea rsi , [ rip + hexvar ] xor eax , eax call hexvar mov rdi , qword ptr [ rip + hexvar ] mov r13 , rax test rdi , rdi je hexvar call hexvar mov rdi , qword ptr [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rbx mov qword ptr [ rip + hexvar ] , r13 mov rdx , r13 mov rsi , rbx mov edi , r12d call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax ] mov r13 , qword ptr [ rip + hexvar ] mov rbx , rbp jmp hexvar nop dword ptr [ rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
,
push rbp push rbx sub rsp , hexvar mov rbp , rsp mov rdi , rbp call hexvar mov rbx , rax lea rax , [ rip + hexvar ] cmp rbx , rax je hexvar mov rcx , qword ptr [ rip + hexvar ] xor edx , edx cmp byte ptr [ rcx ] , hexvar je hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar call hexvar add rsp , hexvar pop rbx pop rbp ret nop dword ptr [ rax ] mov rsi , rbp mov rdi , rbx call hexvar call hexvar add rsp , hexvar pop rbx pop rbp ret nop mov rdi , rbp call hexvar mov rcx , qword ptr [ rip + hexvar ] xor edx , edx mov rbx , rax cmp byte ptr [ rcx ] , hexvar jne hexvar add rcx , num lea rdi , [ rsp + hexvar ] mov qword ptr [ rip + hexvar ] , rcx call hexvar mov rdx , rax jmp hexvar
,
,
,
,
,
,
sub rsp , num mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar add rsp , num jmp hexvar
,
,
,
,
push rbp push rbx sub rsp , num mov rdx , qword ptr [ rip + hexvar ] lea rbx , [ rdx + num ] mov qword ptr [ rip + hexvar ] , rbx movzx eax , byte ptr [ rdx + num ] cmp al , hexvar je hexvar cmp al , hexvar je hexvar cmp al , num jne hexvar lea rax , [ rbx + num ] mov qword ptr [ rip + hexvar ] , rax movzx edx , byte ptr [ rax ] mov rbx , rax add rax , num cmp dl , hexvar je hexvar cmp dl , num je hexvar mov edx , dword ptr [ rip + hexvar ] test edx , edx je hexvar movzx eax , byte ptr [ rbx ] lea rdx , [ rip + hexvar ] cmp byte ptr [ rdx + rax ] , num mov rbp , rax jne hexvar nop dword ptr [ rax + rax ] add rbx , num movzx eax , byte ptr [ rbx ] cmp byte ptr [ rdx + rax ] , num mov rbp , rax je hexvar mov byte ptr [ rbx ] , num jmp hexvar nop dword ptr [ rax ] xor ebp , ebp xor ebx , ebx test esi , esi mov eax , esi sete dl movzx edx , dl cmovns eax , edx mov esi , eax call hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar add rsp , num pop rbx pop rbp ret nop dword ptr [ rax ] lea rbx , [ rdx + num ] mov qword ptr [ rip + hexvar ] , rbx movzx eax , byte ptr [ rdx + num ] test esi , esi jns hexvar cmp al , hexvar jne hexvar lea rbx , [ rdx + num ] mov qword ptr [ rip + hexvar ] , rbx movzx eax , byte ptr [ rdx + num ] jmp hexvar nop dword ptr [ rax + rax ] call hexvar add rsp , num movsx esi , bpl mov rdi , rbx pop rbx pop rbp jmp hexvar
,
,
,
,
,
,
,
push rbp push rbx sub rsp , hexvar mov rbp , rsp mov rdi , rbp call hexvar mov rbx , rax lea rax , [ rip + hexvar ] cmp rbx , rax je hexvar mov rcx , qword ptr [ rip + hexvar ] xor edx , edx cmp byte ptr [ rcx ] , hexvar je hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax je hexvar call hexvar add rsp , hexvar pop rbx pop rbp ret nop dword ptr [ rax ] mov rsi , rbp mov rdi , rbx call hexvar call hexvar add rsp , hexvar pop rbx pop rbp ret nop mov rdi , rbp call hexvar mov rcx , qword ptr [ rip + hexvar ] xor edx , edx mov rbx , rax cmp byte ptr [ rcx ] , hexvar jne hexvar add rcx , num lea rdi , [ rsp + hexvar ] mov qword ptr [ rip + hexvar ] , rcx call hexvar mov rdx , rax jmp hexvar
,
,
push r13 mov r13d , edi push r12 push rbp push rbx sub rsp , hexvar lea rdi , [ rsp + hexvar ] lea rbp , [ rsp + hexvar ] call hexvar mov rdi , qword ptr [ rip + hexvar ] xor edx , edx xor esi , esi mov r12 , rax call hexvar mov rdi , rbp mov rsi , rax sub rsi , qword ptr [ rip + hexvar ] mov rbx , rax call hexvar mov rsi , qword ptr [ rip + hexvar ] mov rdx , rbx mov rdi , rbp sub rdx , rsi call hexvar mov qword ptr [ rip + hexvar ] , rbx lea rbx , [ rsp + hexvar ] mov rdi , rbx call hexvar xor esi , esi mov rcx , rbx mov rdx , rbp lea r8 , [ rip - hexvar ] mov edi , r13d call hexvar test rax , rax je hexvar mov esi , dword ptr [ rsp + hexvar ] mov rcx , rax lea rdx , [ rip + hexvar ] mov rdi , r12 xor eax , eax call hexvar mov rdi , rbp call hexvar mov rsi , qword ptr [ rip + hexvar ] mov edx , num mov rdi , rbx call hexvar mov rdi , rbx call hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret
sub rsp , num xor esi , esi call hexvar add rsp , num cdqe ret
,
,
,
lea rsi , [ rip - hexvar ] jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
lea rdi , [ rip + hexvar ] jmp hexvar
push rbx mov rbx , rdi sub rsp , hexvar mov rdi , rsp call hexvar mov qword ptr [ rbx ] , rax mov rax , qword ptr [ rip + hexvar ] lea rdx , [ rax + num ] mov qword ptr [ rip + hexvar ] , rdx movzx eax , byte ptr [ rax ] add rsp , hexvar pop rbx ret
,
,
,
,
,
push r15 push r14 mov r14 , r9 push r13 mov r13 , rdi push r12 mov r12d , r8d push rbp mov rbp , rdx lea rdx , [ rsi + num ] push rbx mov rbx , rsi sub rsp , hexvar mov qword ptr [ rsp + num ] , rcx mov rcx , rbp call hexvar cmp rax , qword ptr [ rbx + num ] mov r15 , rax mov eax , dword ptr [ rip + hexvar ] jae hexvar mov rcx , qword ptr [ rbx ] movsx ecx , byte ptr [ rcx + r15 ] cmp r12d , ecx je hexvar cmp r12d , hexvar sete cl test eax , eax je hexvar test cl , cl jne hexvar mov rdi , rbp call hexvar mov rdi , qword ptr [ rsp + num ] mov rsi , rax call hexvar test rax , rax je hexvar cmp qword ptr [ rax + hexvar ] , num jne hexvar lea rsi , [ rax + hexvar ] mov rdi , r14 call hexvar add rsp , hexvar mov rax , r15 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret lea rsi , [ rax + hexvar ] mov rdi , r14 call hexvar jmp hexvar nop cmp r13 , r15 je hexvar mov rax , qword ptr [ rbx ] cmp byte ptr [ rax + r15 - num ] , hexvar jne hexvar mov rdi , rbp call hexvar mov rdi , qword ptr [ rsp + num ] mov rsi , rax call hexvar test rax , rax jne hexvar nop word ptr [ rax + rax ] mov eax , dword ptr [ rsp + hexvar ] test eax , eax je hexvar mov rsi , rbp mov rdi , r14 call hexvar jmp hexvar nop dword ptr [ rax ] cmp r12d , hexvar jne hexvar mov esi , hexvar mov rdi , r14 call hexvar mov rsi , rbp mov rdi , r14 call hexvar cmp r13 , r15 je hexvar mov rax , qword ptr [ rbx ] cmp byte ptr [ rax + r15 - num ] , hexvar jne hexvar mov esi , hexvar mov rdi , r14 call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov edx , dword ptr [ rip + hexvar ] test edx , edx je hexvar test eax , eax je hexvar cmp r12d , hexvar sete cl test eax , eax je hexvar test cl , cl je hexvar add r15 , num jmp hexvar nop mov rdi , r14 mov esi , hexvar call hexvar mov rsi , rbp mov rdi , r14 call hexvar jmp hexvar
push r12 push rbp mov rbp , rdi push rbx sub rsp , hexvar call hexvar mov rbx , rsp mov r12 , rax mov rsi , rax mov rdi , rbx call hexvar mov rdx , r12 mov rsi , rbp mov rdi , rbx call hexvar mov rsi , qword ptr [ rip + hexvar ] xor edx , edx mov rdi , rbx call hexvar mov rdi , rbx call hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rip + hexvar ] , rax add rsp , hexvar pop rbx pop rbp pop r12 ret
,
push r15 push r14 mov r14 , r9 push r13 mov r13 , rdi push r12 mov r12d , r8d push rbp mov rbp , rdx lea rdx , [ rsi + num ] push rbx mov rbx , rsi sub rsp , hexvar mov qword ptr [ rsp + num ] , rcx mov rcx , rbp call hexvar cmp rax , qword ptr [ rbx + num ] mov r15 , rax mov eax , dword ptr [ rip + hexvar ] jae hexvar mov rcx , qword ptr [ rbx ] movsx ecx , byte ptr [ rcx + r15 ] cmp r12d , ecx je hexvar cmp r12d , hexvar sete cl test eax , eax je hexvar test cl , cl jne hexvar mov rdi , rbp call hexvar mov rdi , qword ptr [ rsp + num ] mov rsi , rax call hexvar test rax , rax je hexvar cmp qword ptr [ rax + hexvar ] , num jne hexvar lea rsi , [ rax + hexvar ] mov rdi , r14 call hexvar add rsp , hexvar mov rax , r15 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret lea rsi , [ rax + hexvar ] mov rdi , r14 call hexvar jmp hexvar nop cmp r13 , r15 je hexvar mov rax , qword ptr [ rbx ] cmp byte ptr [ rax + r15 - num ] , hexvar jne hexvar mov rdi , rbp call hexvar mov rdi , qword ptr [ rsp + num ] mov rsi , rax call hexvar test rax , rax jne hexvar nop word ptr [ rax + rax ] mov eax , dword ptr [ rsp + hexvar ] test eax , eax je hexvar mov rsi , rbp mov rdi , r14 call hexvar jmp hexvar nop dword ptr [ rax ] cmp r12d , hexvar jne hexvar mov esi , hexvar mov rdi , r14 call hexvar mov rsi , rbp mov rdi , r14 call hexvar cmp r13 , r15 je hexvar mov rax , qword ptr [ rbx ] cmp byte ptr [ rax + r15 - num ] , hexvar jne hexvar mov esi , hexvar mov rdi , r14 call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov edx , dword ptr [ rip + hexvar ] test edx , edx je hexvar test eax , eax je hexvar cmp r12d , hexvar sete cl test eax , eax je hexvar test cl , cl je hexvar add r15 , num jmp hexvar nop mov rdi , r14 mov esi , hexvar call hexvar mov rsi , rbp mov rdi , r14 call hexvar jmp hexvar
,
push rbp mov rbp , rsi push rbx mov rbx , rdi sub rsp , num mov rsi , qword ptr [ rsi + num ] call hexvar mov rsi , qword ptr [ rbp ] mov rdx , qword ptr [ rbp + num ] mov rdi , qword ptr [ rbx + num ] add rdi , qword ptr [ rbx ] call hexvar mov rax , qword ptr [ rbp + num ] add qword ptr [ rbx + num ] , rax add rsp , num pop rbx pop rbp ret
,
,
push r15 push r14 mov r14 , r9 push r13 mov r13 , rdi push r12 mov r12d , r8d push rbp mov rbp , rdx lea rdx , [ rsi + num ] push rbx mov rbx , rsi sub rsp , hexvar mov qword ptr [ rsp + num ] , rcx mov rcx , rbp call hexvar cmp rax , qword ptr [ rbx + num ] mov r15 , rax mov eax , dword ptr [ rip + hexvar ] jae hexvar mov rcx , qword ptr [ rbx ] movsx ecx , byte ptr [ rcx + r15 ] cmp r12d , ecx je hexvar cmp r12d , hexvar sete cl test eax , eax je hexvar test cl , cl jne hexvar mov rdi , rbp call hexvar mov rdi , qword ptr [ rsp + num ] mov rsi , rax call hexvar test rax , rax je hexvar cmp qword ptr [ rax + hexvar ] , num jne hexvar lea rsi , [ rax + hexvar ] mov rdi , r14 call hexvar add rsp , hexvar mov rax , r15 pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret lea rsi , [ rax + hexvar ] mov rdi , r14 call hexvar jmp hexvar nop cmp r13 , r15 je hexvar mov rax , qword ptr [ rbx ] cmp byte ptr [ rax + r15 - num ] , hexvar jne hexvar mov rdi , rbp call hexvar mov rdi , qword ptr [ rsp + num ] mov rsi , rax call hexvar test rax , rax jne hexvar nop word ptr [ rax + rax ] mov eax , dword ptr [ rsp + hexvar ] test eax , eax je hexvar mov rsi , rbp mov rdi , r14 call hexvar jmp hexvar nop dword ptr [ rax ] cmp r12d , hexvar jne hexvar mov esi , hexvar mov rdi , r14 call hexvar mov rsi , rbp mov rdi , r14 call hexvar cmp r13 , r15 je hexvar mov rax , qword ptr [ rbx ] cmp byte ptr [ rax + r15 - num ] , hexvar jne hexvar mov esi , hexvar mov rdi , r14 call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov edx , dword ptr [ rip + hexvar ] test edx , edx je hexvar test eax , eax je hexvar cmp r12d , hexvar sete cl test eax , eax je hexvar test cl , cl je hexvar add r15 , num jmp hexvar nop mov rdi , r14 mov esi , hexvar call hexvar mov rsi , rbp mov rdi , r14 call hexvar jmp hexvar
push rbx mov rbx , rdi lea rdi , [ rdi + hexvar ] call hexvar lea rdi , [ rbx + hexvar ] call hexvar lea rdi , [ rbx + num ] call hexvar mov rdi , rbx pop rbx jmp hexvar
push rbx mov edi , hexvar call hexvar mov rbx , rax lea rdi , [ rax + num ] call hexvar lea rdi , [ rbx + hexvar ] call hexvar lea rdi , [ rbx + hexvar ] call hexvar mov rax , rbx mov qword ptr [ rbx ] , num mov dword ptr [ rbx + hexvar ] , num pop rbx ret
,
,
,
,
,
,
,
,
,
,
mov rax , qword ptr [ rdi + hexvar ] test rax , rax je hexvar push r13 push r12 push rbp push rbx sub rsp , num mov rbx , qword ptr [ rax ] test rbx , rbx je hexvar mov rbp , rdi lea r12 , [ rip + hexvar ] jmp hexvar nop word ptr [ rax + rax ] xor esi , esi mov edi , r13d call hexvar mov rdi , qword ptr [ rip + hexvar ] call hexvar mov rax , qword ptr [ rip + hexvar ] cmp qword ptr [ rax + hexvar ] , num mov qword ptr [ rax + hexvar ] , num jne hexvar mov rbx , qword ptr [ rbx + hexvar ] test rbx , rbx je hexvar mov esi , dword ptr [ rbx + hexvar ] mov rdi , rbp call hexvar call hexvar test eax , eax je hexvar mov dword ptr [ rip + hexvar ] , num xor r13d , r13d cmp qword ptr [ rbx + hexvar ] , num mov rdi , qword ptr [ rip + hexvar ] je hexvar test byte ptr [ rdi + hexvar ] , hexvar je hexvar mov eax , dword ptr [ rdi + hexvar ] test eax , eax jne hexvar call hexvar test eax , eax jne hexvar xor edx , edx xor esi , esi mov edi , r13d call hexvar jmp hexvar nop word ptr [ rax + rax ] call hexvar mov rdi , qword ptr [ rip + hexvar ] mov r13d , eax test eax , eax je hexvar cmp rdi , r12 je hexvar cmp dword ptr [ rdi + hexvar ] , num mov r13d , num cmovle r13d , dword ptr [ rdi + hexvar ] jmp hexvar nop dword ptr [ rax ] xor edx , edx test al , num jne hexvar nop shr eax , num add edx , num test al , num je hexvar cmp r13d , edx cmovl r13d , edx jmp hexvar nop word ptr [ rax + rax ] add rsp , num pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax + rax ] xor r13d , r13d jmp hexvar ret lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar
,
push r13 push r12 push rbp push rbx sub rsp , num mov rsi , qword ptr [ rip + hexvar ] mov rbp , qword ptr [ rip + hexvar ] mov r12d , dword ptr [ rip + hexvar ] movzx eax , byte ptr [ rsi ] cmp al , hexvar jne hexvar lea rdx , [ rsi + num ] mov qword ptr [ rip + hexvar ] , rdx movzx eax , byte ptr [ rsi + num ] mov rsi , rdx cmp al , hexvar jne hexvar lea rbx , [ rsi + num ] mov qword ptr [ rip + hexvar ] , rbx nop dword ptr [ rax + rax ] call hexvar cmp eax , hexvar jbe hexvar mov rax , qword ptr [ rip + hexvar ] xor esi , esi lea rdi , [ rip + hexvar ] movzx edx , byte ptr [ rax ] mov byte ptr [ rax ] , num mov rax , qword ptr [ rip + hexvar ] mov byte ptr [ rax - num ] , num mov rax , qword ptr [ rip + hexvar ] mov byte ptr [ rax ] , dl call hexvar mov rdi , qword ptr [ rip + hexvar ] mov edx , hexvar mov r13 , rax mov rsi , rax call hexvar mov esi , num mov rdi , r13 call hexvar mov rdi , rbx call hexvar mov edi , num lea r13d , [ rax + num ] call hexvar mov rsi , r13 mov edx , num mov rdi , rax call hexvar mov edi , num call hexvar mov edx , num xor esi , esi mov rdi , rax call hexvar mov edi , num call hexvar mov edx , num mov esi , num mov rdi , rax call hexvar mov rdi , r13 call hexvar mov rdx , r13 mov rsi , rbx mov rdi , rax call hexvar xor edx , edx xor esi , esi mov edi , num call hexvar mov esi , r12d mov rdi , rbp call hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 jmp hexvar nop dword ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 jmp hexvar
push rbp mov ebp , esi xor esi , esi push rbx sub rsp , num call hexvar mov esi , ebp mov rdi , rax mov rbx , rax call hexvar add rsp , num mov rax , rbx pop rbx pop rbp ret
,
,
,
,
,
,
,
push rbp mov rbp , rdi mov rdi , rsi push rbx sub rsp , num call hexvar mov rdi , rbp mov rbx , rax call hexvar mov edx , dword ptr [ rbx ] mov dword ptr [ rax ] , edx add rsp , num pop rbx pop rbp ret
,
push r13 mov r13 , rsi push r12 push rbp mov rbp , rdi mov rdi , rsi push rbx sub rsp , num call hexvar mov rdi , rbp mov r12 , rax call hexvar mov rdx , qword ptr [ r12 + num ] mov rbx , rax test rdx , rdx je hexvar mov rax , qword ptr [ rax + num ] test rax , rax je hexvar movdqu xmm0 , xmmword ptr [ rdx ] movups xmmword ptr [ rax ] , xmm0 movdqu xmm1 , xmmword ptr [ rdx + hexvar ] movups xmmword ptr [ rax + hexvar ] , xmm1 mov rdi , r13 call hexvar mov rdi , rbp mov rbx , rax call hexvar mov rdx , qword ptr [ rbx + hexvar ] mov rdi , rbp mov qword ptr [ rax + hexvar ] , rdx call hexvar mov rdi , r13 movzx ebx , byte ptr [ rax + hexvar ] call hexvar mov rdi , rbp and ebx , num mov r12d , ebx movzx ebx , byte ptr [ rax + hexvar ] call hexvar and ebx , hexvar or ebx , r12d mov byte ptr [ rax + hexvar ] , bl add rsp , num pop rbx pop rbp pop r12 pop r13 ret nop word ptr [ rax + rax ] mov rdi , qword ptr [ rax + num ] test rdi , rdi je hexvar call hexvar mov qword ptr [ rbx + num ] , num jmp hexvar mov edi , hexvar call hexvar mov qword ptr [ rbx + num ] , rax mov rdx , qword ptr [ r12 + num ] jmp hexvar
,
push rbx mov rbx , rsi call hexvar mov qword ptr [ rax + hexvar ] , rbx pop rbx ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push r13 push r12 push rbp mov rbp , rsi push rbx mov rbx , rdi sub rsp , num mov r12 , qword ptr [ rdi + hexvar ] mov rdi , r12 call hexvar mov rdi , r12 mov r13 , rax call hexvar lea rdx , [ rip + hexvar ] cmp r13 , rdx je hexvar lea rdx , [ rip + hexvar ] cmp rax , rdx je hexvar mov rdi , r12 call hexvar add rax , qword ptr [ rbx + hexvar ] test rbp , rbp je hexvar movzx edx , byte ptr [ r13 + hexvar ] xor dl , byte ptr [ rbx + hexvar ] and edx , num je hexvar cmp rbx , r13 je hexvar mov edi , num jmp hexvar nop dword ptr [ rax ] mov rbx , qword ptr [ rbx + hexvar ] test rbx , rbx je hexvar cmp r13 , rbx je hexvar mov ecx , dword ptr [ rbx + hexvar ] lea edx , [ rcx - num ] cmp edx , num ja hexvar mov rcx , qword ptr [ rbx + hexvar ] mov esi , edi shl esi , cl neg esi movsxd rsi , esi test rbp , rbp js hexvar and rbp , rsi test rbp , rbp jne hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 ret nop neg rbp and rsi , rbp neg rsi mov rbp , rsi jmp hexvar nop test rbx , rbx je hexvar add rsp , num add rax , rbp pop rbx pop rbp pop r12 pop r13 ret lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar
push r12 mov r12d , esi push rbp mov rbp , rdi push rbx sub rsp , hexvar cmp byte ptr [ rdi ] , hexvar jne hexvar cmp byte ptr [ rdi + num ] , num je hexvar mov rdi , rbp call hexvar mov rbx , rax test rax , rax je hexvar mov rdi , rbx call hexvar test eax , eax je hexvar test r12d , r12d je hexvar mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar test r12d , r12d je hexvar js hexvar mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp pop r12 ret nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test eax , eax je hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar mov rdi , rbx call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test eax , eax jne hexvar jmp hexvar nop word ptr cs : [ rax + rax ] mov rdi , rbx mov esi , num call hexvar mov rbx , rax jmp hexvar nop word ptr [ rax + rax ] mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rsi , rbp mov rdi , rax xor eax , eax call hexvar call hexvar sub qword ptr [ rip + hexvar ] , num add rsp , hexvar pop rbx pop rbp pop r12 ret nop mov rbx , rsp mov rdi , rbx call hexvar lea rdx , [ rip + hexvar ] cmp rax , rdx je hexvar mov edx , dword ptr [ rip + hexvar ] test edx , edx jne hexvar xor edx , edx mov rsi , rbx mov rdi , rax call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov rdi , rbp call hexvar mov rbx , rax test rax , rax jne hexvar mov rdi , rbp call hexvar mov rbx , rax test byte ptr [ rip + hexvar ] , num je hexvar mov esi , hexvar mov edi , num call hexvar mov rdx , qword ptr [ rip + hexvar ] mov rdi , rbx mov qword ptr [ rax + hexvar ] , rbx mov rsi , rax mov qword ptr [ rax + hexvar ] , rdx call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rdi , rbx call hexvar jmp hexvar nop dword ptr [ rax ] mov rdi , rbx call hexvar jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
test byte ptr [ rdi ] , num jne hexvar or byte ptr [ rdi + num ] , num jmp hexvar nop mov rax , qword ptr [ rip + hexvar ] cmp qword ptr [ rdi + num ] , rax je hexvar sub rsp , num call hexvar or byte ptr [ rax + num ] , num mov rdi , rax add rsp , num jmp hexvar nop word ptr cs : [ rax + rax ] mov rdi , qword ptr [ rdi + hexvar ] or byte ptr [ rdi + num ] , num jmp hexvar
push rbp push rbx sub rsp , num nop word ptr cs : [ rax + rax ] call hexvar mov rbx , rax mov rax , qword ptr [ rip + hexvar ] mov rdi , rbx movzx ebp , byte ptr [ rax ] call hexvar mov rdi , rbx call hexvar mov dword ptr [ rax ] , num cmp bpl , hexvar je hexvar add rsp , num pop rbx pop rbp jmp hexvar nop dword ptr [ rax ] mov rax , qword ptr [ rip + hexvar ] lea rdx , [ rax + num ] mov qword ptr [ rip + hexvar ] , rdx movzx edx , byte ptr [ rax + num ] cmp dl , hexvar jne hexvar lea rdx , [ rax + num ] mov qword ptr [ rip + hexvar ] , rdx movzx edx , byte ptr [ rax + num ] cmp dl , hexvar jne hexvar add rsp , num pop rbx pop rbp jmp hexvar
,
,
,
,
,
mov rax , qword ptr [ rdi + hexvar ] test rax , rax je hexvar test byte ptr [ rip + hexvar ] , num jne hexvar xor eax , eax ret nop dword ptr [ rax ] push rbp mov rbp , rsi push rbx mov rbx , rdi mov rdi , rax sub rsp , num call hexvar cmp rax , rbp je hexvar xor eax , eax add rsp , num pop rbx pop rbp ret nop word ptr [ rax + rax ] mov rdi , qword ptr [ rbx + hexvar ] mov esi , num call hexvar test eax , eax jne hexvar mov edx , dword ptr [ rbx + hexvar ] cmp edx , hexvar ja hexvar cmp edx , hexvar jae hexvar cmp edx , hexvar jne hexvar mov rdi , qword ptr [ rbx + hexvar ] test rdi , rdi je hexvar mov eax , dword ptr [ rip + hexvar ] and eax , hexvar cmp eax , hexvar jbe hexvar call hexvar test byte ptr [ rax ] , num jne hexvar mov rdi , qword ptr [ rbx + hexvar ] call hexvar mov eax , dword ptr [ rax + hexvar ] shr eax , num and eax , num jmp hexvar nop word ptr cs : [ rax + rax ] cmp edx , hexvar jne hexvar jmp hexvar mov rdi , qword ptr [ rbx + hexvar ] test rdi , rdi je hexvar mov eax , dword ptr [ rip + hexvar ] and eax , hexvar cmp eax , hexvar jbe hexvar call hexvar mov rdi , qword ptr [ rbx + hexvar ] test byte ptr [ rax ] , num jne hexvar call hexvar mov eax , dword ptr [ rax ] shr eax , num and eax , num jmp hexvar call hexvar test byte ptr [ rax + hexvar ] , num jne hexvar mov rdi , qword ptr [ rbx + hexvar ] jmp hexvar mov eax , num jmp hexvar
,
,
,
push rbp push rbx sub rsp , hexvar call hexvar test rax , rax je hexvar mov rbx , rax mov rax , qword ptr [ rip + hexvar ] cmp byte ptr [ rax ] , hexvar je hexvar lea rsi , [ rip + hexvar ] xor edi , edi mov edx , num call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar call hexvar mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp ret nop dword ptr [ rax + rax ] add rax , num mov rsi , rsp xor edx , edx xor edi , edi mov qword ptr [ rip + hexvar ] , rax call hexvar movzx eax , byte ptr [ rsp + hexvar ] cmp al , num je hexvar cmp al , num je hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rax xor eax , eax call hexvar jmp hexvar nop dword ptr [ rax + rax ] mov rdi , rbx call hexvar mov rdi , rax mov rbp , rax call hexvar lea rdx , [ rip + hexvar ] cmp rax , rdx je hexvar lea rsi , [ rip + hexvar ] xor edi , edi mov edx , num call hexvar mov rsi , rbx mov rdi , rax xor eax , eax call hexvar call hexvar mov rdi , rbx call hexvar add rsp , hexvar pop rbx pop rbp ret nop dword ptr [ rax + rax ] cmp byte ptr [ rsp + hexvar ] , num lea rsi , [ rdx + hexvar ] je hexvar mov rsi , qword ptr [ rip + hexvar ] mov rdi , rbp call hexvar mov rsi , qword ptr [ rsp + hexvar ] mov rdi , rbp call hexvar jmp hexvar
,
,
,
,
,
,
,
,
push r13 push r12 push rbp push rbx sub rsp , num mov rbx , qword ptr [ rip + hexvar ] test rbx , rbx je hexvar lea r12 , [ rip + hexvar ] jmp hexvar nop dword ptr [ rax + rax ] mov rdi , rbx call hexvar mov rbx , rax test rax , rax je hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar mov rdi , rbx call hexvar mov rdi , rbx cmp qword ptr [ rax + hexvar ] , num je hexvar call hexvar mov esi , hexvar mov rdi , qword ptr [ rax + hexvar ] call hexvar mov rbp , rax test rax , rax je hexvar cmp byte ptr [ rax + num ] , hexvar je hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar mov rdi , rbx call hexvar test eax , eax jne hexvar mov rdi , rbx mov rdx , r12 lea rsi , [ rip + hexvar ] call hexvar mov rdi , rbx call hexvar mov rbx , rax test rax , rax jne hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax ] call hexvar test eax , eax je hexvar jmp hexvar nop cmp byte ptr [ rax + num ] , hexvar jne hexvar lea r13 , [ rax + num ] mov rdi , r13 call hexvar lea rdi , [ rbp + num ] mov rsi , r13 lea rdx , [ rax + num ] call hexvar jmp hexvar
,
,
,
push rbp push rbx sub rsp , num call hexvar test rax , rax je hexvar mov rbx , rax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rax + num ] call hexvar cmp rax , qword ptr [ rip + hexvar ] je hexvar call hexvar mov rbp , rax call hexvar mov rdx , qword ptr [ rip + hexvar ] mov dword ptr [ rax + num ] , hexvar mov rdx , qword ptr [ rdx + hexvar ] mov rcx , qword ptr [ rdx + num ] mov qword ptr [ rax + hexvar ] , rbp mov qword ptr [ rax + hexvar ] , rcx mov qword ptr [ rdx + num ] , rbp mov rdi , rbx call hexvar mov rdi , rbx call hexvar add rsp , num pop rbx pop rbp jmp hexvar nop dword ptr [ rax ] mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdi , qword ptr [ rax + num ] call hexvar mov rbp , rax call hexvar cmp rbp , rax jne hexvar jmp hexvar nop add rsp , num pop rbx pop rbp ret
push r13 push r12 push rbp push rbx sub rsp , num mov edx , dword ptr [ rip + hexvar ] test edx , edx je hexvar mov rbp , qword ptr [ rip + hexvar ] lea rdx , [ rip + hexvar ] movzx eax , byte ptr [ rbp ] cmp byte ptr [ rdx + rax ] , num mov r12 , rax jne hexvar nop dword ptr [ rax + rax ] add rbp , num movzx eax , byte ptr [ rbp ] cmp byte ptr [ rdx + rax ] , num mov r12 , rax je hexvar mov byte ptr [ rbp ] , num lea r13 , [ rip + hexvar ] nop dword ptr [ rax ] call hexvar mov rbx , rax test rax , rax je hexvar mov rdi , rax call hexvar mov rdi , rax call hexvar mov rax , qword ptr [ rip + hexvar ] movzx edx , byte ptr [ rax ] cmp dl , hexvar jne hexvar lea rcx , [ rax + num ] mov qword ptr [ rip + hexvar ] , rcx movzx edx , byte ptr [ rax + num ] mov rax , rcx cmp dl , hexvar je hexvar mov rdi , rbx call hexvar call hexvar mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar add rsp , num pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax ] lea rdx , [ rax + num ] mov qword ptr [ rip + hexvar ] , rdx movzx edx , byte ptr [ rax + num ] cmp dl , hexvar jne hexvar lea rdx , [ rax + num ] mov qword ptr [ rip + hexvar ] , rdx movzx edx , byte ptr [ rax + num ] cmp byte ptr [ r13 + rdx ] , num mov rdi , rbx jne hexvar call hexvar jmp hexvar nop dword ptr [ rax + rax ] xor r12d , r12d xor ebp , ebp jmp hexvar nop word ptr [ rax + rax ] add rsp , num movsx esi , r12b mov rdi , rbp pop rbx pop rbp pop r12 pop r13 jmp hexvar
push rbx xor esi , esi mov rbx , rdi sub rsp , hexvar call hexvar test rax , rax je hexvar add rsp , hexvar pop rbx ret nop word ptr [ rax + rax ] mov eax , dword ptr [ rip + hexvar ] test eax , eax jne hexvar mov rdi , qword ptr [ rip + hexvar ] mov rsi , rbx mov rax , qword ptr [ rdi + num ] call qword ptr [ rax + hexvar ] test eax , eax jne hexvar mov rdi , rbx call hexvar mov rdi , rax mov qword ptr [ rsp + num ] , rax call hexvar mov rax , qword ptr [ rsp + num ] add rsp , hexvar pop rbx ret nop word ptr [ rax + rax ] mov rdi , rbx call hexvar test rax , rax jne hexvar add rsp , hexvar mov rdi , rbx lea rcx , [ rip + hexvar ] xor edx , edx lea rsi , [ rip + hexvar ] pop rbx jmp hexvar
,
test byte ptr [ rdi ] , num jne hexvar or byte ptr [ rdi ] , hexvar ret nop dword ptr [ rax ] mov rax , qword ptr [ rip + hexvar ] cmp qword ptr [ rdi + num ] , rax je hexvar sub rsp , num call hexvar or byte ptr [ rax ] , hexvar add rsp , num ret nop mov rdi , qword ptr [ rdi + hexvar ] or byte ptr [ rdi ] , hexvar ret
,
,
,
,
,
,
,
,
,
,
mov rdx , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rdx + hexvar ] mov eax , dword ptr [ rax + hexvar ] cmp eax , edi je hexvar lea ecx , [ rdi - num ] push rbx mov ebx , edi cmp ecx , num jbe hexvar test eax , eax jne hexvar cmp edi , num jne hexvar pop rbx ret nop dword ptr [ rax + rax ] xor esi , esi cmp edi , num mov rdi , rdx sete sil add esi , num call hexvar mov edi , ebx xor esi , esi pop rbx jmp hexvar nop ret
,
,
,
push r13 push r12 mov r12d , esi push rbp mov rbp , rdi push rbx movsx ebx , dx sub rsp , hexvar movzx eax , byte ptr [ rcx + hexvar ] cmp al , num je hexvar ja hexvar cmp al , num jne hexvar test r8d , r8d jne hexvar mov edx , ebx mov esi , r12d mov rdi , rbp call hexvar mov edx , dword ptr [ rip + hexvar ] mov dword ptr [ rax + hexvar ] , edx add rsp , hexvar pop rbx pop rbp pop r12 pop r13 ret nop word ptr [ rax + rax ] sub eax , hexvar cmp al , num jbe hexvar mov rdi , rcx mov dword ptr [ rsp + num ] , r9d mov dword ptr [ rsp ] , r8d call hexvar sub rsp , num mov edx , ebx mov esi , r12d mov r9d , dword ptr [ rsp + hexvar ] mov rcx , rax mov rdi , rbp push r9 mov r8d , dword ptr [ rsp + hexvar ] mov r9d , r8d xor r8d , r8d call hexvar pop rdx pop rcx jmp hexvar nop word ptr [ rax + rax ] mov rdx , qword ptr [ rcx + hexvar ] lea r13 , [ rsp + hexvar ] xor eax , eax mov dword ptr [ rsp + hexvar ] , r9d lea rsi , [ rip + hexvar ] mov rdi , r13 mov dword ptr [ rsp + num ] , r8d mov qword ptr [ rsp ] , rcx call hexvar mov rdi , r13 call hexvar lea rsi , [ rip + hexvar ] mov r13 , rax mov rdi , rax call hexvar lea rsi , [ rip + hexvar ] mov rdi , r13 call hexvar mov rcx , qword ptr [ rsp ] mov rdi , r13 mov rsi , qword ptr [ rcx + hexvar ] call hexvar mov rcx , qword ptr [ rsp ] mov r9d , dword ptr [ rsp + hexvar ] mov r8d , dword ptr [ rsp + num ] mov byte ptr [ rcx + hexvar ] , num mov qword ptr [ rcx ] , r13 mov qword ptr [ rcx + hexvar ] , num jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp push rbx mov rbx , rdi sub rsp , hexvar cmp rdi , hexvar jle hexvar lea rax , [ rdi - hexvar ] sar rax , num je hexvar lea rcx , [ rsp + hexvar ] xor edx , edx mov edi , eax lea ebx , [ rdx + num ] and edi , hexvar shr rax , num jne hexvar mov byte ptr [ rsp + rdx + hexvar ] , dil movsxd rbx , ebx lea rbp , [ rsp + hexvar ] jmp hexvar nop word ptr [ rax + rax ] movzx edi , byte ptr [ rbp + rbx ] movsx rdi , dil mov esi , num sub rbx , num call hexvar test ebx , ebx jne hexvar add rsp , hexvar mov esi , num mov edi , hexvar pop rbx pop rbp jmp hexvar or edi , hexvar add rcx , num movsxd rdx , ebx mov byte ptr [ rcx - num ] , dil jmp hexvar cmp rdi , hexvar jg hexvar test rdi , rdi jg hexvar jne hexvar add rsp , hexvar pop rbx pop rbp ret nop word ptr [ rax + rax ] mov esi , num xor edi , edi call hexvar jmp hexvar nop lea rdi , [ rdi - num ] sar rdi , num add rsp , hexvar mov esi , num pop rbx pop rbp jmp hexvar nop dword ptr [ rax + rax ] mov esi , num mov edi , hexvar call hexvar lea rdi , [ rbx - hexvar ] add rsp , hexvar mov esi , num pop rbx sar rdi , num pop rbp jmp hexvar nop word ptr [ rax + rax ] mov rbp , rdi neg rbp cmp rdi , - hexvar jge hexvar nop mov esi , num mov edi , hexvar sub rbp , hexvar call hexvar cmp rbp , hexvar jg hexvar lea rdi , [ rbp - num ] sar rdi , num or rdi , hexvar jmp hexvar
,
push r15 mov r15d , edi mov rdi , rsi push r14 mov r14d , ecx push r13 mov r13 , r8 push r12 mov r12 , r9 push rbp push rbx mov rbx , rsi sub rsp , hexvar mov qword ptr [ rsp + num ] , rdx call hexvar mov rax , qword ptr [ rip + hexvar ] mov rdi , qword ptr [ rip + hexvar ] mov esi , ebx mov rdx , qword ptr [ rsp + num ] mov rbp , qword ptr [ rax + hexvar ] lea rcx , [ rbp + rbx ] mov qword ptr [ rax + hexvar ] , rcx mov rax , qword ptr [ rsp + hexvar ] mov qword ptr [ rdi + hexvar ] , rdx mov dword ptr [ rdi + hexvar ] , r15d mov dword ptr [ rdi + hexvar ] , r14d mov qword ptr [ rdi + hexvar ] , r13 mov qword ptr [ rdi + hexvar ] , r12 mov qword ptr [ rdi + hexvar ] , rax call hexvar mov r12 , qword ptr [ rip + hexvar ] lea rdi , [ r12 + hexvar ] call hexvar mov rdi , rbx mov qword ptr [ r12 + hexvar ] , rax call hexvar add rsp , hexvar mov rax , rbp pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
,
,
,
,
,
push r12 push rbp push rbx mov rbx , rdi mov r12 , qword ptr [ rdi + hexvar ] mov rbp , qword ptr [ rdi + hexvar ] mov rdi , qword ptr [ rdi + hexvar ] call hexvar mov ecx , dword ptr [ rbx + hexvar ] mov edi , ecx shr edi , num je hexvar movsxd rdi , edi cqo and ecx , num idiv rdi cmp ecx , num je hexvar test ecx , ecx je hexvar cmp ecx , num jne hexvar cmp rax , hexvar jg hexvar movsxd rbp , ebp mov byte ptr [ r12 + rbp + hexvar ] , num mov rdx , qword ptr [ rbx + hexvar ] lea rdi , [ rbx + rdx + hexvar ] mov edx , num mov rsi , rax call hexvar mov ecx , dword ptr [ rbx + hexvar ] mov rdx , qword ptr [ rbx + hexvar ] and ecx , num add rcx , rdx mov qword ptr [ rbx + hexvar ] , num mov qword ptr [ rbx + hexvar ] , rcx mov qword ptr [ rbx + hexvar ] , num pop rbx pop rbp pop r12 ret nop word ptr [ rax + rax ] mov rdx , qword ptr [ rbx + hexvar ] lea rdi , [ rbx + rdx + hexvar ] mov edx , num jmp hexvar nop dword ptr [ rax + rax ] cmp rax , hexvar jg hexvar movsxd rbp , ebp or eax , hexvar mov byte ptr [ r12 + rbp + hexvar ] , al mov rdx , qword ptr [ rbx + hexvar ] jmp hexvar nop word ptr [ rax + rax ] cmp rax , hexvar jg hexvar movsxd rbp , ebp mov byte ptr [ r12 + rbp + hexvar ] , num mov rdx , qword ptr [ rbx + hexvar ] mov byte ptr [ rbx + rdx + hexvar ] , al jmp hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar lea rdx , [ rip + hexvar ] mov esi , hexvar lea rdi , [ rip + hexvar ] call hexvar
,
,
,
,
,
,
,
mov rax , qword ptr [ rip + hexvar ] mov ecx , num mov esi , hexvar and edi , num mov edx , num mov rax , qword ptr [ rax + hexvar ] mov r8d , dword ptr [ rax + hexvar ] sub ecx , r8d sub edx , r8d rol esi , cl shl edi , cl and esi , dword ptr [ rax + hexvar ] bts edi , edx and esi , hexvar mov rdx , qword ptr [ rax + hexvar ] or esi , edi mov edi , dword ptr [ rax + hexvar ] mov dword ptr [ rax + hexvar ] , esi jmp hexvar
,
push rbx mov edi , num sub rsp , hexvar call hexvar mov rbx , rsp xor edi , edi mov edx , num mov rsi , rbx call hexvar mov rax , qword ptr [ rip + hexvar ] mov edx , dword ptr [ rip + hexvar ] mov rcx , rbx mov rdi , qword ptr [ rip + hexvar ] mov rsi , qword ptr [ rax + hexvar ] xor eax , eax test edx , edx setne al lea rdx , [ rdi + hexvar ] xor r8d , r8d sub rsi , rdx lea r9d , [ rax + hexvar ] mov edx , num call hexvar add rsp , hexvar pop rbx ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
mov edi , num jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
mov edi , num jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
xor edx , edx mov esi , hexvar mov edi , num jmp hexvar
,
,
,
,
,
push rbx mov edx , hexvar mov esi , num mov edi , num xor eax , eax call hexvar mov edx , hexvar mov edi , num mov ecx , hexvar mov ebx , eax xor eax , eax mov esi , ebx call hexvar xor edi , edi mov esi , num shr rax , hexvar mov rdx , rax lea rax , [ rip + hexvar ] cmp dword ptr [ rax + rbx * num ] , num pop rbx sete dil jmp hexvar
push rbx xor edi , edi mov edx , hexvar mov esi , num xor eax , eax call hexvar mov edx , hexvar mov edi , num mov r8d , hexvar mov ebx , eax mov ecx , hexvar xor eax , eax mov esi , ebx call hexvar xor esi , esi mov rdx , rax shr rdx , hexvar cmp eax , num lea rax , [ rip + hexvar ] sete sil xor edi , edi cmp dword ptr [ rax + rbx * num ] , num pop rbx sete dil jmp hexvar
,
,
,
,
,
,
,
,
,
mov rax , qword ptr [ rip + hexvar ] and eax , hexvar cmp edi , hexvar je hexvar cmp edi , hexvar je hexvar cmp rax , hexvar je hexvar lea rdi , [ rip + hexvar ] jmp hexvar nop dword ptr [ rax + rax ] push rbx mov ebx , edi cmp rax , hexvar je hexvar lea rdi , [ rip + hexvar ] call hexvar cmp ebx , hexvar je hexvar pop rbx ret nop dword ptr [ rax ] lea rdi , [ rip + hexvar ] jmp hexvar nop dword ptr [ rax ] lea rdi , [ rip + hexvar ] call hexvar cmp ebx , hexvar jne hexvar pop rbx jmp hexvar
,
,
,
,
,
,
,
,
,
mov edi , num jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
mov edx , dword ptr [ rip + hexvar ] mov eax , dword ptr [ rip + hexvar ] or rax , qword ptr [ rip + hexvar ] shl edx , hexvar or rax , rdx mov edx , dword ptr [ rip + hexvar ] shl edx , hexvar movsxd rdx , edx or rax , rdx mov qword ptr [ rip + hexvar ] , rax test byte ptr [ rip + hexvar ] , num jne hexvar ret nop dword ptr [ rax ] mov edi , num jmp hexvar
mov eax , dword ptr [ rip + hexvar ] mov edi , dword ptr [ rip + hexvar ] mov esi , num shl eax , hexvar or qword ptr [ rip + hexvar ] , rax jmp hexvar
push rbx lea rdi , [ rip + hexvar ] call hexvar test eax , eax jne hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov qword ptr [ rip + hexvar ] , rax mov edx , hexvar test byte ptr [ rip + hexvar ] , num je hexvar mov esi , num mov edi , num xor eax , eax call hexvar mov ecx , hexvar mov edx , hexvar mov edi , num mov ebx , eax mov r8d , hexvar xor eax , eax mov esi , ebx call hexvar mov rdx , qword ptr [ rip + hexvar ] mov dword ptr [ rip + hexvar ] , num mov rdi , rax and edx , hexvar lea rcx , [ rdx + rdx * num ] lea rdx , [ rip + hexvar ] mov esi , dword ptr [ rdx + rcx * num + num ] lea rdx , [ rip + hexvar ] mov qword ptr [ rip + hexvar ] , rsi xor esi , esi cmp dword ptr [ rdx + rbx * num ] , num sete sil pop rbx jmp hexvar nop dword ptr [ rax ] lea rdi , [ rip + hexvar ] call hexvar test eax , eax jne hexvar mov edx , num lea rsi , [ rip + hexvar ] xor edi , edi call hexvar mov rdi , rax xor eax , eax call hexvar lea rdi , [ rip + hexvar ] call hexvar mov edx , hexvar test byte ptr [ rip + hexvar ] , num jne hexvar xor edi , edi mov esi , num xor eax , eax call hexvar mov ecx , hexvar mov edx , hexvar mov edi , num mov ebx , eax mov r8d , hexvar xor eax , eax mov esi , ebx call hexvar mov rcx , qword ptr [ rip + hexvar ] lea rdx , [ rip + hexvar ] xor edi , edi mov dword ptr [ rip + hexvar ] , num shr rax , hexvar and ecx , hexvar lea rcx , [ rcx + rcx * num ] mov ecx , dword ptr [ rdx + rcx * num ] mov rdx , rax lea rax , [ rip + hexvar ] cmp dword ptr [ rax + rbx * num ] , num pop rbx sete dil xor esi , esi mov qword ptr [ rip + hexvar ] , rcx jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
movabs rcx , hexvar push rbp mov ebp , edi push rbx sub rsp , num mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rax + hexvar ] , rcx mov dword ptr [ rax + hexvar ] , edi mov edi , num mov dword ptr [ rax + hexvar ] , num call hexvar mov rax , qword ptr [ rip + hexvar ] xor edx , edx mov edi , ebp mov rbx , qword ptr [ rax + hexvar ] mov esi , dword ptr [ rbx + hexvar ] call hexvar movabs rdx , hexvar mov qword ptr [ rbx + hexvar ] , rax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rax + hexvar ] , rdx add rsp , num pop rbx pop rbp ret
,
,
,
,
,
push rbx xor esi , esi sub rsp , hexvar lea rbx , [ rsp + num ] mov qword ptr [ rsp + num ] , rdi mov rdi , rbx call hexvar cmp eax , - num je hexvar add rsp , hexvar pop rbx ret nop dword ptr [ rax ] mov esi , num mov rdi , rbx call hexvar cmp eax , - num je hexvar add rsp , hexvar add eax , hexvar pop rbx ret nop dword ptr [ rax + rax ] mov esi , num mov rdi , rbx call hexvar cmp eax , - num je hexvar add rsp , hexvar add eax , hexvar pop rbx ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push r14 xor eax , eax push r13 push r12 push rbp push rbx mov r12 , qword ptr [ rdi + hexvar ] mov rbx , rdi sub r12 , qword ptr [ rdi + hexvar ] mov r13 , qword ptr [ rdi + num ] add rsi , r12 setb al add rsi , qword ptr [ rdi + hexvar ] setb dl test rax , rax jne hexvar movzx edx , dl test rdx , rdx je hexvar lea rax , [ rip + hexvar ] call qword ptr [ rax ] mov qword ptr [ rbx + num ] , num mov qword ptr [ num ] , r13 ud2 nop mov rax , r12 shr rax , num cmp qword ptr [ rdi ] , rsi lea rbp , [ rsi + rax + hexvar ] cmovae rsi , qword ptr [ rdi ] cmp rsi , rbp cmovae rbp , rsi mov rsi , rbp call hexvar mov r14 , rax test rax , rax je hexvar lea rsi , [ rax + rbp ] mov qword ptr [ rbx + num ] , rax mov rdx , r12 mov qword ptr [ rax + num ] , r13 mov qword ptr [ rbx + hexvar ] , rsi mov qword ptr [ rax ] , rsi mov rax , qword ptr [ rbx + hexvar ] mov rsi , qword ptr [ rbx + hexvar ] lea rbp , [ r14 + rax + hexvar ] not rax and rbp , rax mov rdi , rbp call hexvar test byte ptr [ rbx + hexvar ] , num jne hexvar mov rax , qword ptr [ rbx + hexvar ] lea rdx , [ r13 + rax + hexvar ] not rax and rax , rdx cmp qword ptr [ rbx + hexvar ] , rax je hexvar add r12 , rbp mov qword ptr [ rbx + hexvar ] , rbp mov qword ptr [ rbx + hexvar ] , r12 and byte ptr [ rbx + hexvar ] , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 ret nop mov rax , qword ptr [ r13 + num ] mov rsi , r13 mov rdi , rbx mov qword ptr [ r14 + num ] , rax call hexvar jmp hexvar
,
,
push r12 mov r12 , rdi push rbp push rbx call hexvar mov rbx , rax call hexvar mov rdi , qword ptr [ rip + hexvar ] add ebx , num mov rbp , rax mov dword ptr [ rax + num ] , hexvar mov rax , qword ptr [ rip + hexvar ] sub rax , rdi cmp rbx , rax ja hexvar mov rdx , rbx mov rsi , r12 call hexvar mov rcx , qword ptr [ rip + hexvar ] add rbx , qword ptr [ rip + hexvar ] cmp rbx , rcx je hexvar mov rdx , qword ptr [ rip + hexvar ] mov rsi , qword ptr [ rip + hexvar ] lea rax , [ rbx + rdx ] not rdx and rax , rdx mov rdx , qword ptr [ rip + hexvar ] mov rdi , rax mov qword ptr [ rip + hexvar ] , rax mov rbx , rdx sub rdi , rsi sub rbx , rsi cmp rdi , rbx jbe hexvar mov qword ptr [ rip + hexvar ] , rdx mov rax , rdx mov qword ptr [ rip + hexvar ] , rax mov qword ptr [ rbp + hexvar ] , rcx pop rbx pop rbp pop r12 ret nop word ptr cs : [ rax + rax ] lea rdi , [ rip + hexvar ] mov rsi , rbx call hexvar mov rdi , qword ptr [ rip + hexvar ] jmp hexvar nop dword ptr [ rax + rax ] or byte ptr [ rip + hexvar ] , num jmp hexvar
,
push r13 push r12 push rbp mov rbp , rdi mov edi , hexvar push rbx lea r12 , [ rbp * num ] sub rsp , num call hexvar mov rcx , qword ptr [ rip + hexvar ] movsxd rsi , dword ptr [ rip + hexvar ] xor edx , edx lea r13 , [ rax + hexvar ] mov r8 , qword ptr [ rip + hexvar ] mov rbx , rax mov rdi , r13 call hexvar mov rdx , qword ptr [ rbx + hexvar ] mov rcx , qword ptr [ rbx + hexvar ] mov rax , rdx sub rax , rcx cmp r12 , rax ja hexvar mov rdi , qword ptr [ rbx + hexvar ] add rcx , r12 mov qword ptr [ rbx + hexvar ] , rcx cmp rcx , rdi je hexvar mov rsi , qword ptr [ rbx + hexvar ] mov r9 , rdx lea rax , [ rcx + rsi ] not rsi mov rcx , qword ptr [ rbx + hexvar ] and rax , rsi mov rsi , rax sub r9 , rcx mov qword ptr [ rbx + hexvar ] , rax sub rsi , rcx cmp rsi , r9 jbe hexvar mov qword ptr [ rbx + hexvar ] , rdx mov rax , rdx mov rdx , r12 xor esi , esi mov qword ptr [ rbx + hexvar ] , rax mov qword ptr [ rbx ] , rdi call hexvar mov dword ptr [ rbx + num ] , ebp add rsp , num mov rax , rbx pop rbx pop rbp pop r12 pop r13 ret nop dword ptr [ rax + rax ] mov rdi , r13 mov rsi , r12 call hexvar mov rcx , qword ptr [ rbx + hexvar ] mov rdi , qword ptr [ rbx + hexvar ] mov rdx , qword ptr [ rbx + hexvar ] add rcx , r12 mov qword ptr [ rbx + hexvar ] , rcx cmp rcx , rdi jne hexvar or byte ptr [ rbx + hexvar ] , num jmp hexvar
or byte ptr [ rdi + hexvar ] , num mov qword ptr [ rdi + hexvar ] , rcx mov qword ptr [ rdi + hexvar ] , r8 mov qword ptr [ rdi + hexvar ] , r9 jmp hexvar
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov eax , hexvar jmp hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , - num jne hexvar mov eax , hexvar jmp hexvar mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test rax , rax setne al movzx eax , al leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov eax , hexvar jmp hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , - num jne hexvar mov eax , hexvar jmp hexvar mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test rax , rax setne al movzx eax , al leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] cmp qword ptr [ rbp - hexvar ] , rax jne hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] jmp hexvar mov edi , hexvar call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , rdx cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - num ] cmp rax , qword ptr [ rbp - hexvar ] je hexvar mov rax , qword ptr [ rbp - num ] mov rdx , qword ptr [ rax + num ] mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + num ] , rdx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + hexvar ] , num mov r8d , num mov ecx , num lea rdx , [ rip - hexvar ] mov esi , num mov edi , hexvar call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov qword ptr [ rax + num ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov eax , hexvar jmp hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , - num jne hexvar mov eax , hexvar jmp hexvar mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test rax , rax setne al movzx eax , al leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov rax , qword ptr [ rax ] test rax , rax jne hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - num ] mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] cmp qword ptr [ rbp - hexvar ] , rax je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rdx ] mov rdx , qword ptr [ rbp - hexvar ] mov rsi , rcx mov rdi , rdx call rax test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax + num ] mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov eax , num leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rip + hexvar ] mov rbx , qword ptr [ rax ] lea rdi , [ rip + hexvar ] call hexvar mov rsi , rbx mov rdi , rax call hexvar mov qword ptr [ rbp - hexvar ] , num jmp hexvar cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] lea rcx , [ rdx + rax ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rcx mov rdi , rax call hexvar test eax , eax je hexvar mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] lea rsi , [ rip + hexvar ] mov rdi , rax mov eax , num call hexvar mov rax , qword ptr [ rbp - hexvar ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov qword ptr [ rbp - hexvar ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov rax , qword ptr [ rax ] mov rdi , rax call hexvar mov rdx , rax mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] lea rsi , [ rip + hexvar ] mov rdi , rax mov eax , num call hexvar add qword ptr [ rbp - hexvar ] , num mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax * num ] mov rax , qword ptr [ rbp - hexvar ] add rax , rdx mov rax , qword ptr [ rax ] test rax , rax jne hexvar mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] mov rsi , rax mov edi , hexvar call hexvar nop add rsp , hexvar pop rbx pop rbp ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rsi , rax mov edi , num call hexvar leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov rsi , rax mov edi , num call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov qword ptr [ rbp - hexvar ] , rcx mov rsi , qword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov r8 , rsi mov rsi , rax mov edi , num call hexvar leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov rcx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - num ] mov edx , hexvar mov rsi , rcx mov rdi , rax call hexvar leave ret
,
,
,
push rbp mov rbp , rsp push rbx sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx cmp qword ptr [ rbp - hexvar ] , - num jne hexvar lea rdi , [ rip + hexvar ] call hexvar jmp hexvar lea rdi , [ rip + hexvar ] call hexvar mov qword ptr [ rbp - hexvar ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov rbx , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov esi , num mov edi , num call hexvar mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov r8 , rbx mov rcx , rdx mov rdx , rax mov esi , num mov edi , num mov eax , num call hexvar nop add rsp , hexvar pop rbx pop rbp ret
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov dword ptr [ rbp - hexvar ] , esi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax lea rax , [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov esi , edx mov rdi , rax call hexvar lea rdx , [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rcx , rdx mov rdx , - num mov edi , eax call hexvar mov rcx , qword ptr [ rbp - num ] xor rcx , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov eax , edx mov byte ptr [ rbp - hexvar ] , al mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - num ] , rax xor eax , eax mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov rdx , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rip + hexvar ] mov qword ptr [ rbp - hexvar ] , rax movsx ecx , byte ptr [ rbp - hexvar ] lea rax , [ rbp - hexvar ] mov edx , num mov esi , ecx mov rdi , rax call hexvar lea rcx , [ rbp - hexvar ] mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov edi , num call hexvar mov rsi , qword ptr [ rbp - num ] xor rsi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar lea rax , [ rip + hexvar ] mov esi , hexvar mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax mov rax , qword ptr [ rbp - num ] leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov dword ptr [ rbp - hexvar ] , esi mov dword ptr [ rbp - hexvar ] , edx mov edi , hexvar call hexvar mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - num ] mov edx , dword ptr [ rbp - hexvar ] mov dword ptr [ rax + num ] , edx mov rax , qword ptr [ rbp - num ] mov edx , dword ptr [ rbp - hexvar ] mov dword ptr [ rax + hexvar ] , edx cmp dword ptr [ rbp - hexvar ] , num je hexvar cmp dword ptr [ rbp - hexvar ] , num jmp hexvar mov eax , dword ptr [ rbp - hexvar ] and eax , hexvar test eax , eax je hexvar lea rdx , [ rip - hexvar ] jmp hexvar lea rdx , [ rip - hexvar ] mov eax , dword ptr [ rbp - hexvar ] and eax , hexvar test eax , eax je hexvar lea rax , [ rip - hexvar ] jmp hexvar lea rax , [ rip - hexvar ] lea r8 , [ rip - hexvar ] mov rcx , rdx mov rdx , rax mov esi , num mov edi , num call hexvar mov rdx , rax mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax + hexvar ] , rdx nop mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rax ] mov rax , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx nop leave ret
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov rax , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - hexvar ] , num jne hexvar cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num sete al movzx eax , al add qword ptr [ rbp - num ] , rax mov ecx , num mov rax , qword ptr [ rbp - num ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar movabs rax , hexvar mov edx , num div qword ptr [ rbp - hexvar ] cmp qword ptr [ rbp - num ] , rax jb hexvar call hexvar mov rax , qword ptr [ rbp - num ] shr rax , num mov rdx , rax mov rax , qword ptr [ rbp - num ] add rax , rdx add rax , num mov qword ptr [ rbp - num ] , rax mov rax , qword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov qword ptr [ rax ] , rdx mov rax , qword ptr [ rbp - num ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar mov rcx , rax mov rax , qword ptr [ rbp - num ] mov rdx , rax mov esi , num mov rdi , rcx call hexvar leave ret
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - num ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov ecx , num mov rax , qword ptr [ rbp - hexvar ] mul qword ptr [ rbp - hexvar ] jno hexvar mov ecx , num test rax , rax jns hexvar mov ecx , num mov rax , rcx and eax , num test al , al je hexvar call hexvar mov rax , qword ptr [ rbp - hexvar ] imul rax , qword ptr [ rbp - hexvar ] mov rdx , rax mov rax , qword ptr [ rbp - num ] mov rsi , rdx mov rdi , rax call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx mov dword ptr [ rbp - hexvar ] , ecx mov eax , r8d mov byte ptr [ rbp - hexvar ] , al mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax ] cmp al , hexvar jne hexvar mov rax , qword ptr [ rbp - hexvar ] add rax , num movzx eax , byte ptr [ rax ] test al , al jne hexvar mov eax , num jmp hexvar mov eax , num mov byte ptr [ rbp - hexvar ] , al and byte ptr [ rbp - hexvar ] , num mov dword ptr [ rbp - hexvar ] , num cmp byte ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rip + hexvar ] mov rax , qword ptr [ rax ] mov qword ptr [ rbp - num ] , rax jmp hexvar mov rax , qword ptr [ rbp - hexvar ] lea rsi , [ rip + hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar mov eax , hexvar jmp hexvar movsx esi , byte ptr [ rbp - hexvar ] lea rdi , [ rbp - hexvar ] mov ecx , dword ptr [ rbp - hexvar ] mov rdx , qword ptr [ rbp - num ] mov rax , qword ptr [ rbp - hexvar ] mov r9 , rdi mov r8d , esi mov rsi , rax lea rdi , [ rip - hexvar ] call hexvar mov dword ptr [ rbp - hexvar ] , eax movzx eax , byte ptr [ rbp - hexvar ] xor eax , num test al , al je hexvar mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar test eax , eax je hexvar mov dword ptr [ rbp - hexvar ] , hexvar mov eax , dword ptr [ rbp - hexvar ] leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num je hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test rax , rax je hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test al , al je hexvar mov eax , num jmp hexvar mov eax , num mov byte ptr [ rbp - num ] , al and byte ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar test al , al je hexvar cmp byte ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar mov eax , num leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi mov qword ptr [ rbp - hexvar ] , rsi mov qword ptr [ rbp - hexvar ] , rdx cmp qword ptr [ rbp - hexvar ] , num jne hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num je hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test rax , rax je hexvar mov rdx , qword ptr [ rbp - hexvar ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rdx mov rdi , rax call hexvar test al , al je hexvar mov eax , num jmp hexvar mov eax , num mov byte ptr [ rbp - num ] , al and byte ptr [ rbp - num ] , num mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar test al , al je hexvar cmp byte ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] jmp hexvar mov eax , num leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax + num ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax + num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov rdi , rdx call hexvar test eax , eax jne hexvar mov eax , num jmp hexvar mov eax , num and eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax + num ] test al , al sete al test al , al je hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar mov rax , qword ptr [ rbp - num ] jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar xor eax , num test al , al je hexvar call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax mov eax , num jmp hexvar mov rax , qword ptr [ rbp - num ] leave ret
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi call hexvar mov qword ptr [ rbp - hexvar ] , rax cmp qword ptr [ rbp - hexvar ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax + num ] test al , al je hexvar mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax + num ] mov rax , qword ptr [ rbp - hexvar ] mov rsi , rax mov rdi , rdx call hexvar test eax , eax jne hexvar mov eax , num jmp hexvar mov eax , num and eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] movzx eax , byte ptr [ rax + num ] test al , al sete al test al , al je hexvar mov eax , num jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num jne hexvar mov rax , qword ptr [ rbp - num ] jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar xor eax , num test al , al je hexvar call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax mov rax , qword ptr [ rbp - num ] mov rdi , rax call hexvar call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax mov eax , num jmp hexvar mov rax , qword ptr [ rbp - num ] leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov qword ptr [ rbp - hexvar ] , rdi jmp hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar mov dword ptr [ rbp - num ] , eax cmp dword ptr [ rbp - num ] , num js hexvar mov eax , dword ptr [ rbp - num ] mov edi , eax call hexvar mov rax , qword ptr [ rbp - hexvar ] mov rdi , rax call hexvar xor eax , num test al , al jne hexvar nop leave ret
,
,
,
,
,
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov dword ptr [ rbp - hexvar ] , edx mov qword ptr [ rbp - hexvar ] , rcx mov eax , dword ptr [ rbp - hexvar ] or eax , hexvar mov dword ptr [ rbp - hexvar ] , eax mov edx , dword ptr [ rbp - hexvar ] mov rcx , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov rsi , rcx mov edi , eax mov eax , num call hexvar mov dword ptr [ rbp - hexvar ] , eax cmp dword ptr [ rbp - hexvar ] , num jns hexvar mov eax , num jmp hexvar mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar mov qword ptr [ rbp - num ] , rax cmp qword ptr [ rbp - num ] , num je hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov dword ptr [ rax ] , edx jmp hexvar call hexvar mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax mov eax , dword ptr [ rbp - hexvar ] mov edi , eax call hexvar call hexvar mov rdx , rax mov eax , dword ptr [ rbp - hexvar ] mov dword ptr [ rdx ] , eax mov rax , qword ptr [ rbp - num ] leave ret
push rbp mov rbp , rsp sub rsp , hexvar mov dword ptr [ rbp - hexvar ] , edi mov qword ptr [ rbp - hexvar ] , rsi mov dword ptr [ rbp - hexvar ] , edx mov qword ptr [ rbp - hexvar ] , rcx mov qword ptr [ rbp - hexvar ] , r8 mov qword ptr [ rbp - hexvar ] , r9 test al , al je hexvar movaps xmmword ptr [ rbp - hexvar ] , xmm0 movaps xmmword ptr [ rbp - hexvar ] , xmm1 movaps xmmword ptr [ rbp - hexvar ] , xmm2 movaps xmmword ptr [ rbp - hexvar ] , xmm3 movaps xmmword ptr [ rbp - hexvar ] , xmm4 movaps xmmword ptr [ rbp - hexvar ] , xmm5 movaps xmmword ptr [ rbp - hexvar ] , xmm6 movaps xmmword ptr [ rbp - hexvar ] , xmm7 mov rax , qword ptr fs : [ hexvar ] mov qword ptr [ rbp - hexvar ] , rax xor eax , eax mov dword ptr [ rbp - hexvar ] , num mov eax , dword ptr [ rbp - hexvar ] and eax , hexvar test eax , eax je hexvar mov dword ptr [ rbp - hexvar ] , hexvar mov dword ptr [ rbp - hexvar ] , hexvar lea rax , [ rbp + hexvar ] mov qword ptr [ rbp - hexvar ] , rax lea rax , [ rbp - hexvar ] mov qword ptr [ rbp - hexvar ] , rax mov eax , dword ptr [ rbp - hexvar ] cmp eax , hexvar ja hexvar mov rax , qword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov edx , edx add rax , rdx mov edx , dword ptr [ rbp - hexvar ] add edx , num mov dword ptr [ rbp - hexvar ] , edx jmp hexvar mov rax , qword ptr [ rbp - hexvar ] lea rdx , [ rax + num ] mov qword ptr [ rbp - hexvar ] , rdx mov eax , dword ptr [ rax ] mov dword ptr [ rbp - hexvar ] , eax mov ecx , dword ptr [ rbp - hexvar ] mov edx , dword ptr [ rbp - hexvar ] mov rsi , qword ptr [ rbp - hexvar ] mov eax , dword ptr [ rbp - hexvar ] mov edi , eax mov eax , num call hexvar mov edi , eax call hexvar mov rdi , qword ptr [ rbp - hexvar ] xor rdi , qword ptr fs : [ hexvar ] je hexvar call hexvar leave ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
test rsi , rsi je hexvar sub rsp , num xor edx , edx call hexvar test rax , rax je hexvar mov ecx , dword ptr [ rax ] lea edx , [ rcx - num ] cmp edx , num ja hexvar mov rax , qword ptr [ rax + hexvar ] mov rax , qword ptr [ rax ] add rsp , num ret nop dword ptr [ rax + rax ] xor eax , eax add rsp , num ret nop word ptr [ rax + rax ] xor eax , eax ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
push rbx mov rbx , rdi sub rsp , hexvar lea r8 , [ rsp + hexvar ] mov dword ptr [ rsp + hexvar ] , num call hexvar mov rsi , rax xor eax , eax test rsi , rsi js hexvar mov edx , dword ptr [ rsp + hexvar ] mov rdi , rbx call hexvar add rsp , hexvar pop rbx ret
,
,
,
,
,
,
,
,
,
,
,
,
,
push r15 lea eax , [ rsi - num ] push r14 push r13 push r12 push rbp mov ebp , esi push rbx mov rbx , rdi sub rsp , hexvar cmp eax , hexvar ja hexvar lea r12 , [ rdi + rax * num ] mov rsi , qword ptr [ r12 + hexvar ] test rsi , rsi jne hexvar xor edx , edx mov esi , num call hexvar test eax , eax jne hexvar add rsp , hexvar xor eax , eax pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret nop dword ptr [ rax ] xor edx , edx mov esi , num call hexvar test eax , eax je hexvar lea r14 , [ rbx + hexvar ] mov rdi , r14 call hexvar mov r13 , qword ptr [ rbx + hexvar ] mov r15 , rax lea rax , [ r13 + num ] mov qword ptr [ rbx + hexvar ] , rax mov rbx , rsp mov r8d , ebp mov rcx , r15 mov rdx , r13 lea rsi , [ rip + hexvar ] mov rdi , rbx xor eax , eax call hexvar mov rdi , r15 call hexvar mov r8d , ebp mov rdx , r13 mov rsi , rbx mov rdi , r14 mov ecx , num call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret nop dword ptr [ rax ] lea r14 , [ rbx + hexvar ] mov rdi , r14 call hexvar mov r13 , qword ptr [ rbx + hexvar ] mov r15 , rax lea rax , [ r13 + num ] mov qword ptr [ rbx + hexvar ] , rax mov qword ptr [ r12 + hexvar ] , r13 jmp hexvar nop dword ptr [ rax ] mov edx , ebp call hexvar add rsp , hexvar pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret
,
,
,
,
,
,
,
push rbx call hexvar mov rdi , rax mov rbx , rax call hexvar cmp eax , - num je hexvar mov edi , eax call hexvar mov rax , rbx pop rbx ret nop word ptr [ rax + rax ] mov rdi , rbx xor ebx , ebx call hexvar jmp hexvar
,
,
push r12 mov edx , num mov r12 , qword ptr [ rip + hexvar ] push rbp mov ebp , esi lea rsi , [ rip + hexvar ] push rbx mov rbx , rdi xor edi , edi call hexvar mov rdx , r12 mov rdi , rbx mov rsi , rax xor eax , eax call hexvar mov edx , num xor edi , edi lea rsi , [ rip + hexvar ] call hexvar mov rdi , rbx mov rsi , rax xor eax , eax call hexvar mov edx , num xor edi , edi lea rsi , [ rip + hexvar ] call hexvar mov rdi , rbx mov rsi , rax xor eax , eax call hexvar mov edx , num xor edi , edi lea rsi , [ rip + hexvar ] call hexvar mov rdi , rbx mov rsi , rax xor eax , eax call hexvar mov edx , num xor edi , edi lea rsi , [ rip + hexvar ] call hexvar mov rdi , rbx mov rsi , rax xor eax , eax call hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar mov rdi , rbx mov rsi , rax xor eax , eax call hexvar mov rdi , qword ptr [ rip + hexvar ] mov rsi , rbx call hexvar test ebp , ebp je hexvar mov edi , ebp call hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] call hexvar lea rdx , [ rip + hexvar ] mov rdi , rbx mov rsi , rax xor eax , eax call hexvar jmp hexvar
,
,
push r15 push r14 mov r14d , edx push r13 push r12 mov r12 , rdi mov edi , num push rbp push rbx mov rbx , rsi sub rsp , hexvar mov r13 , rsp mov rdx , r13 call hexvar test eax , eax jne hexvar mov eax , dword ptr [ rsp + hexvar ] and eax , hexvar cmp eax , hexvar jne hexvar cmp qword ptr [ rsp + hexvar ] , num je hexvar mov rsi , rbx mov rdi , r12 call hexvar mov ebp , eax test eax , eax jne hexvar test r14d , r14d jne hexvar mov rdi , r12 call hexvar add rsp , hexvar mov eax , ebp pop rbx pop rbp pop r12 pop r13 pop r14 pop r15 ret nop dword ptr [ rax ] mov rsi , rbx mov rdi , r12 call hexvar mov ebp , eax test eax , eax jne hexvar xor ebp , ebp jmp hexvar nop dword ptr [ rax ] mov rsi , r13 mov rdi , rbx call hexvar jmp hexvar nop dword ptr [ rax ] call hexvar mov edi , dword ptr [ rax ] call hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] mov r15 , rax call hexvar mov rdx , r15 mov rsi , rbx mov rdi , rax xor eax , eax call hexvar test r14d , r14d je hexvar jmp hexvar nop dword ptr [ rax ] call hexvar mov edi , dword ptr [ rax ] call hexvar xor edi , edi mov edx , num lea rsi , [ rip + hexvar ] mov r13 , rax call hexvar mov rdx , r13 mov rsi , rbx mov rdi , rax xor eax , eax call hexvar mov rdi , r12 call hexvar jmp hexvar nop word ptr [ rax + rax ] mov rsi , rbx mov rdi , r12 call hexvar mov ebp , eax test eax , eax jne hexvar mov esi , dword ptr [ rsp + hexvar ] mov rdi , rbx and esi , hexvar call hexvar mov edx , dword ptr [ rsp + hexvar ] mov esi , dword ptr [ rsp + hexvar ] mov rdi , rbx call hexvar test eax , eax js hexvar mov esi , dword ptr [ rsp + hexvar ] mov rdi , rbx and esi , hexvar call hexvar jmp hexvar
push r14 lea rsi , [ rip + hexvar ] push r13 mov r13 , rdi push r12 push rbp push rbx mov rdi , qword ptr [ rdi + hexvar ] call hexvar test rax , rax je hexvar mov edi , hexvar mov rbp , rax mov r12d , hexvar xor ebx , ebx call hexvar mov qword ptr [ r13 + hexvar ] , rax jmp hexvar nop mov rdx , r12 add rdi , rbx mov rcx , rbp mov esi , num sub rdx , rbx call hexvar mov rdi , rbp mov r14 , rax call hexvar test eax , eax jne hexvar add rbx , r14 mov rdi , rbp call hexvar test eax , eax jne hexvar mov rdi , qword ptr [ r13 + hexvar ] cmp rbx , r12 jne hexvar lea r12 , [ rbx + rbx ] mov rsi , r12 call hexvar mov rdi , rax mov qword ptr [ r13 + hexvar ] , rax jmp hexvar nop word ptr [ rax + rax ] mov qword ptr [ r13 + hexvar ] , rbx mov rdi , rbp pop rbx pop rbp pop r12 pop r13 pop r14 jmp hexvar mov rbx , qword ptr [ r13 + hexvar ] lea rsi , [ rip + hexvar ] xor edi , edi mov edx , num call hexvar mov rdi , rax mov rsi , rbx xor eax , eax call hexvar call hexvar mov edi , dword ptr [ rax ] call hexvar mov rbx , qword ptr [ r13 + hexvar ] mov edx , num xor edi , edi lea rsi , [ rip + hexvar ] mov rbp , rax call hexvar mov rdx , rbp mov rsi , rbx mov rdi , rax xor eax , eax call hexvar
sub rsp , hexvar mov qword ptr [ rsp + hexvar ] , rsi mov qword ptr [ rsp + hexvar ] , rdx mov qword ptr [ rsp + hexvar ] , rcx mov qword ptr [ rsp + hexvar ] , r8 mov qword ptr [ rsp + hexvar ] , r9 test al , al je hexvar movaps xmmword ptr [ rsp + hexvar ] , xmm0 movaps xmmword ptr [ rsp + hexvar ] , xmm1 movaps xmmword ptr [ rsp + hexvar ] , xmm2 movaps xmmword ptr [ rsp + hexvar ] , xmm3 movaps xmmword ptr [ rsp + hexvar ] , xmm4 movaps xmmword ptr [ rsp + hexvar ] , xmm5 movaps xmmword ptr [ rsp + hexvar ] , xmm6 movaps xmmword ptr [ rsp + hexvar ] , xmm7 lea rax , [ rsp + hexvar ] lea rsi , [ rsp + num ] mov dword ptr [ rsp + num ] , num mov qword ptr [ rsp + hexvar ] , rax lea rax , [ rsp + hexvar ] mov dword ptr [ rsp + hexvar ] , hexvar mov qword ptr [ rsp + hexvar ] , rax call hexvar add rsp , hexvar ret
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
